// Signature format: 4.0
package dev.atsushieno.ktmidi {

  public final class AndroidMidiAccess extends dev.atsushieno.ktmidi.MidiAccess {
    ctor public AndroidMidiAccess(android.content.Context applicationContext);
    method public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method public String getName();
    method public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method public suspend Object? openInput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput>);
    method public suspend Object? openOutput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput>);
    property public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property public String name;
    property public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
  }

  public final class ChordAlterationType {
    field public static final byte ADD_DEGREE = 16; // 0x10
    field public static final dev.atsushieno.ktmidi.ChordAlterationType INSTANCE;
    field public static final byte LOWER_DEGREE = 64; // 0x40
    field public static final byte NO_ALTERATION = 0; // 0x0
    field public static final byte RAISE_DEGREE = 48; // 0x30
    field public static final byte SUBTRACT_DEGREE = 32; // 0x20
  }

  public final class ChordSharpFlatsField {
    field public static final byte BASS_NOTE_AS_CHORD_TONIC_NOTE = -8; // 0xfffffff8
    field public static final byte DOUBLE_FLAT = -2; // 0xfffffffe
    field public static final byte DOUBLE_SHARP = 2; // 0x2
    field public static final byte FLAT = -1; // 0xffffffff
    field public static final dev.atsushieno.ktmidi.ChordSharpFlatsField INSTANCE;
    field public static final byte NATURAL = 0; // 0x0
    field public static final byte SHARP = 1; // 0x1
  }

  public final class ChordTypeField {
    field public static final byte AUGMENTED = 17; // 0x11
    field public static final byte AUGMENTED_7TH = 18; // 0x12
    field public static final byte CLEAR_CHORD = 0; // 0x0
    field public static final byte DIMINISHED = 19; // 0x13
    field public static final byte DIMINISHED_7TH = 20; // 0x14
    field public static final byte DOMINANT = 13; // 0xd
    field public static final byte DOMINANT_11TH = 15; // 0xf
    field public static final byte DOMINANT_13TH = 16; // 0x10
    field public static final byte DOMINANT_9TH = 14; // 0xe
    field public static final byte HALF_DIMINISHED = 21; // 0x15
    field public static final dev.atsushieno.ktmidi.ChordTypeField INSTANCE;
    field public static final byte MAJOR = 1; // 0x1
    field public static final byte MAJOR_11TH = 5; // 0x5
    field public static final byte MAJOR_13TH = 6; // 0x6
    field public static final byte MAJOR_6TH = 2; // 0x2
    field public static final byte MAJOR_7TH = 3; // 0x3
    field public static final byte MAJOR_9TH = 4; // 0x4
    field public static final byte MAJOR_MINOR = 22; // 0x16
    field public static final byte MINOR = 7; // 0x7
    field public static final byte MINOR_11TH = 11; // 0xb
    field public static final byte MINOR_13TH = 12; // 0xc
    field public static final byte MINOR_6TH = 8; // 0x8
    field public static final byte MINOR_7TH = 9; // 0x9
    field public static final byte MINOR_9TH = 10; // 0xa
    field public static final byte MINOR_MAJOR = 22; // 0x16
    field public static final byte NO_CHORD = 0; // 0x0
    field public static final byte PEDAL = 23; // 0x17
    field public static final byte POWER = 24; // 0x18
    field public static final byte SEVENTH_SUSPENDED_4TH = 27; // 0x1b
    field public static final byte SUSPENDED_2ND = 25; // 0x19
    field public static final byte SUSPENDED_4TH = 26; // 0x1a
  }

  public final class CoreMidiAccess extends dev.atsushieno.ktmidi.MidiAccess {
    ctor public CoreMidiAccess();
    method public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method public String getName();
    method public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method public suspend Object? openInput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput>);
    method public suspend Object? openOutput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput>);
    property public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property public String name;
    property public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
  }

  public final class Dc {
    ctor public Dc(int value);
    method public int component1();
    method public dev.atsushieno.ktmidi.Dc copy(int value);
    method public int getValue();
    property public final int value;
  }

  public final class DefaultMidiModuleDatabase extends dev.atsushieno.ktmidi.MidiModuleDatabase {
    ctor public DefaultMidiModuleDatabase();
    method public Iterable<dev.atsushieno.ktmidi.MidiModuleDefinition> all();
    method public java.util.List<dev.atsushieno.ktmidi.MidiModuleDefinition> getModules();
    method public dev.atsushieno.ktmidi.MidiModuleDefinition resolve(String moduleName);
    method public String resolvePossibleAlias(String name);
    property public final java.util.List<dev.atsushieno.ktmidi.MidiModuleDefinition> modules;
    field public static final dev.atsushieno.ktmidi.DefaultMidiModuleDatabase.Companion Companion;
  }

  public static final class DefaultMidiModuleDatabase.Companion {
    method public java.io.InputStream getResource(String name);
  }

  public enum DteTarget {
    method public static dev.atsushieno.ktmidi.DteTarget valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static dev.atsushieno.ktmidi.DteTarget[] values();
    enum_constant public static final dev.atsushieno.ktmidi.DteTarget NRPN;
    enum_constant public static final dev.atsushieno.ktmidi.DteTarget RPN;
  }

  public final class EmptyMidiAccess extends dev.atsushieno.ktmidi.MidiAccess {
    ctor public EmptyMidiAccess();
    method public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method public String getName();
    method public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method public suspend Object? openInput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput>);
    method public suspend Object? openOutput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput>);
    property public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property public String name;
    property public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
  }

  public final class FlexDataAddress {
    field public static final byte CHANNEL_FIELD = 0; // 0x0
    field public static final byte GROUP = 1; // 0x1
    field public static final dev.atsushieno.ktmidi.FlexDataAddress INSTANCE;
  }

  public final class FlexDataStatus {
    field public static final byte CHORD_NAME = 6; // 0x6
    field public static final dev.atsushieno.ktmidi.FlexDataStatus INSTANCE;
    field public static final byte KEY_SIGNATURE = 5; // 0x5
    field public static final byte METRONOME = 2; // 0x2
    field public static final byte TEMPO = 0; // 0x0
    field public static final byte TIME_SIGNATURE = 1; // 0x1
  }

  public final class FlexDataStatusBank {
    field public static final dev.atsushieno.ktmidi.FlexDataStatusBank INSTANCE;
    field public static final byte METADATA_TEXT = 1; // 0x1
    field public static final byte PERFORMANCE_TEXT = 2; // 0x2
    field public static final byte SETUP_AND_PERFORMANCE = 0; // 0x0
  }

  public final class FunctionBlockDirection {
    field public static final int BIDIRECTIONAL = 3; // 0x3
    field public static final int INPUT = 1; // 0x1
    field public static final dev.atsushieno.ktmidi.FunctionBlockDirection INSTANCE;
    field public static final int OUTPUT = 2; // 0x2
  }

  public final class FunctionBlockMidi1Bandwidth {
    field public static final dev.atsushieno.ktmidi.FunctionBlockMidi1Bandwidth INSTANCE;
    field public static final int NOT_AVAILABLE = 0; // 0x0
    field public static final int NO_LIMITATION = 1; // 0x1
    field public static final int UP_TO_31250BPS = 2; // 0x2
  }

  public final class FunctionBlockUiHint {
    field public static final int BOTH = 3; // 0x3
    field public static final dev.atsushieno.ktmidi.FunctionBlockUiHint INSTANCE;
    field public static final int RECEIVER = 1; // 0x1
    field public static final int SENDER = 2; // 0x2
    field public static final int UNKNOWN = 0; // 0x0
  }

  @Deprecated public final class GeneralMidi {
    ctor @Deprecated public GeneralMidi();
    field @Deprecated public static final dev.atsushieno.ktmidi.GeneralMidi.Companion Companion;
  }

  @Deprecated public static final class GeneralMidi.Companion {
    method @Deprecated public String![] getDRUM_KITS_GM2();
    method @Deprecated public String![] getINSTRUMENT_CATEGORIES();
    method @Deprecated public String![] getINSTRUMENT_NAMES();
    property @Deprecated public final String![] DRUM_KITS_GM2;
    property @Deprecated public final String![] INSTRUMENT_CATEGORIES;
    property @Deprecated public final String![] INSTRUMENT_NAMES;
  }

  @Deprecated public static final class GeneralMidi.Companion.Instruments {
    ctor @Deprecated public GeneralMidi.Companion.Instruments();
    field @Deprecated public static final int ACCORDION = 21; // 0x15
    field @Deprecated public static final int ACOUSTIC_BASS = 32; // 0x20
    field @Deprecated public static final int ACOUSTIC_GRAND_PIANO = 0; // 0x0
    field @Deprecated public static final int ACOUSTIC_GUITAR_NYLON = 24; // 0x18
    field @Deprecated public static final int ACOUSTIC_GUITAR_STEEL = 25; // 0x19
    field @Deprecated public static final int AGOGO = 113; // 0x71
    field @Deprecated public static final int ALTO_SAX = 65; // 0x41
    field @Deprecated public static final int APPLAUSE = 126; // 0x7e
    field @Deprecated public static final int BAGPIPE = 109; // 0x6d
    field @Deprecated public static final int BANJO = 105; // 0x69
    field @Deprecated public static final int BARITONE_SAX = 67; // 0x43
    field @Deprecated public static final int BASSOON = 70; // 0x46
    field @Deprecated public static final int BIRD_TWEET = 123; // 0x7b
    field @Deprecated public static final int BLOWN_BOTTLE = 76; // 0x4c
    field @Deprecated public static final int BRASS_SECTION = 61; // 0x3d
    field @Deprecated public static final int BREATH_NOISE = 121; // 0x79
    field @Deprecated public static final int BRIGHT_ACOUSTIC_PIANO = 1; // 0x1
    field @Deprecated public static final int CELESTA = 8; // 0x8
    field @Deprecated public static final int CELLO = 42; // 0x2a
    field @Deprecated public static final int CHOIR_AAHS = 52; // 0x34
    field @Deprecated public static final int CHURCH_ORGAN = 29; // 0x1d
    field @Deprecated public static final int CLARINET = 71; // 0x47
    field @Deprecated public static final int CLAVI = 7; // 0x7
    field @Deprecated public static final int CONTRABASS = 43; // 0x2b
    field @Deprecated public static final dev.atsushieno.ktmidi.GeneralMidi.Companion.Instruments.Companion Companion;
    field @Deprecated public static final int DISTORTION_GUITAR = 30; // 0x1e
    field @Deprecated public static final int DRAWBAR_ORGAN = 16; // 0x10
    field @Deprecated public static final int DULCIMER = 15; // 0xf
    field @Deprecated public static final int ELECTRIC_BASS_FINGER = 33; // 0x21
    field @Deprecated public static final int ELECTRIC_BASS_PICK = 34; // 0x22
    field @Deprecated public static final int ELECTRIC_GRAND_PIANO = 2; // 0x2
    field @Deprecated public static final int ELECTRIC_GUITAR_CLEAN = 27; // 0x1b
    field @Deprecated public static final int ELECTRIC_GUITAR_JAZZ = 26; // 0x1a
    field @Deprecated public static final int ELECTRIC_GUITAR_MUTED = 28; // 0x1c
    field @Deprecated public static final int ELECTRIC_PIANO_1 = 4; // 0x4
    field @Deprecated public static final int ELECTRIC_PIANO_2 = 5; // 0x5
    field @Deprecated public static final int ENGLISH_HORN = 69; // 0x45
    field @Deprecated public static final int FIDDLE = 110; // 0x6e
    field @Deprecated public static final int FLUTE = 73; // 0x49
    field @Deprecated public static final int FRENCH_HORN = 60; // 0x3c
    field @Deprecated public static final int FRETLESS_BASS = 35; // 0x23
    field @Deprecated public static final int FX_ATMOSPHERE = 99; // 0x63
    field @Deprecated public static final int FX_BRIGHTNESS = 100; // 0x64
    field @Deprecated public static final int FX_CRYSTAL = 98; // 0x62
    field @Deprecated public static final int FX_ECHOES = 102; // 0x66
    field @Deprecated public static final int FX_GOBLINS = 101; // 0x65
    field @Deprecated public static final int FX_RAIN = 96; // 0x60
    field @Deprecated public static final int FX_SCIFI = 103; // 0x67
    field @Deprecated public static final int FX_SOUNDTRACK = 97; // 0x61
    field @Deprecated public static final int GLOCKENSPIEL = 9; // 0x9
    field @Deprecated public static final int GUITARHARMONICS = 31; // 0x1f
    field @Deprecated public static final int GUITAR_FRET_NOISE = 120; // 0x78
    field @Deprecated public static final int GUNSHOT = 127; // 0x7f
    field @Deprecated public static final int HARMONICA = 22; // 0x16
    field @Deprecated public static final int HARPSICHORD = 6; // 0x6
    field @Deprecated public static final int HELICOPTER = 125; // 0x7d
    field @Deprecated public static final int HONKYTONK_PIANO = 3; // 0x3
    field @Deprecated public static final int KALIMBA = 108; // 0x6c
    field @Deprecated public static final int KOTO = 107; // 0x6b
    field @Deprecated public static final int LEAD_BASS_AND_LEAD = 87; // 0x57
    field @Deprecated public static final int LEAD_CALLIOPE = 82; // 0x52
    field @Deprecated public static final int LEAD_CHARANG = 84; // 0x54
    field @Deprecated public static final int LEAD_CHIFF = 83; // 0x53
    field @Deprecated public static final int LEAD_FIFTHS = 86; // 0x56
    field @Deprecated public static final int LEAD_SAWTOOTH = 81; // 0x51
    field @Deprecated public static final int LEAD_SQUARE = 80; // 0x50
    field @Deprecated public static final int LEAD_VOICE = 85; // 0x55
    field @Deprecated public static final int MARIMBA = 12; // 0xc
    field @Deprecated public static final int MELODIC_TOM = 117; // 0x75
    field @Deprecated public static final int MUSIC_BOX = 10; // 0xa
    field @Deprecated public static final int MUTED_TRUMPET = 59; // 0x3b
    field @Deprecated public static final int OBOE = 68; // 0x44
    field @Deprecated public static final int OCARINA = 79; // 0x4f
    field @Deprecated public static final int ORCHESTRAL_HARP = 46; // 0x2e
    field @Deprecated public static final int ORCHESTRA_HIT = 55; // 0x37
    field @Deprecated public static final int OVERDRIVEN_GUITAR = 29; // 0x1d
    field @Deprecated public static final int PAD_BOWED = 92; // 0x5c
    field @Deprecated public static final int PAD_CHOIR = 91; // 0x5b
    field @Deprecated public static final int PAD_HALO = 94; // 0x5e
    field @Deprecated public static final int PAD_METALLIC = 93; // 0x5d
    field @Deprecated public static final int PAD_NEWAGE = 88; // 0x58
    field @Deprecated public static final int PAD_POLYSYNTH = 90; // 0x5a
    field @Deprecated public static final int PAD_SWEEP = 95; // 0x5f
    field @Deprecated public static final int PAD_WARM = 89; // 0x59
    field @Deprecated public static final int PAN_FLUTE = 75; // 0x4b
    field @Deprecated public static final int PERCUSSIVE_ORGAN = 17; // 0x11
    field @Deprecated public static final int PICCOLO = 72; // 0x48
    field @Deprecated public static final int PIZZICATO_STRINGS = 45; // 0x2d
    field @Deprecated public static final int RECORDER = 74; // 0x4a
    field @Deprecated public static final int REED_ORGAN = 20; // 0x14
    field @Deprecated public static final int REVERSE_CYMBAL = 119; // 0x77
    field @Deprecated public static final int ROCK_ORGAN = 18; // 0x12
    field @Deprecated public static final int SEASHORE = 122; // 0x7a
    field @Deprecated public static final int SHAKUHACHI = 77; // 0x4d
    field @Deprecated public static final int SHAMISEN = 106; // 0x6a
    field @Deprecated public static final int SHANAI = 111; // 0x6f
    field @Deprecated public static final int SITAR = 104; // 0x68
    field @Deprecated public static final int SLAP_BASS_1 = 36; // 0x24
    field @Deprecated public static final int SLAP_BASS_2 = 37; // 0x25
    field @Deprecated public static final int SOPRANO_SAX = 64; // 0x40
    field @Deprecated public static final int STEEL_DRUMS = 114; // 0x72
    field @Deprecated public static final int STRING_ENSEMBLE_1 = 48; // 0x30
    field @Deprecated public static final int STRING_ENSEMBLE_2 = 49; // 0x31
    field @Deprecated public static final int SYNTH_BASS_1 = 38; // 0x26
    field @Deprecated public static final int SYNTH_BASS_2 = 39; // 0x27
    field @Deprecated public static final int SYNTH_BRASS_1 = 62; // 0x3e
    field @Deprecated public static final int SYNTH_BRASS_2 = 63; // 0x3f
    field @Deprecated public static final int SYNTH_DRUM = 118; // 0x76
    field @Deprecated public static final int SYNTH_STRINGS_1 = 50; // 0x32
    field @Deprecated public static final int SYNTH_STRINGS_2 = 51; // 0x33
    field @Deprecated public static final int SYNTH_VOICE = 54; // 0x36
    field @Deprecated public static final int TAIKO_DRUM = 116; // 0x74
    field @Deprecated public static final int TANGO_ACCORDION = 23; // 0x17
    field @Deprecated public static final int TELEPHONE_RING = 124; // 0x7c
    field @Deprecated public static final int TENOR_SAX = 66; // 0x42
    field @Deprecated public static final int TIMPANI = 47; // 0x2f
    field @Deprecated public static final int TINKLE_BELL = 112; // 0x70
    field @Deprecated public static final int TREMOLO_STRINGS = 44; // 0x2c
    field @Deprecated public static final int TROMBONE = 57; // 0x39
    field @Deprecated public static final int TRUMPET = 56; // 0x38
    field @Deprecated public static final int TUBA = 58; // 0x3a
    field @Deprecated public static final int TUBULAR_BELLS = 14; // 0xe
    field @Deprecated public static final int VIBRAPHONE = 11; // 0xb
    field @Deprecated public static final int VIOLA = 41; // 0x29
    field @Deprecated public static final int VIOLIN = 40; // 0x28
    field @Deprecated public static final int VOICE_OOHS = 53; // 0x35
    field @Deprecated public static final int WHISTLE = 78; // 0x4e
    field @Deprecated public static final int WOODBLOCK = 115; // 0x73
    field @Deprecated public static final int XYLOPHONE = 13; // 0xd
  }

  @Deprecated public static final class GeneralMidi.Companion.Instruments.Companion {
  }

  @Deprecated public static final class GeneralMidi.Companion.Percussions {
    ctor @Deprecated public GeneralMidi.Companion.Percussions();
    field @Deprecated public static final int ACOUSTIC_BASS_DRUM = 34; // 0x22
    field @Deprecated public static final int ACOUSTIC_SNARE = 37; // 0x25
    field @Deprecated public static final int BASS_DRUM_1 = 35; // 0x23
    field @Deprecated public static final int CABASA = 68; // 0x44
    field @Deprecated public static final int CHINESE_CYMBAL = 51; // 0x33
    field @Deprecated public static final int CLAVES = 74; // 0x4a
    field @Deprecated public static final int CLOSED_HI_HAT = 41; // 0x29
    field @Deprecated public static final int COWBELL = 55; // 0x37
    field @Deprecated public static final int CRASH_CYMBAL_1 = 48; // 0x30
    field @Deprecated public static final int CRASH_CYMBAL_2 = 56; // 0x38
    field @Deprecated public static final dev.atsushieno.ktmidi.GeneralMidi.Companion.Percussions.Companion Companion;
    field @Deprecated public static final int ELECTRIC_SNARE = 39; // 0x27
    field @Deprecated public static final int HAND_CLAP = 38; // 0x26
    field @Deprecated public static final int HIGH_AGOGO = 66; // 0x42
    field @Deprecated public static final int HIGH_FLOOR_TOM = 42; // 0x2a
    field @Deprecated public static final int HIGH_TIMBALE = 64; // 0x40
    field @Deprecated public static final int HIGH_TOM = 49; // 0x31
    field @Deprecated public static final int HI_BONGO = 59; // 0x3b
    field @Deprecated public static final int HI_MID_TOM = 47; // 0x2f
    field @Deprecated public static final int HI_WOOD_BLOCK = 75; // 0x4b
    field @Deprecated public static final int LONG_GUIRO = 73; // 0x49
    field @Deprecated public static final int LONG_WHISTLE = 71; // 0x47
    field @Deprecated public static final int LOW_AGOGO = 67; // 0x43
    field @Deprecated public static final int LOW_BONGO = 60; // 0x3c
    field @Deprecated public static final int LOW_CONGA = 63; // 0x3f
    field @Deprecated public static final int LOW_FLOOR_TOM = 40; // 0x28
    field @Deprecated public static final int LOW_MID_TOM = 46; // 0x2e
    field @Deprecated public static final int LOW_TIMBALE = 65; // 0x41
    field @Deprecated public static final int LOW_TOM = 44; // 0x2c
    field @Deprecated public static final int LOW_WOOD_BLOCK = 76; // 0x4c
    field @Deprecated public static final int MARACAS = 69; // 0x45
    field @Deprecated public static final int MUTE_CUICA = 77; // 0x4d
    field @Deprecated public static final int MUTE_HI_CONGA = 61; // 0x3d
    field @Deprecated public static final int MUTE_TRIANGLE = 79; // 0x4f
    field @Deprecated public static final int OPEN_CUICA = 78; // 0x4e
    field @Deprecated public static final int OPEN_HI_CONGA = 62; // 0x3e
    field @Deprecated public static final int OPEN_HI_HAT = 45; // 0x2d
    field @Deprecated public static final int OPEN_TRIANGLE = 80; // 0x50
    field @Deprecated public static final int PEDAL_HI_HAT = 43; // 0x2b
    field @Deprecated public static final int RIDE_BELL = 52; // 0x34
    field @Deprecated public static final int RIDE_CYMBAL_1 = 50; // 0x32
    field @Deprecated public static final int RIDE_CYMBAL_2 = 58; // 0x3a
    field @Deprecated public static final int SHORT_GUIRO = 72; // 0x48
    field @Deprecated public static final int SHORT_WHISTLE = 70; // 0x46
    field @Deprecated public static final int SIDE_STICK = 36; // 0x24
    field @Deprecated public static final int SPLASH_CYMBAL = 54; // 0x36
    field @Deprecated public static final int TAMBOURINE = 53; // 0x35
    field @Deprecated public static final int VIBRASLAP = 57; // 0x39
  }

  @Deprecated public static final class GeneralMidi.Companion.Percussions.Companion {
  }

  public final class GeneralMidi2 {
    method public String![] getCategories();
    method public String![] getDrumkits();
    method public String![] getInstrumentNames();
    property public final String![] categories;
    property public final String![] drumkits;
    property public final String![] instrumentNames;
    field public static final dev.atsushieno.ktmidi.GeneralMidi2 INSTANCE;
  }

  public static final class GeneralMidi2.Instruments {
    field public static final int ACCORDION = 21; // 0x15
    field public static final int ACOUSTIC_BASS = 32; // 0x20
    field public static final int ACOUSTIC_GRAND_PIANO = 0; // 0x0
    field public static final int ACOUSTIC_GUITAR_NYLON = 24; // 0x18
    field public static final int ACOUSTIC_GUITAR_STEEL = 25; // 0x19
    field public static final int AGOGO = 113; // 0x71
    field public static final int ALTO_SAX = 65; // 0x41
    field public static final int APPLAUSE = 126; // 0x7e
    field public static final int BAGPIPE = 109; // 0x6d
    field public static final int BANJO = 105; // 0x69
    field public static final int BARITONE_SAX = 67; // 0x43
    field public static final int BASSOON = 70; // 0x46
    field public static final int BIRD_TWEET = 123; // 0x7b
    field public static final int BLOWN_BOTTLE = 76; // 0x4c
    field public static final int BRASS_SECTION = 61; // 0x3d
    field public static final int BREATH_NOISE = 121; // 0x79
    field public static final int BRIGHT_ACOUSTIC_PIANO = 1; // 0x1
    field public static final int CELESTA = 8; // 0x8
    field public static final int CELLO = 42; // 0x2a
    field public static final int CHOIR_AAHS = 52; // 0x34
    field public static final int CHURCH_ORGAN = 29; // 0x1d
    field public static final int CLARINET = 71; // 0x47
    field public static final int CLAVI = 7; // 0x7
    field public static final int CONTRABASS = 43; // 0x2b
    field public static final int DISTORTION_GUITAR = 30; // 0x1e
    field public static final int DRAWBAR_ORGAN = 16; // 0x10
    field public static final int DULCIMER = 15; // 0xf
    field public static final int ELECTRIC_BASS_FINGER = 33; // 0x21
    field public static final int ELECTRIC_BASS_PICK = 34; // 0x22
    field public static final int ELECTRIC_GRAND_PIANO = 2; // 0x2
    field public static final int ELECTRIC_GUITAR_CLEAN = 27; // 0x1b
    field public static final int ELECTRIC_GUITAR_JAZZ = 26; // 0x1a
    field public static final int ELECTRIC_GUITAR_MUTED = 28; // 0x1c
    field public static final int ELECTRIC_PIANO_1 = 4; // 0x4
    field public static final int ELECTRIC_PIANO_2 = 5; // 0x5
    field public static final int ENGLISH_HORN = 69; // 0x45
    field public static final int FIDDLE = 110; // 0x6e
    field public static final int FLUTE = 73; // 0x49
    field public static final int FRENCH_HORN = 60; // 0x3c
    field public static final int FRETLESS_BASS = 35; // 0x23
    field public static final int FX_ATMOSPHERE = 99; // 0x63
    field public static final int FX_BRIGHTNESS = 100; // 0x64
    field public static final int FX_CRYSTAL = 98; // 0x62
    field public static final int FX_ECHOES = 102; // 0x66
    field public static final int FX_GOBLINS = 101; // 0x65
    field public static final int FX_RAIN = 96; // 0x60
    field public static final int FX_SCIFI = 103; // 0x67
    field public static final int FX_SOUNDTRACK = 97; // 0x61
    field public static final int GLOCKENSPIEL = 9; // 0x9
    field public static final int GUITARHARMONICS = 31; // 0x1f
    field public static final int GUITAR_FRET_NOISE = 120; // 0x78
    field public static final int GUNSHOT = 127; // 0x7f
    field public static final int HARMONICA = 22; // 0x16
    field public static final int HARPSICHORD = 6; // 0x6
    field public static final int HELICOPTER = 125; // 0x7d
    field public static final int HONKYTONK_PIANO = 3; // 0x3
    field public static final dev.atsushieno.ktmidi.GeneralMidi2.Instruments INSTANCE;
    field public static final int KALIMBA = 108; // 0x6c
    field public static final int KOTO = 107; // 0x6b
    field public static final int LEAD_BASS_AND_LEAD = 87; // 0x57
    field public static final int LEAD_CALLIOPE = 82; // 0x52
    field public static final int LEAD_CHARANG = 84; // 0x54
    field public static final int LEAD_CHIFF = 83; // 0x53
    field public static final int LEAD_FIFTHS = 86; // 0x56
    field public static final int LEAD_SAWTOOTH = 81; // 0x51
    field public static final int LEAD_SQUARE = 80; // 0x50
    field public static final int LEAD_VOICE = 85; // 0x55
    field public static final int MARIMBA = 12; // 0xc
    field public static final int MELODIC_TOM = 117; // 0x75
    field public static final int MUSIC_BOX = 10; // 0xa
    field public static final int MUTED_TRUMPET = 59; // 0x3b
    field public static final int OBOE = 68; // 0x44
    field public static final int OCARINA = 79; // 0x4f
    field public static final int ORCHESTRAL_HARP = 46; // 0x2e
    field public static final int ORCHESTRA_HIT = 55; // 0x37
    field public static final int OVERDRIVEN_GUITAR = 29; // 0x1d
    field public static final int PAD_BOWED = 92; // 0x5c
    field public static final int PAD_CHOIR = 91; // 0x5b
    field public static final int PAD_HALO = 94; // 0x5e
    field public static final int PAD_METALLIC = 93; // 0x5d
    field public static final int PAD_NEWAGE = 88; // 0x58
    field public static final int PAD_POLYSYNTH = 90; // 0x5a
    field public static final int PAD_SWEEP = 95; // 0x5f
    field public static final int PAD_WARM = 89; // 0x59
    field public static final int PAN_FLUTE = 75; // 0x4b
    field public static final int PERCUSSIVE_ORGAN = 17; // 0x11
    field public static final int PICCOLO = 72; // 0x48
    field public static final int PIZZICATO_STRINGS = 45; // 0x2d
    field public static final int RECORDER = 74; // 0x4a
    field public static final int REED_ORGAN = 20; // 0x14
    field public static final int REVERSE_CYMBAL = 119; // 0x77
    field public static final int ROCK_ORGAN = 18; // 0x12
    field public static final int SEASHORE = 122; // 0x7a
    field public static final int SHAKUHACHI = 77; // 0x4d
    field public static final int SHAMISEN = 106; // 0x6a
    field public static final int SHANAI = 111; // 0x6f
    field public static final int SITAR = 104; // 0x68
    field public static final int SLAP_BASS_1 = 36; // 0x24
    field public static final int SLAP_BASS_2 = 37; // 0x25
    field public static final int SOPRANO_SAX = 64; // 0x40
    field public static final int STEEL_DRUMS = 114; // 0x72
    field public static final int STRING_ENSEMBLE_1 = 48; // 0x30
    field public static final int STRING_ENSEMBLE_2 = 49; // 0x31
    field public static final int SYNTH_BASS_1 = 38; // 0x26
    field public static final int SYNTH_BASS_2 = 39; // 0x27
    field public static final int SYNTH_BRASS_1 = 62; // 0x3e
    field public static final int SYNTH_BRASS_2 = 63; // 0x3f
    field public static final int SYNTH_DRUM = 118; // 0x76
    field public static final int SYNTH_STRINGS_1 = 50; // 0x32
    field public static final int SYNTH_STRINGS_2 = 51; // 0x33
    field public static final int SYNTH_VOICE = 54; // 0x36
    field public static final int TAIKO_DRUM = 116; // 0x74
    field public static final int TANGO_ACCORDION = 23; // 0x17
    field public static final int TELEPHONE_RING = 124; // 0x7c
    field public static final int TENOR_SAX = 66; // 0x42
    field public static final int TIMPANI = 47; // 0x2f
    field public static final int TINKLE_BELL = 112; // 0x70
    field public static final int TREMOLO_STRINGS = 44; // 0x2c
    field public static final int TROMBONE = 57; // 0x39
    field public static final int TRUMPET = 56; // 0x38
    field public static final int TUBA = 58; // 0x3a
    field public static final int TUBULAR_BELLS = 14; // 0xe
    field public static final int VIBRAPHONE = 11; // 0xb
    field public static final int VIOLA = 41; // 0x29
    field public static final int VIOLIN = 40; // 0x28
    field public static final int VOICE_OOHS = 53; // 0x35
    field public static final int WHISTLE = 78; // 0x4e
    field public static final int WOODBLOCK = 115; // 0x73
    field public static final int XYLOPHONE = 13; // 0xd
  }

  public static final class GeneralMidi2.Percussions {
    field public static final int ACOUSTIC_BASS_DRUM = 34; // 0x22
    field public static final int ACOUSTIC_SNARE = 37; // 0x25
    field public static final int BASS_DRUM_1 = 35; // 0x23
    field public static final int CABASA = 68; // 0x44
    field public static final int CHINESE_CYMBAL = 51; // 0x33
    field public static final int CLAVES = 74; // 0x4a
    field public static final int CLOSED_HI_HAT = 41; // 0x29
    field public static final int COWBELL = 55; // 0x37
    field public static final int CRASH_CYMBAL_1 = 48; // 0x30
    field public static final int CRASH_CYMBAL_2 = 56; // 0x38
    field public static final int ELECTRIC_SNARE = 39; // 0x27
    field public static final int HAND_CLAP = 38; // 0x26
    field public static final int HIGH_AGOGO = 66; // 0x42
    field public static final int HIGH_FLOOR_TOM = 42; // 0x2a
    field public static final int HIGH_TIMBALE = 64; // 0x40
    field public static final int HIGH_TOM = 49; // 0x31
    field public static final int HI_BONGO = 59; // 0x3b
    field public static final int HI_MID_TOM = 47; // 0x2f
    field public static final int HI_WOOD_BLOCK = 75; // 0x4b
    field public static final dev.atsushieno.ktmidi.GeneralMidi2.Percussions INSTANCE;
    field public static final int LONG_GUIRO = 73; // 0x49
    field public static final int LONG_WHISTLE = 71; // 0x47
    field public static final int LOW_AGOGO = 67; // 0x43
    field public static final int LOW_BONGO = 60; // 0x3c
    field public static final int LOW_CONGA = 63; // 0x3f
    field public static final int LOW_FLOOR_TOM = 40; // 0x28
    field public static final int LOW_MID_TOM = 46; // 0x2e
    field public static final int LOW_TIMBALE = 65; // 0x41
    field public static final int LOW_TOM = 44; // 0x2c
    field public static final int LOW_WOOD_BLOCK = 76; // 0x4c
    field public static final int MARACAS = 69; // 0x45
    field public static final int MUTE_CUICA = 77; // 0x4d
    field public static final int MUTE_HI_CONGA = 61; // 0x3d
    field public static final int MUTE_TRIANGLE = 79; // 0x4f
    field public static final int OPEN_CUICA = 78; // 0x4e
    field public static final int OPEN_HI_CONGA = 62; // 0x3e
    field public static final int OPEN_HI_HAT = 45; // 0x2d
    field public static final int OPEN_TRIANGLE = 80; // 0x50
    field public static final int PEDAL_HI_HAT = 43; // 0x2b
    field public static final int RIDE_BELL = 52; // 0x34
    field public static final int RIDE_CYMBAL_1 = 50; // 0x32
    field public static final int RIDE_CYMBAL_2 = 58; // 0x3a
    field public static final int SHORT_GUIRO = 72; // 0x48
    field public static final int SHORT_WHISTLE = 70; // 0x46
    field public static final int SIDE_STICK = 36; // 0x24
    field public static final int SPLASH_CYMBAL = 54; // 0x36
    field public static final int TAMBOURINE = 53; // 0x35
    field public static final int VIBRASLAP = 57; // 0x39
  }

  public final class JvmMidiAccess extends dev.atsushieno.ktmidi.MidiAccess {
    ctor public JvmMidiAccess();
    method public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method public String getName();
    method public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method public suspend Object? openInput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput>);
    method public suspend Object? openOutput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput>);
    property public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property public String name;
    property public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
  }

  public final class JzzMidiAccess extends dev.atsushieno.ktmidi.MidiAccess {
    method public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method public String getName();
    method public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method public boolean getUseSysex();
    method public suspend Object? openInput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput>);
    method public suspend Object? openOutput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput>);
    property public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property public String name;
    property public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
    property public final boolean useSysex;
    field public static final dev.atsushieno.ktmidi.JzzMidiAccess.Companion Companion;
  }

  public static final class JzzMidiAccess.Companion {
    method public suspend Object? create(boolean useSysex, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.JzzMidiAccess>);
  }

  public final class JzzMidiAccessTest {
    ctor public JzzMidiAccessTest();
    method public error.NonExistentClass! create();
    method public error.NonExistentClass! input();
    method public error.NonExistentClass! output();
  }

  public final class MergedMidiModuleDatabase extends dev.atsushieno.ktmidi.MidiModuleDatabase {
    ctor public MergedMidiModuleDatabase(Iterable<? extends dev.atsushieno.ktmidi.MidiModuleDatabase> sources);
    method public Iterable<dev.atsushieno.ktmidi.MidiModuleDefinition> all();
    method public java.util.List<dev.atsushieno.ktmidi.MidiModuleDatabase> getList();
    method public dev.atsushieno.ktmidi.MidiModuleDefinition resolve(String moduleName);
    property public final java.util.List<dev.atsushieno.ktmidi.MidiModuleDatabase> list;
  }

  public final class MetadataTextStatus {
    field public static final byte ACCOMPANYING_PERFORMER = 10; // 0xa
    field public static final byte ARRANGER = 7; // 0x7
    field public static final byte AUTHOR = 5; // 0x5
    field public static final byte COMPOSITION_NAME = 2; // 0x2
    field public static final byte COPYRIGHT = 4; // 0x4
    field public static final dev.atsushieno.ktmidi.MetadataTextStatus INSTANCE;
    field public static final byte LYRICIST = 6; // 0x6
    field public static final byte MIDI_CLIP_NAME = 3; // 0x3
    field public static final byte PRIMARY_PERFORMER = 9; // 0x9
    field public static final byte PROJECT_NAME = 1; // 0x1
    field public static final byte PUBLISHER = 8; // 0x8
    field public static final byte RECORDING_CONCERT_DATE = 11; // 0xb
    field public static final byte RECORDING_CONCERT_LOCATION = 12; // 0xc
    field public static final byte UNKNOWN = 0; // 0x0
  }

  public final class Midi1CIMessageReporterKt {
    method public static kotlin.sequences.Sequence<java.util.List<java.lang.Byte>> reportMidiMessages(dev.atsushieno.ktmidi.Midi1Machine, byte address, byte messageDataControl, byte midiMessageReportSystemMessages, byte midiMessageReportChannelControllerMessages, byte midiMessageReportNoteDataMessages);
  }

  public final class Midi1CompoundMessage implements dev.atsushieno.ktmidi.Midi1Message {
    ctor public Midi1CompoundMessage(int type, int arg1, int arg2, optional byte[]? extraData, optional int extraOffset, optional int extraLength);
    method public byte[]? getExtraData();
    method public int getExtraDataLength();
    method public int getExtraDataOffset();
    method public int getValue();
    property public final byte[]? extraData;
    property public final int extraDataLength;
    property public final int extraDataOffset;
    property public final int value;
  }

  public final class Midi1ControllerCatalog {
    ctor public Midi1ControllerCatalog(optional boolean[] enabledRpns, optional boolean[] enabledNrpns);
    method public void enableAllNrpnMsbs();
    method public boolean[] getEnabledNrpns();
    method public boolean[] getEnabledRpns();
    property public final boolean[] enabledNrpns;
    property public final boolean[] enabledRpns;
  }

  public final class Midi1Event {
    ctor public Midi1Event(int deltaTime, dev.atsushieno.ktmidi.Midi1Message message);
    method public int getDeltaTime();
    method @Deprecated public dev.atsushieno.ktmidi.Midi1Message getEvent();
    method public dev.atsushieno.ktmidi.Midi1Message getMessage();
    property public final int deltaTime;
    property @Deprecated public final dev.atsushieno.ktmidi.Midi1Message event;
    property public final dev.atsushieno.ktmidi.Midi1Message message;
    field public static final dev.atsushieno.ktmidi.Midi1Event.Companion Companion;
  }

  public static final class Midi1Event.Companion {
    method public kotlin.sequences.Sequence<java.lang.Byte> encode7BitLength(int length);
  }

  public final class Midi1Machine {
    ctor public Midi1Machine();
    method public dev.atsushieno.ktmidi.Midi1MachineChannel![] getChannels();
    method public dev.atsushieno.ktmidi.Midi1ControllerCatalog getControllerCatalog();
    method @Deprecated public java.util.List<dev.atsushieno.ktmidi.Midi1Machine.OnMidi1MessageListener> getEventListeners();
    method public java.util.List<dev.atsushieno.ktmidi.Midi1Machine.OnMidi1MessageListener> getMessageListeners();
    method public dev.atsushieno.ktmidi.Midi1SystemCommon getSystemCommon();
    method public void processMessage(dev.atsushieno.ktmidi.Midi1Message evt);
    method public void setChannels(dev.atsushieno.ktmidi.Midi1MachineChannel![]);
    method public void setSystemCommon(dev.atsushieno.ktmidi.Midi1SystemCommon);
    property public final dev.atsushieno.ktmidi.Midi1MachineChannel![] channels;
    property public final dev.atsushieno.ktmidi.Midi1ControllerCatalog controllerCatalog;
    property @Deprecated public final java.util.List<dev.atsushieno.ktmidi.Midi1Machine.OnMidi1MessageListener> eventListeners;
    property public final java.util.List<dev.atsushieno.ktmidi.Midi1Machine.OnMidi1MessageListener> messageListeners;
    property public final dev.atsushieno.ktmidi.Midi1SystemCommon systemCommon;
  }

  public static fun interface Midi1Machine.OnMidi1MessageListener {
    method public void onMessage(dev.atsushieno.ktmidi.Midi1Message e);
  }

  public final class Midi1MachineChannel {
    ctor public Midi1MachineChannel();
    method public byte getCaf();
    method public byte[] getControls();
    method public int getCurrentNRPN();
    method public int getCurrentRPN();
    method public dev.atsushieno.ktmidi.DteTarget getDteTarget();
    method public Boolean? getMonoPolyMode();
    method public boolean[] getNoteOnStatus();
    method public byte[] getNoteVelocity();
    method public short[] getNrpns();
    method public Boolean? getOmniMode();
    method public byte[] getPafVelocity();
    method public short getPitchbend();
    method public byte getProgram();
    method public short[] getRpns();
    method public void processDte(byte value, boolean isMsb);
    method public void processDteDecrement();
    method public void processDteIncrement();
    method public void setCaf(byte);
    method public void setDteTarget(dev.atsushieno.ktmidi.DteTarget);
    method public void setMonoPolyMode(Boolean?);
    method public void setOmniMode(Boolean?);
    method public void setPitchbend(short);
    method public void setProgram(byte);
    property public final byte caf;
    property public final byte[] controls;
    property public final int currentNRPN;
    property public final int currentRPN;
    property public final dev.atsushieno.ktmidi.DteTarget dteTarget;
    property public final Boolean? monoPolyMode;
    property public final boolean[] noteOnStatus;
    property public final byte[] noteVelocity;
    property public final short[] nrpns;
    property public final Boolean? omniMode;
    property public final byte[] pafVelocity;
    property public final short pitchbend;
    property public final byte program;
    property public final short[] rpns;
  }

  public interface Midi1Message {
    method public default byte getChannel();
    method @Deprecated public default byte getEventType();
    method public default byte getLsb();
    method public default byte getMetaType();
    method public default byte getMsb();
    method public default byte getStatusByte();
    method public default byte getStatusCode();
    method public int getValue();
    property public default byte channel;
    property @Deprecated public default byte eventType;
    property public default byte lsb;
    property public default byte metaType;
    property public default byte msb;
    property public default byte statusByte;
    property public default byte statusCode;
    property public abstract int value;
    field public static final dev.atsushieno.ktmidi.Midi1Message.Companion Companion;
  }

  public static final class Midi1Message.Companion {
    method public kotlin.sequences.Sequence<dev.atsushieno.ktmidi.Midi1Message> convert(byte[] bytes, int index, int size);
    method public byte fixedDataSize(byte statusByte);
  }

  public final class Midi1Music {
    ctor public Midi1Music();
    method public void addTrack(dev.atsushieno.ktmidi.Midi1Track track);
    method public Iterable<dev.atsushieno.ktmidi.Midi1Event> filterEvents(kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.Midi1Event,java.lang.Boolean> filter);
    method public int getDeltaTimeSpec();
    method public byte getFormat();
    method public int getTimePositionInMillisecondsForTick(int ticks);
    method public int getTotalPlayTimeMilliseconds();
    method public int getTotalTicks();
    method public java.util.List<dev.atsushieno.ktmidi.Midi1Track> getTracks();
    method public void setDeltaTimeSpec(int);
    method public void setFormat(byte);
    property public final int deltaTimeSpec;
    property public final byte format;
    property public final java.util.List<dev.atsushieno.ktmidi.Midi1Track> tracks;
    field public static final dev.atsushieno.ktmidi.Midi1Music.Companion Companion;
    field public static final int DEFAULT_TEMPO = 500000; // 0x7a120
  }

  public static final class Midi1Music.Companion {
    method public kotlin.sequences.Sequence<dev.atsushieno.ktmidi.Midi1Event> filterEvents(Iterable<dev.atsushieno.ktmidi.Midi1Event> messages, kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.Midi1Event,java.lang.Boolean> filter);
    method public int getPlayTimeMillisecondsAtTick(Iterable<dev.atsushieno.ktmidi.Midi1Event> messages, int ticks, int deltaTimeSpec);
    method public double getSmfBpm(byte[] data, int offset);
    method public int getSmfTempo(byte[] data, int offset);
    method public double getSmpteDurationInSeconds(int smfDeltaTimeSpec, int ticks, optional int tempo, optional double tempoRatio);
    method public int getSmpteTicksForSeconds(int smfDeltaTimeSpec, double duration, optional int tempo, optional double tempoRatio);
    method public int getSmpteTicksPerSeconds(int smfDeltaTimeSpec);
    method public int getTotalPlayTimeMilliseconds(Iterable<dev.atsushieno.ktmidi.Midi1Event> messages, int deltaTimeSpec);
  }

  public final class Midi1MusicKt {
    method public static dev.atsushieno.ktmidi.Midi1Music mergeTracks(dev.atsushieno.ktmidi.Midi1Music);
    method public static dev.atsushieno.ktmidi.Midi1Music splitTracksByChannel(dev.atsushieno.ktmidi.Midi1Track, byte deltaTimeSpec);
  }

  @kotlin.ExperimentalUnsignedTypes public final class Midi1MusicUnitTest {
    ctor public Midi1MusicUnitTest();
    method public void convert();
    method public void encode7BitLength();
    method public void getFixedSize();
    method public void getSmfBpm();
    method public void getSmpteDurationInSeconds();
    method public void getSmpteTicksForSeconds();
    method public void getSmpteTicksPerSeconds();
    method public void midi1MusicGetPlayTimeMillisecondsAtTick();
    method public void midiEventConvert();
    method public void smfReaderRead();
    method public void smfWriterWrite();
    method public void unsignedOperations();
  }

  public static final class Midi1MusicUnitTest.L {
    ctor public Midi1MusicUnitTest.L();
    field public static final dev.atsushieno.ktmidi.Midi1MusicUnitTest.L.Companion Companion;
  }

  public static final class Midi1MusicUnitTest.L.Companion {
    method public int getD();
    method public int getE();
    method public int getH();
    method public int getK();
    method public int getR();
    method public int getS();
    method public int getT();
    property public final int d;
    property public final int e;
    property public final int h;
    property public final int k;
    property public final int r;
    property public final int s;
    property public final int t;
  }

  public static final class Midi1MusicUnitTest.U {
    ctor public Midi1MusicUnitTest.U();
    field public static final dev.atsushieno.ktmidi.Midi1MusicUnitTest.U.Companion Companion;
  }

  public static final class Midi1MusicUnitTest.U.Companion {
    method public int getM();
    method public int getT();
    property public final int M;
    property public final int T;
  }

  public final class Midi1Player extends dev.atsushieno.ktmidi.MidiPlayer {
    ctor public Midi1Player(dev.atsushieno.ktmidi.Midi1Music music, dev.atsushieno.ktmidi.MidiOutput output, optional dev.atsushieno.ktmidi.MidiPlayerTimer timer, optional boolean shouldDisposeOutput);
    method public void addOnEventListener(dev.atsushieno.ktmidi.OnMidi1EventListener listener);
    method public long getPositionInMilliseconds();
    method public int getTotalPlayTimeMilliseconds();
    method public void removeOnEventListener(dev.atsushieno.ktmidi.OnMidi1EventListener listener);
    method public void seek(int ticks);
    method public void setMutedChannels(Iterable<java.lang.Integer> mutedChannels);
    property public long positionInMilliseconds;
    property public int totalPlayTimeMilliseconds;
    field public static final dev.atsushieno.ktmidi.Midi1Player.Companion Companion;
  }

  public static final class Midi1Player.Companion {
    method public suspend Object? create(dev.atsushieno.ktmidi.Midi1Music music, dev.atsushieno.ktmidi.MidiAccess access, optional dev.atsushieno.ktmidi.MidiPlayerTimer timer, optional kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.Midi1Player>);
  }

  public final class Midi1PlayerTest {
    ctor public Midi1PlayerTest();
    method public void getTimePositionInMillisecondsForTick();
    method public void playSimple();
    method public void playbackCompletedToEnd();
    method public void playbackCompletedToEndAbort();
  }

  public static final class Midi1PlayerTest.AlmostVirtualMidiPlayerTimer extends dev.atsushieno.ktmidi.VirtualMidiPlayerTimer {
    ctor public Midi1PlayerTest.AlmostVirtualMidiPlayerTimer();
  }

  public final class Midi1ReaderWriterKt {
    method public static void read(dev.atsushieno.ktmidi.Midi1Music, java.util.List<java.lang.Byte> stream);
    method public static void write(dev.atsushieno.ktmidi.Midi1Music, java.util.List<java.lang.Byte> stream, optional kotlin.jvm.functions.Function3<? super java.lang.Boolean,? super dev.atsushieno.ktmidi.Midi1Event,? super java.util.List<java.lang.Byte>,java.lang.Integer> metaEventWriter, optional boolean disableRunningStatus);
  }

  public final class Midi1SimpleMessage implements dev.atsushieno.ktmidi.Midi1Message {
    ctor public Midi1SimpleMessage(int value);
    ctor public Midi1SimpleMessage(int type, int arg1, int arg2);
    method public int component1();
    method public dev.atsushieno.ktmidi.Midi1SimpleMessage copy(int value);
    method public int getValue();
    property public int value;
  }

  public final class Midi1Status {
    field public static final dev.atsushieno.ktmidi.Midi1Status INSTANCE;
    field public static final int META = 255; // 0xff
    field public static final int SYSEX = 240; // 0xf0
    field public static final int SYSEX_END = 247; // 0xf7
  }

  public final class Midi1SystemCommon {
    ctor public Midi1SystemCommon();
    method public byte getMtcQuarterFrame();
    method public short getSongPositionPointer();
    method public byte getSongSelect();
    method public void setMtcQuarterFrame(byte);
    method public void setSongPositionPointer(short);
    method public void setSongSelect(byte);
    property public final byte mtcQuarterFrame;
    property public final short songPositionPointer;
    property public final byte songSelect;
  }

  public final class Midi1ToUmpTranslatorContext {
    ctor public Midi1ToUmpTranslatorContext(java.util.List<java.lang.Byte> midi1, optional boolean allowReorderedDTE, optional int midiProtocol, int group, optional boolean useSysex8, optional boolean isMidi1Smf);
    method public boolean getAllowReorderedDTE();
    method public int getBankState();
    method public int getDteState();
    method public int getGroup();
    method public java.util.List<java.lang.Byte> getMidi1();
    method public int getMidi1Pos();
    method public int getMidiProtocol();
    method public int getNrpnState();
    method public java.util.List<dev.atsushieno.ktmidi.Ump> getOutput();
    method public int getRpnState();
    method public int getTempo();
    method public boolean getUseSysex8();
    method public boolean isMidi1Smf();
    method public void setBankState(int);
    method public void setDteState(int);
    method public void setMidi1Pos(int);
    method public void setNrpnState(int);
    method public void setRpnState(int);
    method public void setTempo(int);
    property public final boolean allowReorderedDTE;
    property public final int bankState;
    property public final int dteState;
    property public final int group;
    property public final boolean isMidi1Smf;
    property public final java.util.List<java.lang.Byte> midi1;
    property public final int midi1Pos;
    property public final int midiProtocol;
    property public final int nrpnState;
    property public final java.util.List<dev.atsushieno.ktmidi.Ump> output;
    property public final int rpnState;
    property public final int tempo;
    property public final boolean useSysex8;
  }

  public final class Midi1Track {
    ctor public Midi1Track(optional java.util.List<dev.atsushieno.ktmidi.Midi1Event> events);
    method public java.util.List<dev.atsushieno.ktmidi.Midi1Event> getEvents();
    method @Deprecated public java.util.List<dev.atsushieno.ktmidi.Midi1Event> getMessages();
    property public final java.util.List<dev.atsushieno.ktmidi.Midi1Event> events;
    property @Deprecated public final java.util.List<dev.atsushieno.ktmidi.Midi1Event> messages;
  }

  public class Midi1TrackSplitter {
    ctor public Midi1TrackSplitter(java.util.List<dev.atsushieno.ktmidi.Midi1Event> source, byte deltaTimeSpec);
    method public int getTrackId(dev.atsushieno.ktmidi.Midi1Event e);
    method public final dev.atsushieno.ktmidi.Midi1Music split();
    field public static final dev.atsushieno.ktmidi.Midi1TrackSplitter.Companion Companion;
  }

  public static final class Midi1TrackSplitter.Companion {
    method public dev.atsushieno.ktmidi.Midi1Music split(java.util.List<dev.atsushieno.ktmidi.Midi1Event> source, byte deltaTimeSpec);
  }

  public final class Midi1WriterExtension {
    method public kotlin.jvm.functions.Function3<java.lang.Boolean,dev.atsushieno.ktmidi.Midi1Event,java.util.List<java.lang.Byte>,java.lang.Integer> getDefaultMetaEventWriter();
    property public final kotlin.jvm.functions.Function3<java.lang.Boolean,dev.atsushieno.ktmidi.Midi1Event,java.util.List<java.lang.Byte>,java.lang.Integer> defaultMetaEventWriter;
    field public static final dev.atsushieno.ktmidi.Midi1WriterExtension INSTANCE;
  }

  public final class Midi2BinaryChunkFormat {
    field public static final int COMPLETE_PACKET = 0; // 0x0
    field public static final int CONTINUE = 2; // 0x2
    field public static final int END = 3; // 0x3
    field public static final dev.atsushieno.ktmidi.Midi2BinaryChunkFormat INSTANCE;
    field public static final int START = 1; // 0x1
  }

  public final class Midi2BinaryChunkStatus {
    field public static final int COMPLETE_PACKET = 0; // 0x0
    field public static final int CONTINUE = 32; // 0x20
    field public static final int END = 48; // 0x30
    field public static final dev.atsushieno.ktmidi.Midi2BinaryChunkStatus INSTANCE;
    field public static final int MDS_HEADER = 128; // 0x80
    field public static final int MDS_PAYLOAD = 144; // 0x90
    field public static final int START = 16; // 0x10
    field @Deprecated public static final int SYSEX_CONTINUE = 32; // 0x20
    field @Deprecated public static final int SYSEX_END = 48; // 0x30
    field @Deprecated public static final int SYSEX_IN_ONE_UMP = 0; // 0x0
    field @Deprecated public static final int SYSEX_START = 16; // 0x10
  }

  public final class Midi2Machine {
    ctor public Midi2Machine();
    method @Deprecated public void addListener(dev.atsushieno.ktmidi.Midi2Machine.Listener listener);
    method public dev.atsushieno.ktmidi.Midi2MachineChannel channel(int index);
    method public kotlin.jvm.functions.Function2<java.lang.String,dev.atsushieno.ktmidi.Ump,kotlin.Unit> getDiagnosticsHandler();
    method public java.util.List<dev.atsushieno.ktmidi.Midi2Machine.Listener> getEventListeners();
    method public dev.atsushieno.ktmidi.Midi1SystemCommon getSystemCommon();
    method public Iterable<dev.atsushieno.ktmidi.Midi2MachineChannel> getUsedChannels();
    method public void processEvent(dev.atsushieno.ktmidi.Ump evt);
    method @Deprecated public void removeListener(dev.atsushieno.ktmidi.Midi2Machine.Listener listener);
    method public void setDiagnosticsHandler(kotlin.jvm.functions.Function2<? super java.lang.String,? super dev.atsushieno.ktmidi.Ump,kotlin.Unit>);
    method public void setSystemCommon(dev.atsushieno.ktmidi.Midi1SystemCommon);
    property public final kotlin.jvm.functions.Function2<java.lang.String,dev.atsushieno.ktmidi.Ump,kotlin.Unit> diagnosticsHandler;
    property public final java.util.List<dev.atsushieno.ktmidi.Midi2Machine.Listener> eventListeners;
    property public final dev.atsushieno.ktmidi.Midi1SystemCommon systemCommon;
    property public final Iterable<dev.atsushieno.ktmidi.Midi2MachineChannel> usedChannels;
  }

  public static fun interface Midi2Machine.Listener {
    method public void onEvent(dev.atsushieno.ktmidi.Ump e);
  }

  public final class Midi2MachineChannel {
    ctor public Midi2MachineChannel();
    method public int getCaf();
    method public kotlin.UInt![] getControls();
    method public dev.atsushieno.ktmidi.DteTarget getDteTarget();
    method public Boolean? getMonoPolyMode();
    method public kotlin.UShort![] getNoteAttribute();
    method public kotlin.UShort![] getNoteAttributeType();
    method public Boolean![] getNoteOnStatus();
    method public kotlin.UShort![] getNoteVelocity();
    method public kotlin.UInt![] getNrpns();
    method public Boolean? getOmniMode();
    method public kotlin.UInt![] getPafVelocity();
    method public kotlin.UInt![]![] getPerNoteACC();
    method public kotlin.UInt![] getPerNotePitchbend();
    method public kotlin.UInt![]![] getPerNoteRCC();
    method public int getPitchbend();
    method public byte getProgram();
    method public kotlin.UInt![] getRpns();
    method public void processMidi1Dte(byte value, boolean isMsb);
    method public void processMidi1DteDecrement();
    method public void processMidi1DteIncrement();
    method public void setCaf(int);
    method public void setDteTarget(dev.atsushieno.ktmidi.DteTarget);
    method public void setMonoPolyMode(Boolean?);
    method public void setOmniMode(Boolean?);
    method public void setPitchbend(int);
    method public void setProgram(byte);
    property public final int caf;
    property public final kotlin.UInt![] controls;
    property public final dev.atsushieno.ktmidi.DteTarget dteTarget;
    property public final Boolean? monoPolyMode;
    property public final kotlin.UShort![] noteAttribute;
    property public final kotlin.UShort![] noteAttributeType;
    property public final Boolean![] noteOnStatus;
    property public final kotlin.UShort![] noteVelocity;
    property public final kotlin.UInt![] nrpns;
    property public final Boolean? omniMode;
    property public final kotlin.UInt![] pafVelocity;
    property public final kotlin.UInt![]![] perNoteACC;
    property public final kotlin.UInt![] perNotePitchbend;
    property public final kotlin.UInt![]![] perNoteRCC;
    property public final int pitchbend;
    property public final byte program;
    property public final kotlin.UInt![] rpns;
  }

  public final class Midi2Music {
    ctor public Midi2Music();
    method public void addTrack(dev.atsushieno.ktmidi.Midi2Track track);
    method public Iterable<dev.atsushieno.ktmidi.Timed<dev.atsushieno.ktmidi.Ump>> filterEvents(kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.Ump,java.lang.Boolean> filter);
    method public int getDeltaTimeSpec();
    method @Deprecated public int getFormat();
    method public int getTimePositionInMillisecondsForTick(int ticks);
    method public int getTotalPlayTimeMilliseconds();
    method public int getTotalTicks();
    method public java.util.List<dev.atsushieno.ktmidi.Midi2Track> getTracks();
    method public boolean isSingleTrack();
    method public void setDeltaTimeSpec(int);
    method @Deprecated public void setFormat(int);
    property public final int deltaTimeSpec;
    property @Deprecated public final int format;
    property public final boolean isSingleTrack;
    property public final java.util.List<dev.atsushieno.ktmidi.Midi2Track> tracks;
    field public static final dev.atsushieno.ktmidi.Midi2Music.Companion Companion;
  }

  public static final class Midi2Music.Companion {
    method public kotlin.sequences.Sequence<dev.atsushieno.ktmidi.Timed<dev.atsushieno.ktmidi.Ump>> filterEvents(Iterable<dev.atsushieno.ktmidi.Ump> messages, kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.Ump,java.lang.Boolean> filter);
    method @Deprecated public int getMetaEventType(dev.atsushieno.ktmidi.Ump message);
    method public int getPlayTimeMillisecondsAtTick(Iterable<dev.atsushieno.ktmidi.Ump> messages, int ticks, int deltaTimeSpec);
    method public int getTempoValue(dev.atsushieno.ktmidi.Ump message);
    method public int getTotalPlayTimeMilliseconds(Iterable<dev.atsushieno.ktmidi.Ump> messages, int deltaTimeSpec);
    method @Deprecated public boolean isMetaEventMessage(dev.atsushieno.ktmidi.Ump message, int metaType);
    method public boolean isMetaEventMessageStarter(dev.atsushieno.ktmidi.Ump message);
    method public boolean isTempoMessage(dev.atsushieno.ktmidi.Ump message);
  }

  public final class Midi2MusicKt {
    method @Deprecated public static dev.atsushieno.ktmidi.Midi2Music convertDeltaTimesToJRTimestamps(dev.atsushieno.ktmidi.Midi2Music);
    method public static dev.atsushieno.ktmidi.Midi2Music mergeTracks(dev.atsushieno.ktmidi.Midi2Music);
    method public static dev.atsushieno.ktmidi.Midi2Music splitTracksByChannel(dev.atsushieno.ktmidi.Midi2Track);
  }

  public final class Midi2MusicTest {
    ctor public Midi2MusicTest();
    method public void readWriteMusic();
    method public void writeSysex8();
  }

  public final class Midi2MusicTestKt {
    method public static java.util.List<java.lang.Byte> getMusicFileIdentifier();
    method public static java.util.List<java.lang.Byte> getMusicTrackIdentifier();
    property public static final java.util.List<java.lang.Byte> musicFileIdentifier;
    property public static final java.util.List<java.lang.Byte> musicTrackIdentifier;
  }

  public final class Midi2Player extends dev.atsushieno.ktmidi.MidiPlayer {
    ctor public Midi2Player(dev.atsushieno.ktmidi.Midi2Music music, dev.atsushieno.ktmidi.MidiOutput output, optional dev.atsushieno.ktmidi.MidiPlayerTimer timer, optional boolean shouldDisposeOutput);
    method public void addOnMessageListener(dev.atsushieno.ktmidi.OnMidi2EventListener listener);
    method public long getPositionInMilliseconds();
    method public int getTotalPlayTimeMilliseconds();
    method public void removeOnMessageListener(dev.atsushieno.ktmidi.OnMidi2EventListener listener);
    method public void seek(int ticks);
    method public void setMutedChannels(Iterable<java.lang.Integer> mutedChannels);
    property public long positionInMilliseconds;
    property public int totalPlayTimeMilliseconds;
    field public static final dev.atsushieno.ktmidi.Midi2Player.Companion Companion;
  }

  public static final class Midi2Player.Companion {
    method public suspend Object? create(dev.atsushieno.ktmidi.Midi2Music music, dev.atsushieno.ktmidi.MidiAccess access, optional dev.atsushieno.ktmidi.MidiPlayerTimer timer, optional kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.Midi2Player>);
  }

  public final class Midi2ReaderWriterKt {
    method @Deprecated public static void read(dev.atsushieno.ktmidi.Midi2Music, java.util.List<java.lang.Byte> stream);
    method public static void read(dev.atsushieno.ktmidi.Midi2Music, java.util.List<java.lang.Byte> stream, optional boolean removeEmptyDeltaClockstamps);
    method public static void write(dev.atsushieno.ktmidi.Midi2Music, java.util.List<java.lang.Byte> stream);
  }

  public final class Midi2Track {
    ctor public Midi2Track(optional java.util.List<dev.atsushieno.ktmidi.Ump> messages);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> getMessages();
    property public final java.util.List<dev.atsushieno.ktmidi.Ump> messages;
  }

  public class Midi2TrackSplitter {
    ctor public Midi2TrackSplitter(java.util.List<dev.atsushieno.ktmidi.Ump> source);
    method public int getTrackId(dev.atsushieno.ktmidi.Ump e);
    method public final dev.atsushieno.ktmidi.Midi2Music split();
    field public static final dev.atsushieno.ktmidi.Midi2TrackSplitter.Companion Companion;
  }

  public static final class Midi2TrackSplitter.Companion {
    method public dev.atsushieno.ktmidi.Midi2Music split(java.util.List<dev.atsushieno.ktmidi.Ump> source);
  }

  public abstract class MidiAccess {
    ctor public MidiAccess();
    method public suspend Object? createVirtualInputSender(dev.atsushieno.ktmidi.PortCreatorContext context, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput>);
    method public suspend Object? createVirtualOutputReceiver(dev.atsushieno.ktmidi.PortCreatorContext context, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput>);
    method public boolean getCanCreateVirtualPort();
    method public boolean getCanDetectStateChanges();
    method public abstract Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method public abstract String getName();
    method public abstract Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method public final kotlin.jvm.functions.Function1<dev.atsushieno.ktmidi.MidiPortDetails,kotlin.Unit> getStateChanged();
    method public abstract suspend Object? openInput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput>);
    method public abstract suspend Object? openOutput(String portId, kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput>);
    method public final void setStateChanged(kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.MidiPortDetails,kotlin.Unit>);
    property public boolean canCreateVirtualPort;
    property public boolean canDetectStateChanges;
    property public abstract Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property public abstract String name;
    property public abstract Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
    property public final kotlin.jvm.functions.Function1<dev.atsushieno.ktmidi.MidiPortDetails,kotlin.Unit> stateChanged;
  }

  public final class MidiAccessKt {
    method public static dev.atsushieno.ktmidi.EmptyMidiAccess getEmptyMidiAccess();
    property public static final dev.atsushieno.ktmidi.EmptyMidiAccess emptyMidiAccess;
  }

  public final class MidiBankDefinition {
    ctor public MidiBankDefinition();
    method public int getLsb();
    method public int getMsb();
    method public String? getName();
    method public void setLsb(int);
    method public void setMsb(int);
    method public void setName(String?);
    property public final int lsb;
    property public final int msb;
    property public final String? name;
  }

  public final class MidiCC {
    field public static final int ALL_NOTES_OFF = 123; // 0x7b
    field public static final int ALL_SOUND_OFF = 120; // 0x78
    field public static final int BALANCE = 8; // 0x8
    field public static final int BALANCE_LSB = 40; // 0x28
    field public static final int BANK_SELECT = 0; // 0x0
    field public static final int BANK_SELECT_LSB = 32; // 0x20
    field public static final int BREATH = 2; // 0x2
    field public static final int BREATH_LSB = 34; // 0x22
    field public static final int CELESTE = 94; // 0x5e
    field public static final int CSD = 93; // 0x5d
    field public static final int DTE_DECREMENT = 97; // 0x61
    field public static final int DTE_INCREMENT = 96; // 0x60
    field public static final int DTE_LSB = 38; // 0x26
    field public static final int DTE_MSB = 6; // 0x6
    field public static final int EFFECT_1 = 91; // 0x5b
    field public static final int EFFECT_1_LSB = 44; // 0x2c
    field public static final int EFFECT_2 = 92; // 0x5c
    field public static final int EFFECT_2_LSB = 45; // 0x2d
    field public static final int EFFECT_3 = 93; // 0x5d
    field public static final int EFFECT_4 = 94; // 0x5e
    field public static final int EFFECT_5 = 95; // 0x5f
    field public static final int EFFECT_CONTROL_1 = 12; // 0xc
    field public static final int EFFECT_CONTROL_2 = 13; // 0xd
    field public static final int EXPRESSION = 11; // 0xb
    field public static final int EXPRESSION_LSB = 43; // 0x2b
    field public static final int FOOT = 4; // 0x4
    field public static final int FOOT_LSB = 36; // 0x24
    field public static final int GENERAL_1 = 16; // 0x10
    field public static final int GENERAL_1_LSB = 48; // 0x30
    field public static final int GENERAL_2 = 17; // 0x11
    field public static final int GENERAL_2_LSB = 49; // 0x31
    field public static final int GENERAL_3 = 18; // 0x12
    field public static final int GENERAL_3_LSB = 50; // 0x32
    field public static final int GENERAL_4 = 19; // 0x13
    field public static final int GENERAL_4_LSB = 51; // 0x33
    field public static final int GENERAL_5 = 80; // 0x50
    field public static final int GENERAL_6 = 81; // 0x51
    field public static final int GENERAL_7 = 82; // 0x52
    field public static final int GENERAL_8 = 83; // 0x53
    field public static final int HOLD = 64; // 0x40
    field public static final int HOLD_2 = 69; // 0x45
    field public static final dev.atsushieno.ktmidi.MidiCC INSTANCE;
    field public static final int LEGATO = 68; // 0x44
    field public static final int LOCAL_CONTROL = 122; // 0x7a
    field public static final int MODULATION = 1; // 0x1
    field public static final int MODULATION_LSB = 33; // 0x21
    field public static final int MONO_MODE_ON = 126; // 0x7e
    field public static final int NRPN_LSB = 98; // 0x62
    field public static final int NRPN_MSB = 99; // 0x63
    field public static final int OMNI_MODE_OFF = 124; // 0x7c
    field public static final int OMNI_MODE_ON = 125; // 0x7d
    field public static final int PAN = 10; // 0xa
    field public static final int PAN_LSB = 42; // 0x2a
    field public static final int PHASER = 95; // 0x5f
    field @Deprecated public static final int POLY_MODE_OFF = 126; // 0x7e
    field public static final int POLY_MODE_ON = 127; // 0x7f
    field public static final int PORTAMENTO_CONTROL = 84; // 0x54
    field public static final int PORTAMENTO_SWITCH = 65; // 0x41
    field public static final int PORTAMENTO_TIME = 5; // 0x5
    field public static final int PORTAMENTO_TIME_LSB = 37; // 0x25
    field public static final int RESET_ALL_CONTROLLERS = 121; // 0x79
    field public static final int RPN_LSB = 100; // 0x64
    field public static final int RPN_MSB = 101; // 0x65
    field public static final int RSD = 91; // 0x5b
    field public static final int SOFT_PEDAL = 67; // 0x43
    field public static final int SOSTENUTO = 66; // 0x42
    field public static final int SOUND_CONTROLLER_1 = 70; // 0x46
    field public static final int SOUND_CONTROLLER_10 = 79; // 0x4f
    field public static final int SOUND_CONTROLLER_2 = 71; // 0x47
    field public static final int SOUND_CONTROLLER_3 = 72; // 0x48
    field public static final int SOUND_CONTROLLER_4 = 73; // 0x49
    field public static final int SOUND_CONTROLLER_5 = 74; // 0x4a
    field public static final int SOUND_CONTROLLER_6 = 75; // 0x4b
    field public static final int SOUND_CONTROLLER_7 = 76; // 0x4c
    field public static final int SOUND_CONTROLLER_8 = 77; // 0x4d
    field public static final int SOUND_CONTROLLER_9 = 78; // 0x4e
    field public static final int TREMOLO = 92; // 0x5c
    field public static final int VOLUME = 7; // 0x7
    field public static final int VOLUME_LSB = 39; // 0x27
  }

  public final class MidiCIProtocolBytes {
    field public static final int EXTENSIONS = 2; // 0x2
    field public static final dev.atsushieno.ktmidi.MidiCIProtocolBytes INSTANCE;
    field public static final int TYPE = 0; // 0x0
    field public static final int VERSION = 1; // 0x1
  }

  public final class MidiCIProtocolExtensions {
    field public static final dev.atsushieno.ktmidi.MidiCIProtocolExtensions INSTANCE;
    field public static final int JITTER = 1; // 0x1
    field public static final int LARGER = 2; // 0x2
  }

  public final class MidiCIProtocolType {
    field public static final dev.atsushieno.ktmidi.MidiCIProtocolType INSTANCE;
    field @Deprecated public static final int MIDI1 = 1; // 0x1
    field @Deprecated public static final int MIDI2 = 2; // 0x2
  }

  public final class MidiCIProtocolValue {
    field public static final dev.atsushieno.ktmidi.MidiCIProtocolValue INSTANCE;
    field public static final int MIDI1 = 0; // 0x0
    field public static final int MIDI2_V1 = 0; // 0x0
  }

  public final class MidiChannelStatus {
    field public static final int CAF = 208; // 0xd0
    field public static final int CC = 176; // 0xb0
    field public static final dev.atsushieno.ktmidi.MidiChannelStatus INSTANCE;
    field public static final int NOTE_OFF = 128; // 0x80
    field public static final int NOTE_ON = 144; // 0x90
    field public static final int NRPN = 48; // 0x30
    field public static final int PAF = 160; // 0xa0
    field public static final int PER_NOTE_ACC = 16; // 0x10
    field public static final int PER_NOTE_MANAGEMENT = 240; // 0xf0
    field public static final int PER_NOTE_PITCH_BEND = 96; // 0x60
    field public static final int PER_NOTE_RCC = 0; // 0x0
    field public static final int PITCH_BEND = 224; // 0xe0
    field public static final int PROGRAM = 192; // 0xc0
    field public static final int RELATIVE_NRPN = 80; // 0x50
    field public static final int RELATIVE_RPN = 64; // 0x40
    field public static final int RPN = 32; // 0x20
  }

  @Deprecated public final class MidiEvent {
    ctor @Deprecated public MidiEvent(int value);
    ctor @Deprecated public MidiEvent(int type, int arg1, int arg2, optional byte[]? extraData, optional int extraOffset, optional int extraLength);
    method @Deprecated public byte getChannel();
    method @Deprecated public byte getEventType();
    method @Deprecated public byte[]? getExtraData();
    method @Deprecated public int getExtraDataLength();
    method @Deprecated public int getExtraDataOffset();
    method @Deprecated public byte getLsb();
    method @Deprecated public byte getMetaType();
    method @Deprecated public byte getMsb();
    method @Deprecated public byte getStatusByte();
    method @Deprecated public int getValue();
    method @Deprecated public void setValue(int);
    property @Deprecated public final byte channel;
    property @Deprecated public final byte eventType;
    property @Deprecated public final byte[]? extraData;
    property @Deprecated public final int extraDataLength;
    property @Deprecated public final int extraDataOffset;
    property @Deprecated public final byte lsb;
    property @Deprecated public final byte metaType;
    property @Deprecated public final byte msb;
    property @Deprecated public final byte statusByte;
    property @Deprecated public final int value;
    field @Deprecated public static final dev.atsushieno.ktmidi.MidiEvent.Companion Companion;
  }

  @Deprecated public static final class MidiEvent.Companion {
    method @Deprecated public kotlin.sequences.Sequence<dev.atsushieno.ktmidi.MidiEvent> convert(byte[] bytes, int index, int size);
    method @Deprecated public byte fixedDataSize(byte statusByte);
  }

  @Deprecated public final class MidiEventType {
    field @Deprecated public static final byte CAF = -48; // 0xffffffd0
    field @Deprecated public static final byte CC = -80; // 0xffffffb0
    field @Deprecated public static final dev.atsushieno.ktmidi.MidiEventType INSTANCE;
    field @Deprecated public static final byte NOTE_OFF = -128; // 0xffffff80
    field @Deprecated public static final byte NOTE_ON = -112; // 0xffffff90
    field @Deprecated public static final byte PAF = -96; // 0xffffffa0
    field @Deprecated public static final byte PITCH = -32; // 0xffffffe0
    field @Deprecated public static final byte PROGRAM = -64; // 0xffffffc0
  }

  public interface MidiInput extends dev.atsushieno.ktmidi.MidiPort {
    method public void setMessageReceivedListener(dev.atsushieno.ktmidi.OnMidiReceivedEventListener listener);
  }

  public final class MidiInstrumentDefinition {
    ctor public MidiInstrumentDefinition();
    method public java.util.ArrayList<dev.atsushieno.ktmidi.MidiInstrumentMap> getDrumMaps();
    method public java.util.ArrayList<dev.atsushieno.ktmidi.MidiInstrumentMap> getMaps();
    method public void setDrumMaps(java.util.ArrayList<dev.atsushieno.ktmidi.MidiInstrumentMap>);
    method public void setMaps(java.util.ArrayList<dev.atsushieno.ktmidi.MidiInstrumentMap>);
    property public final java.util.ArrayList<dev.atsushieno.ktmidi.MidiInstrumentMap> drumMaps;
    property public final java.util.ArrayList<dev.atsushieno.ktmidi.MidiInstrumentMap> maps;
  }

  public final class MidiInstrumentMap {
    ctor public MidiInstrumentMap();
    method public String? getName();
    method public java.util.ArrayList<dev.atsushieno.ktmidi.MidiProgramDefinition> getPrograms();
    method public void setName(String?);
    method public void setPrograms(java.util.ArrayList<dev.atsushieno.ktmidi.MidiProgramDefinition>);
    property public final String? name;
    property public final java.util.ArrayList<dev.atsushieno.ktmidi.MidiProgramDefinition> programs;
  }

  @Deprecated public final class MidiMachine {
    ctor @Deprecated public MidiMachine();
    method @Deprecated public void addOnEventReceivedListener(dev.atsushieno.ktmidi.OnMidiEventListener listener);
    method @Deprecated public dev.atsushieno.ktmidi.MidiMachineChannel![] getChannels();
    method @Deprecated public void processEvent(dev.atsushieno.ktmidi.MidiEvent evt);
    method @Deprecated public void removeOnEventReceivedListener(dev.atsushieno.ktmidi.OnMidiEventListener listener);
    method @Deprecated public void setChannels(dev.atsushieno.ktmidi.MidiMachineChannel![]);
    property @Deprecated public final dev.atsushieno.ktmidi.MidiMachineChannel![] channels;
  }

  public final class MidiMachineChannel {
    ctor public MidiMachineChannel();
    method public byte getCaf();
    method public byte[] getControls();
    method public dev.atsushieno.ktmidi.DteTarget getDteTarget();
    method public byte[] getNoteVelocity();
    method public short[] getNrpns();
    method public byte[] getPafVelocity();
    method public short getPitchbend();
    method public byte getProgram();
    method public short getRpnTarget();
    method public short[] getRpns();
    method public void processDte(byte value, boolean isMsb);
    method public void processDteDecrement();
    method public void processDteIncrement();
    method public void setCaf(byte);
    method public void setDteTarget(dev.atsushieno.ktmidi.DteTarget);
    method public void setPitchbend(short);
    method public void setProgram(byte);
    property public final byte caf;
    property public final byte[] controls;
    property public final dev.atsushieno.ktmidi.DteTarget dteTarget;
    property public final byte[] noteVelocity;
    property public final short[] nrpns;
    property public final byte[] pafVelocity;
    property public final short pitchbend;
    property public final byte program;
    property public final short rpnTarget;
    property public final short[] rpns;
  }

  @Deprecated public final class MidiMessage {
    ctor @Deprecated public MidiMessage(int deltaTime, dev.atsushieno.ktmidi.MidiEvent evt);
    method @Deprecated public int getDeltaTime();
    method @Deprecated public dev.atsushieno.ktmidi.MidiEvent getEvent();
    property @Deprecated public final int deltaTime;
    property @Deprecated public final dev.atsushieno.ktmidi.MidiEvent event;
    field @Deprecated public static final dev.atsushieno.ktmidi.MidiMessage.Companion Companion;
  }

  @Deprecated public static final class MidiMessage.Companion {
    method @Deprecated public kotlin.sequences.Sequence<java.lang.Byte> encode7BitLength(int length);
  }

  public final class MidiMessageType {
    field public static final int FLEX_DATA = 13; // 0xd
    field public static final dev.atsushieno.ktmidi.MidiMessageType INSTANCE;
    field public static final int MIDI1 = 2; // 0x2
    field public static final int MIDI2 = 4; // 0x4
    field public static final int SYSEX7 = 3; // 0x3
    field public static final int SYSEX8_MDS = 5; // 0x5
    field public static final int SYSTEM = 1; // 0x1
    field public static final int UMP_STREAM = 15; // 0xf
    field public static final int UTILITY = 0; // 0x0
  }

  public final class MidiMetaType {
    field public static final int CHANNEL_PREFIX = 32; // 0x20
    field public static final int COPYRIGHT = 2; // 0x2
    field public static final int CUE = 7; // 0x7
    field public static final int END_OF_TRACK = 47; // 0x2f
    field public static final dev.atsushieno.ktmidi.MidiMetaType INSTANCE;
    field public static final int INSTRUMENT_NAME = 4; // 0x4
    field public static final int KEY_SIGNATURE = 89; // 0x59
    field public static final int LYRIC = 5; // 0x5
    field public static final int MARKER = 6; // 0x6
    field public static final int SEQUENCER_SPECIFIC = 127; // 0x7f
    field public static final int SEQUENCE_NUMBER = 0; // 0x0
    field public static final int SMTPE_OFFSET = 84; // 0x54
    field public static final int TEMPO = 81; // 0x51
    field public static final int TEXT = 1; // 0x1
    field public static final int TIME_SIGNATURE = 88; // 0x58
    field public static final int TRACK_NAME = 3; // 0x3
  }

  public abstract class MidiModuleDatabase {
    ctor public MidiModuleDatabase();
    method public abstract Iterable<dev.atsushieno.ktmidi.MidiModuleDefinition> all();
    method public abstract dev.atsushieno.ktmidi.MidiModuleDefinition resolve(String moduleName);
  }

  public final class MidiModuleDatabase_jvmKt {
    method public static dev.atsushieno.ktmidi.DefaultMidiModuleDatabase getDefaultMidiModuleDatabase();
    property public static final dev.atsushieno.ktmidi.DefaultMidiModuleDatabase defaultMidiModuleDatabase;
  }

  public final class MidiModuleDefinition {
    ctor public MidiModuleDefinition();
    method public dev.atsushieno.ktmidi.MidiInstrumentDefinition getInstrument();
    method public String? getMatch();
    method public String? getName();
    method public void setInstrument(dev.atsushieno.ktmidi.MidiInstrumentDefinition);
    method public void setMatch(String?);
    method public void setName(String?);
    property public final dev.atsushieno.ktmidi.MidiInstrumentDefinition instrument;
    property public final String? match;
    property public final String? name;
  }

  @Deprecated public final class MidiMusic {
    ctor @Deprecated public MidiMusic();
    method @Deprecated public void addTrack(dev.atsushieno.ktmidi.MidiTrack track);
    method @Deprecated public Iterable<dev.atsushieno.ktmidi.MidiMessage> filterEvents(kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.MidiMessage,java.lang.Boolean> filter);
    method @Deprecated public int getDeltaTimeSpec();
    method @Deprecated public byte getFormat();
    method @Deprecated public int getTimePositionInMillisecondsForTick(int ticks);
    method @Deprecated public int getTotalPlayTimeMilliseconds();
    method @Deprecated public int getTotalTicks();
    method @Deprecated public java.util.List<dev.atsushieno.ktmidi.MidiTrack> getTracks();
    method @Deprecated public void setDeltaTimeSpec(int);
    method @Deprecated public void setFormat(byte);
    property @Deprecated public final int deltaTimeSpec;
    property @Deprecated public final byte format;
    property @Deprecated public final java.util.List<dev.atsushieno.ktmidi.MidiTrack> tracks;
    field @Deprecated public static final dev.atsushieno.ktmidi.MidiMusic.Companion Companion;
    field @Deprecated public static final int DEFAULT_TEMPO = 500000; // 0x7a120
    field @Deprecated public static final int META_EVENT = 255; // 0xff
    field @Deprecated public static final int SYSEX_END = 247; // 0xf7
    field @Deprecated public static final int SYSEX_EVENT = 240; // 0xf0
  }

  @Deprecated public static final class MidiMusic.Companion {
    method @Deprecated public kotlin.sequences.Sequence<dev.atsushieno.ktmidi.MidiMessage> filterEvents(Iterable<dev.atsushieno.ktmidi.MidiMessage> messages, kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.MidiMessage,java.lang.Boolean> filter);
    method @Deprecated public int getPlayTimeMillisecondsAtTick(Iterable<dev.atsushieno.ktmidi.MidiMessage> messages, int ticks, int deltaTimeSpec);
    method @Deprecated public double getSmfBpm(byte[] data, int offset);
    method @Deprecated public int getSmfTempo(byte[] data, int offset);
    method @Deprecated public double getSmpteDurationInSeconds(int smfDeltaTimeSpec, int ticks, optional int tempo, optional double tempoRatio);
    method @Deprecated public int getSmpteTicksForSeconds(int smfDeltaTimeSpec, double duration, optional int tempo, optional double tempoRatio);
    method @Deprecated public int getSmpteTicksPerSeconds(int smfDeltaTimeSpec);
    method @Deprecated public int getTotalPlayTimeMilliseconds(Iterable<dev.atsushieno.ktmidi.MidiMessage> messages, int deltaTimeSpec);
  }

  public final class MidiMusicCommonKt {
    method public static dev.atsushieno.ktmidi.Dc getDc(int);
  }

  public final class MidiMusicKt {
    method @Deprecated public static dev.atsushieno.ktmidi.MidiMusic mergeTracks(dev.atsushieno.ktmidi.MidiMusic);
    method public static dev.atsushieno.ktmidi.MidiMusic splitTracksByChannel(dev.atsushieno.ktmidi.MidiTrack, byte deltaTimeSpec);
  }

  public final class MidiNoteAttributeType {
    field public static final dev.atsushieno.ktmidi.MidiNoteAttributeType INSTANCE;
    field public static final int MANUFACTURER_SPECIFIC = 1; // 0x1
    field public static final int NONE = 0; // 0x0
    field public static final int PROFILE_SPECIFIC = 2; // 0x2
    field public static final int Pitch7_9 = 3; // 0x3
  }

  public interface MidiOutput extends dev.atsushieno.ktmidi.MidiPort {
    method public void send(byte[] mevent, int offset, int length, long timestampInNanoseconds);
  }

  public final class MidiPerNoteManagementFlags {
    field public static final int DETACH = 2; // 0x2
    field public static final dev.atsushieno.ktmidi.MidiPerNoteManagementFlags INSTANCE;
    field public static final int RESET = 1; // 0x1
  }

  public abstract class MidiPlayer {
    method public final void close();
    method public final int getBpm();
    method public final Runnable? getFinished();
    method public final int getPlayDeltaTime();
    method public final Runnable? getPlaybackCompletedToEnd();
    method public abstract long getPositionInMilliseconds();
    method public final dev.atsushieno.ktmidi.PlayerState getState();
    method public final int getTempo();
    method public final double getTempoChangeRatio();
    method public final java.util.List<java.lang.Byte> getTimeSignature();
    method public abstract int getTotalPlayTimeMilliseconds();
    method public final void pause();
    method public final void play();
    method public abstract void seek(int ticks);
    method public final void setFinished(Runnable?);
    method public abstract void setMutedChannels(Iterable<java.lang.Integer> mutedChannels);
    method public final void setPlaybackCompletedToEnd(Runnable?);
    method public final void setTempo(int);
    method public final void setTempoChangeRatio(double);
    method public final void stop();
    property public final int bpm;
    property public final Runnable? finished;
    property public final int playDeltaTime;
    property public final Runnable? playbackCompletedToEnd;
    property public abstract long positionInMilliseconds;
    property public final dev.atsushieno.ktmidi.PlayerState state;
    property public final int tempo;
    property public final double tempoChangeRatio;
    property public final java.util.List<java.lang.Byte> timeSignature;
    property public abstract int totalPlayTimeMilliseconds;
  }

  public interface MidiPlayerTimer {
    method public void stop();
    method public suspend Object? waitBySeconds(double addedSeconds, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class MidiPlayerTimerTest {
    ctor public MidiPlayerTimerTest();
    method public void simpleTimerTest();
  }

  public interface MidiPort {
    method public void close();
    method public dev.atsushieno.ktmidi.MidiPortConnectionState getConnectionState();
    method public dev.atsushieno.ktmidi.MidiPortDetails getDetails();
    method public int getMidiProtocol();
    method public void setMidiProtocol(int);
    property public abstract dev.atsushieno.ktmidi.MidiPortConnectionState connectionState;
    property public abstract dev.atsushieno.ktmidi.MidiPortDetails details;
    property public abstract int midiProtocol;
  }

  public enum MidiPortConnectionState {
    method public static dev.atsushieno.ktmidi.MidiPortConnectionState valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static dev.atsushieno.ktmidi.MidiPortConnectionState[] values();
    enum_constant public static final dev.atsushieno.ktmidi.MidiPortConnectionState CLOSED;
    enum_constant public static final dev.atsushieno.ktmidi.MidiPortConnectionState OPEN;
  }

  public interface MidiPortDetails {
    method public String getId();
    method public String? getManufacturer();
    method public String? getName();
    method public String? getVersion();
    property public abstract String id;
    property public abstract String? manufacturer;
    property public abstract String? name;
    property public abstract String? version;
  }

  public final class MidiProgramChangeOptions {
    field public static final int BANK_VALID = 1; // 0x1
    field public static final dev.atsushieno.ktmidi.MidiProgramChangeOptions INSTANCE;
    field public static final int NONE = 0; // 0x0
  }

  public final class MidiProgramDefinition {
    ctor public MidiProgramDefinition();
    method public java.util.ArrayList<dev.atsushieno.ktmidi.MidiBankDefinition> getBanks();
    method public int getIndex();
    method public String? getName();
    method public void setBanks(java.util.ArrayList<dev.atsushieno.ktmidi.MidiBankDefinition>);
    method public void setIndex(int);
    method public void setName(String?);
    property public final java.util.ArrayList<dev.atsushieno.ktmidi.MidiBankDefinition> banks;
    property public final int index;
    property public final String? name;
  }

  public final class MidiProtocolVersion {
    field public static final dev.atsushieno.ktmidi.MidiProtocolVersion INSTANCE;
    field public static final int MIDI1 = 1; // 0x1
    field public static final int MIDI2 = 2; // 0x2
    field public static final int UNSPECIFIED = 0; // 0x0
  }

  public final class MidiReaderWriterKt {
    method @Deprecated public static void read(dev.atsushieno.ktmidi.MidiMusic, java.util.List<java.lang.Byte> stream);
    method @Deprecated public static void write(dev.atsushieno.ktmidi.MidiMusic, java.util.List<java.lang.Byte> stream, optional kotlin.jvm.functions.Function3<? super java.lang.Boolean,? super dev.atsushieno.ktmidi.MidiMessage,? super java.util.List<java.lang.Byte>,java.lang.Integer> metaEventWriter, optional boolean disableRunningStatus);
  }

  public final class MidiReaderWriterTest {
    ctor public MidiReaderWriterTest();
    method public void readMusicFromResource();
    method public void writeMetaText();
  }

  public final class MidiRpn {
    field public static final int COARSE_TUNING = 2; // 0x2
    field public static final int FINE_TUNING = 1; // 0x1
    field public static final dev.atsushieno.ktmidi.MidiRpn INSTANCE;
    field public static final int MODULATION_DEPTH = 5; // 0x5
    field public static final int PITCH_BEND_SENSITIVITY = 0; // 0x0
    field public static final int TUNING_BANK_SELECT = 4; // 0x4
    field public static final int TUNING_PROGRAM = 3; // 0x3
  }

  public final class MidiSystemStatus {
    field public static final int ACTIVE_SENSING = 254; // 0xfe
    field public static final int CONTINUE = 251; // 0xfb
    field public static final dev.atsushieno.ktmidi.MidiSystemStatus INSTANCE;
    field public static final int MIDI_TIME_CODE = 241; // 0xf1
    field public static final int RESET = 255; // 0xff
    field public static final int SONG_POSITION = 242; // 0xf2
    field public static final int SONG_SELECT = 243; // 0xf3
    field public static final int START = 250; // 0xfa
    field public static final int STOP = 252; // 0xfc
    field public static final int TIMING_CLOCK = 248; // 0xf8
    field public static final int TUNE_REQUEST = 246; // 0xf6
  }

  @Deprecated public final class MidiTrack {
    ctor @Deprecated public MidiTrack(optional java.util.List<dev.atsushieno.ktmidi.MidiMessage> messages);
    method @Deprecated public java.util.List<dev.atsushieno.ktmidi.MidiMessage> getMessages();
    property @Deprecated public final java.util.List<dev.atsushieno.ktmidi.MidiMessage> messages;
  }

  @Deprecated public class MidiTrackSplitter {
    ctor @Deprecated public MidiTrackSplitter(java.util.List<dev.atsushieno.ktmidi.MidiMessage> source, byte deltaTimeSpec);
    method @Deprecated public int getTrackId(dev.atsushieno.ktmidi.MidiMessage e);
    method @Deprecated public final dev.atsushieno.ktmidi.MidiMusic split();
    field @Deprecated public static final dev.atsushieno.ktmidi.MidiTrackSplitter.Companion Companion;
  }

  @Deprecated public static final class MidiTrackSplitter.Companion {
    method @Deprecated public dev.atsushieno.ktmidi.MidiMusic split(java.util.List<dev.atsushieno.ktmidi.MidiMessage> source, byte deltaTimeSpec);
  }

  public final class MidiUtilityStatus {
    field public static final int DCTPQ = 48; // 0x30
    field public static final int DELTA_CLOCKSTAMP = 64; // 0x40
    field public static final dev.atsushieno.ktmidi.MidiUtilityStatus INSTANCE;
    field public static final int JR_CLOCK = 16; // 0x10
    field public static final int JR_TIMESTAMP = 32; // 0x20
    field public static final int NOP = 0; // 0x0
  }

  public fun interface OnMidi1EventListener {
    method public void onEvent(dev.atsushieno.ktmidi.Midi1Event m);
  }

  public fun interface OnMidi2EventListener {
    method public void onEvent(dev.atsushieno.ktmidi.Ump e);
  }

  @Deprecated public fun interface OnMidiEventListener {
    method @Deprecated public void onEvent(dev.atsushieno.ktmidi.MidiEvent e);
  }

  @Deprecated public fun interface OnMidiMessageListener {
    method @Deprecated public void onMessage(dev.atsushieno.ktmidi.MidiMessage m);
  }

  public fun interface OnMidiReceivedEventListener {
    method public void onEventReceived(byte[] data, int start, int length, long timestampInNanoseconds);
  }

  public final class PerformanceTextStatus {
    field public static final dev.atsushieno.ktmidi.PerformanceTextStatus INSTANCE;
    field public static final byte LYRICS = 1; // 0x1
    field public static final byte LYRICS_LANGUAGE = 2; // 0x2
    field public static final byte RUBY = 3; // 0x3
    field public static final byte RUBY_LANGUAGE = 4; // 0x4
    field public static final byte UNKNOWN = 0; // 0x0
  }

  public enum PlayerState {
    method public static dev.atsushieno.ktmidi.PlayerState valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static dev.atsushieno.ktmidi.PlayerState[] values();
    enum_constant public static final dev.atsushieno.ktmidi.PlayerState PAUSED;
    enum_constant public static final dev.atsushieno.ktmidi.PlayerState PLAYING;
    enum_constant public static final dev.atsushieno.ktmidi.PlayerState STOPPED;
  }

  public final class PortCreatorContext {
    ctor public PortCreatorContext(String applicationName, String portName, String manufacturer, String version, optional int midiProtocol, optional int umpGroup);
    method public String component1();
    method public String component2();
    method public String component3();
    method public String component4();
    method public int component5();
    method public int component6();
    method public dev.atsushieno.ktmidi.PortCreatorContext copy(String applicationName, String portName, String manufacturer, String version, int midiProtocol, int umpGroup);
    method public String getApplicationName();
    method public String getManufacturer();
    method public int getMidiProtocol();
    method public String getPortName();
    method public int getUmpGroup();
    method public String getVersion();
    method public void setApplicationName(String);
    method public void setManufacturer(String);
    method public void setMidiProtocol(int);
    method public void setPortName(String);
    method public void setUmpGroup(int);
    method public void setVersion(String);
    property public final String applicationName;
    property public final String manufacturer;
    property public final int midiProtocol;
    property public final String portName;
    property public final int umpGroup;
    property public final String version;
  }

  public enum SeekFilterResult {
    method public static dev.atsushieno.ktmidi.SeekFilterResult valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static dev.atsushieno.ktmidi.SeekFilterResult[] values();
    enum_constant public static final dev.atsushieno.ktmidi.SeekFilterResult BLOCK;
    enum_constant public static final dev.atsushieno.ktmidi.SeekFilterResult BLOCK_AND_TERMINATE;
    enum_constant public static final dev.atsushieno.ktmidi.SeekFilterResult PASS;
    enum_constant public static final dev.atsushieno.ktmidi.SeekFilterResult PASS_AND_TERMINATE;
  }

  public fun interface SeekProcessor<TEvent> {
    method public dev.atsushieno.ktmidi.SeekFilterResult filterEvent(TEvent evt);
  }

  public final class SimpleAdjustingMidiPlayerTimer implements dev.atsushieno.ktmidi.MidiPlayerTimer {
    ctor public SimpleAdjustingMidiPlayerTimer(optional kotlin.time.TimeSource timeSource);
    method public void stop();
    method public suspend Object? waitBySeconds(double addedSeconds, kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public final class SimpleVirtualMidiInput extends dev.atsushieno.ktmidi.SimpleVirtualMidiPort implements dev.atsushieno.ktmidi.MidiInput {
    ctor public SimpleVirtualMidiInput(dev.atsushieno.ktmidi.MidiPortDetails details, kotlin.jvm.functions.Function0<kotlin.Unit> onDispose);
    method public void setMessageReceivedListener(dev.atsushieno.ktmidi.OnMidiReceivedEventListener listener);
  }

  public final class SimpleVirtualMidiOutput extends dev.atsushieno.ktmidi.SimpleVirtualMidiPort implements dev.atsushieno.ktmidi.MidiOutput {
    ctor public SimpleVirtualMidiOutput(dev.atsushieno.ktmidi.MidiPortDetails details, kotlin.jvm.functions.Function0<kotlin.Unit> onDispose);
    method public kotlin.jvm.functions.Function4<byte[],java.lang.Integer,java.lang.Integer,java.lang.Long,kotlin.Unit> getOnSend();
    method public void send(byte[] mevent, int offset, int length, long timestampInNanoseconds);
    method public void setOnSend(kotlin.jvm.functions.Function4<? super byte[],? super java.lang.Integer,? super java.lang.Integer,? super java.lang.Long,kotlin.Unit>);
    property public final kotlin.jvm.functions.Function4<byte[],java.lang.Integer,java.lang.Integer,java.lang.Long,kotlin.Unit> onSend;
  }

  public abstract class SimpleVirtualMidiPort implements dev.atsushieno.ktmidi.MidiPort {
    ctor protected SimpleVirtualMidiPort(dev.atsushieno.ktmidi.MidiPortDetails details, kotlin.jvm.functions.Function0<kotlin.Unit> onDispose);
    method public void close();
    method public dev.atsushieno.ktmidi.MidiPortConnectionState getConnectionState();
    method public dev.atsushieno.ktmidi.MidiPortDetails getDetails();
    method public int getMidiProtocol();
    method public void setMidiProtocol(int);
    property public dev.atsushieno.ktmidi.MidiPortConnectionState connectionState;
    property public dev.atsushieno.ktmidi.MidiPortDetails details;
    property public int midiProtocol;
  }

  public final class SmfParserException extends java.lang.Exception {
    ctor public SmfParserException();
    ctor public SmfParserException(String message);
    ctor public SmfParserException(String message, Exception innerException);
  }

  @Deprecated public final class SmfWriterExtension {
    ctor @Deprecated public SmfWriterExtension();
    field @Deprecated public static final dev.atsushieno.ktmidi.SmfWriterExtension.Companion Companion;
  }

  @Deprecated public static final class SmfWriterExtension.Companion {
    method @Deprecated public kotlin.jvm.functions.Function3<java.lang.Boolean,dev.atsushieno.ktmidi.MidiMessage,java.util.List<java.lang.Byte>,java.lang.Integer> getDEFAULT_META_EVENT_WRITER();
    property @Deprecated public final kotlin.jvm.functions.Function3<java.lang.Boolean,dev.atsushieno.ktmidi.MidiMessage,java.util.List<java.lang.Byte>,java.lang.Integer> DEFAULT_META_EVENT_WRITER;
  }

  public final class TestHelper {
    ctor public TestHelper();
    field public static final dev.atsushieno.ktmidi.TestHelper.Companion Companion;
  }

  public static final class TestHelper.Companion {
    method public dev.atsushieno.ktmidi.Midi1Music getMidiMusic();
    method public dev.atsushieno.ktmidi.Midi1Music getMidiMusic(String resourceId);
    method public suspend Object? getMidiPlayer(dev.atsushieno.ktmidi.MidiPlayerTimer? timeManager, dev.atsushieno.ktmidi.Midi1Music? midiMusic, optional dev.atsushieno.ktmidi.MidiAccess? midiAccess, optional kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.Midi1Player>);
    method public suspend Object? getMidiPlayer(optional dev.atsushieno.ktmidi.MidiPlayerTimer? timeManager, optional dev.atsushieno.ktmidi.MidiAccess? midiAccess, optional String? resourceId, optional kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.Midi1Player>);
  }

  public final class Timed<T> {
    ctor public Timed(dev.atsushieno.ktmidi.Dc duration, T value);
    method public dev.atsushieno.ktmidi.Dc component1();
    method public T component2();
    method public dev.atsushieno.ktmidi.Timed<T> copy(dev.atsushieno.ktmidi.Dc duration, T! value);
    method public dev.atsushieno.ktmidi.Dc getDuration();
    method public T getValue();
    property public final dev.atsushieno.ktmidi.Dc duration;
    property public final T value;
  }

  public final class TonicNoteField {
    field public static final byte A = 1; // 0x1
    field public static final byte B = 2; // 0x2
    field public static final byte C = 3; // 0x3
    field public static final byte D = 4; // 0x4
    field public static final byte E = 5; // 0x5
    field public static final byte F = 6; // 0x6
    field public static final byte G = 7; // 0x7
    field public static final dev.atsushieno.ktmidi.TonicNoteField INSTANCE;
    field public static final byte NON_STANDARD = 0; // 0x0
    field public static final byte UNKNOWN = 0; // 0x0
  }

  public final class Ump {
    ctor public Ump(int int1, optional int int2, optional int int3, optional int int4);
    ctor public Ump(long long1, optional long long2);
    method public int component1();
    method public int component2();
    method public int component3();
    method public int component4();
    method public dev.atsushieno.ktmidi.Ump copy(int int1, int int2, int int3, int int4);
    method public int getInt1();
    method public int getInt2();
    method public int getInt3();
    method public int getInt4();
    property public final int int1;
    property public final int int2;
    property public final int int3;
    property public final int int4;
    field public static final dev.atsushieno.ktmidi.Ump.Companion Companion;
  }

  public static final class Ump.Companion {
    method public kotlin.sequences.Sequence<dev.atsushieno.ktmidi.Ump> fromBytes(byte[] bytes, int offset, int count);
  }

  public enum UmpBinaryRetrieverFallback {
    method public static dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback[] values();
    enum_constant public static final dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback Break;
    enum_constant public static final dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback Exception;
  }

  public final class UmpException extends java.lang.Exception {
    ctor public UmpException();
    ctor public UmpException(String message);
    ctor public UmpException(String message, Exception innerException);
  }

  public final class UmpFactory {
    method public dev.atsushieno.ktmidi.Ump chordName(byte group, byte address, byte channel, byte tonicSharpsFlats, byte chordTonic, byte chordType, int alter1, int alter2, int alter3, int alter4, byte bassSharpsFlats, byte bassNote, byte bassChordType, int bassAlter1, int bassAlter2);
    method public int dctpq(short numberOfTicksPerQuarterNote);
    method public int deltaClockstamp(int ticks20);
    method public dev.atsushieno.ktmidi.Ump deviceIdentityNotification(int manufacturer, short family, short modelNumber, int softwareRevisionLevel);
    method public dev.atsushieno.ktmidi.Ump endOfClip();
    method public dev.atsushieno.ktmidi.Ump endpointDiscovery(byte umpVersionMajor, byte umpVersionMinor, byte filterBitmap);
    method public dev.atsushieno.ktmidi.Ump endpointInfoNotification(byte umpVersionMajor, byte umpVersionMinor, boolean isStaticFunctionBlock, byte functionBlockCount, boolean midi2Capable, boolean midi1Capable, boolean supportsRxJR, boolean supportsTxJR);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> endpointNameNotification(byte[] name);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> endpointNameNotification(String name);
    method public dev.atsushieno.ktmidi.Ump flexDataCompleteBinary(byte group, byte address, byte channel, byte statusByte, int int2, optional int int3, optional int int4);
    method public void flexDataProcess(byte group, byte address, byte channel, byte statusBank, byte status, byte[] text, optional Object? context, optional kotlin.jvm.functions.Function2<? super dev.atsushieno.ktmidi.Ump,java.lang.Object,kotlin.Unit> sendUMP128);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> flexDataText(byte group, byte address, byte channel, byte statusBank, byte status, byte[] text);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> flexDataText(byte group, byte address, byte channel, byte statusBank, byte status, String text);
    method public Iterable<dev.atsushieno.ktmidi.Ump> fromPlatformBytes(io.ktor.utils.io.core.ByteOrder byteOrder, java.util.List<java.lang.Byte> bytes);
    method public Iterable<dev.atsushieno.ktmidi.Ump> fromPlatformNativeBytes(java.util.List<java.lang.Byte> bytes);
    method public dev.atsushieno.ktmidi.Ump functionBlockDiscovery(byte fbNumber, byte filter);
    method public dev.atsushieno.ktmidi.Ump functionBlockInfoNotification(boolean isFbActive, byte fbNumber, byte uiHint, byte midi1, byte direction, byte firstGroup, byte numberOfGroupsSpanned, byte midiCIMessageVersionFormat, int maxSysEx8Streams);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> functionBlockNameNotification(byte blockNumber, String name);
    method public int jrClock(double senderClockTimeSeconds);
    method public int jrClock(int senderClockTime16);
    method @Deprecated public int jrClock(int group, double senderClockTimeSeconds);
    method @Deprecated public int jrClock(int group, int senderClockTime16);
    method public int jrTimestamp(double senderClockTimestampSeconds);
    method public int jrTimestamp(int senderClockTimestamp16);
    method @Deprecated public int jrTimestamp(int group, double senderClockTimestampSeconds);
    method @Deprecated public int jrTimestamp(int group, int senderClockTimestamp16);
    method public kotlin.sequences.Sequence<java.lang.Integer> jrTimestamps(double senderClockTimestampSeconds);
    method @Deprecated public kotlin.sequences.Sequence<java.lang.Integer> jrTimestamps(int group, double senderClockTimestampSeconds);
    method @Deprecated public kotlin.sequences.Sequence<java.lang.Integer> jrTimestamps(int group, long senderClockTimestampTicks);
    method public kotlin.sequences.Sequence<java.lang.Integer> jrTimestamps(long senderClockTimestampTicks);
    method public dev.atsushieno.ktmidi.Ump keySignature(byte group, byte address, byte channel, byte sharpsOrFlats, byte tonicNote);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> mds(byte group, java.util.List<java.lang.Byte> data, optional byte mdsId);
    method @Deprecated public java.util.List<dev.atsushieno.ktmidi.Ump> mds(int group, java.util.List<java.lang.Byte> data, optional byte mdsId);
    method public int mdsGetChunkCount(int numTotalBytesInMDS);
    method public kotlin.Pair<java.lang.Long,java.lang.Long> mdsGetHeader(byte group, byte mdsId, int numBytesInChunk16, int numChunks16, int chunkIndex16, int manufacturerId16, int deviceId16, int subId16, int subId2_16);
    method public int mdsGetPayloadCount(int numTotalBytesInChunk);
    method public kotlin.Pair<java.lang.Long,java.lang.Long> mdsGetPayloadOf(byte group, byte mdsId, int numBytes16, java.util.List<java.lang.Byte> srcData, int offset);
    method public void mdsProcess(byte group, byte mdsId, java.util.List<java.lang.Byte> data, optional Object? context, kotlin.jvm.functions.Function5<? super java.lang.Long,? super java.lang.Long,? super java.lang.Integer,? super java.lang.Integer,java.lang.Object,kotlin.Unit> sendUmp);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> metadataText(byte group, byte address, byte channel, byte status, byte[] text);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> metadataText(byte group, byte address, byte channel, byte status, String text);
    method public dev.atsushieno.ktmidi.Ump metronome(byte group, byte channel, byte numClocksPerPrimeryClick, byte barAccent1, byte barAccent2, byte barAccent3, byte numSubdivisionClick1, byte numSubdivisionClick2);
    method public int midi1CAf(int group, int channel, byte data);
    method public int midi1CC(int group, int channel, byte index, byte data);
    method public int midi1Message(int group, byte code, int channel, byte byte3, byte byte4);
    method public int midi1NoteOff(int group, int channel, byte note, byte velocity);
    method public int midi1NoteOn(int group, int channel, byte note, byte velocity);
    method public int midi1PAf(int group, int channel, byte note, byte data);
    method public int midi1PitchBend(int group, int channel, short data);
    method public int midi1PitchBendDirect(int group, int channel, short data);
    method public int midi1PitchBendSplit(int group, int channel, byte dataLSB, byte dataMSB);
    method public int midi1Program(int group, int channel, byte program);
    method public long midi2CAf(int group, int channel, long data32);
    method public long midi2CC(int group, int channel, int index8, long data32);
    method public long midi2ChannelMessage8_8_16_16(int group, int code, int channel, int byte3, int byte4, int short1, int short2);
    method public long midi2ChannelMessage8_8_32(int group, int code, int channel, int byte3, int byte4, long rest32);
    method public long midi2NRPN(int group, int channel, int bankAkaMSB8, int indexAkaLSB8, long dataAkaDTE32);
    method public long midi2NoteOff(int group, int channel, int note, byte attributeType8, int velocity16, int attributeData16);
    method public long midi2NoteOn(int group, int channel, int note, byte attributeType8, int velocity16, int attributeData16);
    method public long midi2PAf(int group, int channel, int note, long data32);
    method public long midi2PerNoteACC(int group, int channel, int note, int index8, long data32);
    method public long midi2PerNoteManagement(int group, int channel, int note, int optionFlags);
    method public long midi2PerNotePitchBend(int group, int channel, int note, long data32);
    method public long midi2PerNotePitchBendDirect(int group, int channel, int note, long data32);
    method public long midi2PerNoteRCC(int group, int channel, int note, int index8, long data32);
    method public long midi2PitchBend(int group, int channel, long data32);
    method public long midi2PitchBendDirect(int group, int channel, long data32);
    method public long midi2Program(int group, int channel, int optionFlags, int program8, int bankMSB8, int bankLSB8);
    method public long midi2RPN(int group, int channel, int bankAkaMSB8, int indexAkaLSB8, long dataAkaDTE32);
    method public long midi2RelativeNRPN(int group, int channel, int bankAkaMSB8, int indexAkaLSB8, long dataAkaDTE32);
    method public long midi2RelativeRPN(int group, int channel, int bankAkaMSB8, int indexAkaLSB8, long dataAkaDTE32);
    method public int noop();
    method @Deprecated public int noop(int group);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> performanceText(byte group, byte address, byte channel, byte status, byte[] text);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> performanceText(byte group, byte address, byte channel, byte status, String text);
    method public int pitch7_9(double pitch);
    method public int pitch7_9Split(byte semitone, double microtone0To1);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> productInstanceNotification(byte[] id);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> productInstanceNotification(String id);
    method public dev.atsushieno.ktmidi.Ump startOfClip();
    method public dev.atsushieno.ktmidi.Ump streamConfigNotification(byte protocol, boolean rxJRTimestamp, boolean txJRTimestamp);
    method public dev.atsushieno.ktmidi.Ump streamConfigRequest(byte protocol, boolean rxJRTimestamp, boolean txJRTimestamp);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> sysex7(int group, java.util.List<java.lang.Byte> sysex);
    method public long sysex7Direct(int group, byte status, int numBytes, byte data1, byte data2, byte data3, byte data4, byte data5, byte data6);
    method public int sysex7GetPacketCount(int numSysex7Bytes);
    method public long sysex7GetPacketOf(int group, int numBytes, java.util.List<java.lang.Byte> srcData, int index);
    method public int sysex7GetSysexLength(java.util.List<java.lang.Byte> srcData);
    method public void sysex7Process(int group, java.util.List<java.lang.Byte> sysex, optional Object? context, optional kotlin.jvm.functions.Function2<? super java.lang.Long,java.lang.Object,kotlin.Unit> sendUMP64);
    method public java.util.List<dev.atsushieno.ktmidi.Ump> sysex8(int group, java.util.List<java.lang.Byte> sysex, optional byte streamId);
    method public int sysex8GetPacketCount(int numBytes);
    method public kotlin.Pair<java.lang.Long,java.lang.Long> sysex8GetPacketOf(int group, byte streamId, int numBytes, java.util.List<java.lang.Byte> srcData, int index);
    method public void sysex8Process(int group, java.util.List<java.lang.Byte> sysex, optional byte streamId, optional Object? context, optional kotlin.jvm.functions.Function3<? super java.lang.Long,? super java.lang.Long,java.lang.Object,kotlin.Unit> sendUMP128);
    method @Deprecated public void sysex8Process(int group, java.util.List<java.lang.Byte> sysex, byte streamId, kotlin.jvm.functions.Function3<? super java.lang.Long,? super java.lang.Long,java.lang.Object,kotlin.Unit> sendUMP128, Object? context);
    method public int systemMessage(int group, byte status, byte midi1Byte2, byte midi1Byte3);
    method public dev.atsushieno.ktmidi.Ump tempo(byte group, byte channel, int numberOf10NanosecondsPerQuarterNote);
    method public dev.atsushieno.ktmidi.Ump timeSignatureDirect(byte group, byte channel, byte numerator, byte rawDenominator, byte numberOf32Notes);
    method public int umpGetNumBytes(int data);
    field public static final dev.atsushieno.ktmidi.UmpFactory INSTANCE;
  }

  public final class UmpFactoryKt {
    field public static final int JR_TIMESTAMP_TICKS_PER_SECOND = 31250; // 0x7a12
    field public static final byte MIDI_2_0_RESERVED = 0; // 0x0
  }

  public final class UmpFactoryTest {
    ctor public UmpFactoryTest();
    method public void fromPlatformBytes();
    method public void performanceText();
    method public void sysex7Process();
    method public void sysex8Process();
    method public void testChordName();
    method public void testDeviceIdentityNotification();
    method public void testEndpointDiscovery();
    method public void testEndpointInfoNotification();
    method public void testEndpointNameNotification();
    method public void testFunctionBlockDiscovery();
    method public void testFunctionBlockInfoNotification();
    method public void testFunctionBlockNameNotification();
    method public void testKeySignature();
    method public void testMetadataText();
    method public void testMetronome();
    method public void testProductInstanceIdNotification();
    method public void testStreamConfigNotification();
    method public void testStreamConfigRequest();
    method public void testTempo();
    method public void testTimeSignatureDirect();
    method public void testType0Messages();
    method public void testType1Messages();
    method public void testType2Messages();
    method public void testType3Messages();
    method public void testType4Messages();
    method public void testType5Messages();
  }

  public final class UmpRetrievalKt {
    method public static int getChannelInGroup(dev.atsushieno.ktmidi.Ump);
    method public static int getChordNameAlter1(dev.atsushieno.ktmidi.Ump);
    method public static int getChordNameAlter2(dev.atsushieno.ktmidi.Ump);
    method public static int getChordNameAlter3(dev.atsushieno.ktmidi.Ump);
    method public static int getChordNameAlter4(dev.atsushieno.ktmidi.Ump);
    method public static int getChordNameBassAlter1(dev.atsushieno.ktmidi.Ump);
    method public static int getChordNameBassAlter2(dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameBassChordType(dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameBassNote(dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameBassSharpsFlats(dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameChordTonic(dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameChordType(dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameSharpsFlats(dev.atsushieno.ktmidi.Ump);
    method public static int getDctpq(dev.atsushieno.ktmidi.Ump);
    method public static int getDeltaClockstamp(dev.atsushieno.ktmidi.Ump);
    method public static short getDeviceIdentificationFamily(dev.atsushieno.ktmidi.Ump);
    method public static int getDeviceIdentificationManufacturer(dev.atsushieno.ktmidi.Ump);
    method public static short getDeviceIdentificationModelNumber(dev.atsushieno.ktmidi.Ump);
    method public static int getDeviceIdentificationSoftwareRevisionLevel(dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointDiscoveryFilterBitmap(dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointDiscoveryUmpVersionMajor(dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointDiscoveryUmpVersionMinor(dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointInfoFunctionBlockCount(dev.atsushieno.ktmidi.Ump);
    method public static boolean getEndpointInfoMidi1Capable(dev.atsushieno.ktmidi.Ump);
    method public static boolean getEndpointInfoMidi2Capable(dev.atsushieno.ktmidi.Ump);
    method public static boolean getEndpointInfoStaticFunctionBlocks(dev.atsushieno.ktmidi.Ump);
    method public static boolean getEndpointInfoSupportsRxJR(dev.atsushieno.ktmidi.Ump);
    method public static boolean getEndpointInfoSupportsTxJR(dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointInfoUmpVersionMajor(dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointInfoUmpVersionMinor(dev.atsushieno.ktmidi.Ump);
    method public static int getFlexDataFormat(dev.atsushieno.ktmidi.Ump);
    method public static byte getFlexDataStatus(dev.atsushieno.ktmidi.Ump);
    method public static byte getFlexDataStatusBank(dev.atsushieno.ktmidi.Ump);
    method public static boolean getFunctionBlockActive(dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockCIVersion(dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockCount(dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockDirection(dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockDiscoveryFilter(dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockFirstGroup(dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockGroupCount(dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockMaxSysEx8(dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockMidi1Port(dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockUiHint(dev.atsushieno.ktmidi.Ump);
    method public static int getGroup(dev.atsushieno.ktmidi.Ump);
    method public static int getGroupAndChannel(dev.atsushieno.ktmidi.Ump);
    method public static int getGroupByte(dev.atsushieno.ktmidi.Ump);
    method public static int getJrClock(dev.atsushieno.ktmidi.Ump);
    method public static int getJrTimestamp(dev.atsushieno.ktmidi.Ump);
    method public static byte getKeySignatureSharpsFlats(dev.atsushieno.ktmidi.Ump);
    method public static byte getKeySignatureTonicNote(dev.atsushieno.ktmidi.Ump);
    method public static int getMdsChunkByteSize(dev.atsushieno.ktmidi.Ump);
    method public static int getMdsChunkCount(dev.atsushieno.ktmidi.Ump);
    method public static int getMdsChunkIndex(dev.atsushieno.ktmidi.Ump);
    method public static int getMdsDeviceId(dev.atsushieno.ktmidi.Ump);
    method public static int getMdsId(dev.atsushieno.ktmidi.Ump);
    method public static int getMdsManufacturerId(dev.atsushieno.ktmidi.Ump);
    method public static int getMdsSubId1(dev.atsushieno.ktmidi.Ump);
    method public static int getMdsSubId2(dev.atsushieno.ktmidi.Ump);
    method public static int getMessageType(dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeBarAccent1(dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeBarAccent2(dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeBarAccent3(dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeClocksPerPrimaryClick(dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeSubDivisionClick1(dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeSubDivisionClick2(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1CAf(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1CCData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1CCIndex(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1Lsb(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1Msb(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1Note(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1PAfData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1PitchBendData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1Program(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1Velocity(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2CAfData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2CCData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2CCIndex(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2Note(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2NoteAttributeData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2NoteAttributeType(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2NrpnData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2NrpnLsb(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2NrpnMsb(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2PAfData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2PerNoteACCData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2PerNoteACCIndex(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2PerNoteManagementOptions(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2PerNoteRCCData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2PerNoteRCCIndex(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2PitchBendData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2ProgramBankLsb(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2ProgramBankMsb(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2ProgramOptions(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2ProgramProgram(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2RpnData(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2RpnLsb(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2RpnMsb(dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2Velocity16(dev.atsushieno.ktmidi.Ump);
    method public static int getSizeInBytes(dev.atsushieno.ktmidi.Ump);
    method public static int getSizeInInts(dev.atsushieno.ktmidi.Ump);
    method public static int getStatusByte(dev.atsushieno.ktmidi.Ump);
    method public static int getStatusCode(dev.atsushieno.ktmidi.Ump);
    method public static int getStreamConfigProtocol(dev.atsushieno.ktmidi.Ump);
    method public static boolean getStreamConfigSupportsRxJR(dev.atsushieno.ktmidi.Ump);
    method public static boolean getStreamConfigSupportsTxJR(dev.atsushieno.ktmidi.Ump);
    method public static int getSysex7Size(dev.atsushieno.ktmidi.Ump);
    method public static int getSysex8Size(dev.atsushieno.ktmidi.Ump);
    method public static int getSysex8StreamId(dev.atsushieno.ktmidi.Ump);
    method public static int getTempo(dev.atsushieno.ktmidi.Ump);
    method public static int getTimeSignatureDenominator(dev.atsushieno.ktmidi.Ump);
    method public static int getTimeSignatureNumberOf32thNotes(dev.atsushieno.ktmidi.Ump);
    method public static int getTimeSignatureNumerator(dev.atsushieno.ktmidi.Ump);
    method public static int getUmpStreamFormat(dev.atsushieno.ktmidi.Ump);
    method public static boolean isChordName(dev.atsushieno.ktmidi.Ump);
    method public static boolean isDCTPQ(dev.atsushieno.ktmidi.Ump);
    method public static boolean isDeltaClockstamp(dev.atsushieno.ktmidi.Ump);
    method public static boolean isEndOfClip(dev.atsushieno.ktmidi.Ump);
    method public static boolean isFlexData(dev.atsushieno.ktmidi.Ump);
    method public static boolean isJRClock(dev.atsushieno.ktmidi.Ump);
    method public static boolean isJRTimestamp(dev.atsushieno.ktmidi.Ump);
    method public static boolean isKeySignature(dev.atsushieno.ktmidi.Ump);
    method public static boolean isMetronome(dev.atsushieno.ktmidi.Ump);
    method public static boolean isStartOfClip(dev.atsushieno.ktmidi.Ump);
    method public static boolean isTempo(dev.atsushieno.ktmidi.Ump);
    method public static boolean isTimeSignature(dev.atsushieno.ktmidi.Ump);
    method public static boolean isUmpStream(dev.atsushieno.ktmidi.Ump);
    method public static java.util.List<java.lang.Integer> toInts(dev.atsushieno.ktmidi.Ump);
    method public static void toPlatformBytes(dev.atsushieno.ktmidi.Ump, byte[] bytes, int offset);
    method public static void toPlatformBytes(dev.atsushieno.ktmidi.Ump, byte[] bytes, int offset, io.ktor.utils.io.core.ByteOrder byteOrder);
    method public static byte[] toPlatformBytes(dev.atsushieno.ktmidi.Ump, io.ktor.utils.io.core.ByteOrder byteOrder);
    method public static byte[] toPlatformNativeBytes(dev.atsushieno.ktmidi.Ump);
  }

  public final class UmpRetriever {
    method public String getEndpointName(java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public java.util.List<java.lang.Byte> getEndpointNameBytes(java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public String getFlexDataText(java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public java.util.List<java.lang.Byte> getFlexDataTextBytes(java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public void getFlexDataTextBytes(kotlin.jvm.functions.Function1<? super java.util.List<java.lang.Byte>,kotlin.Unit> outputter, java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public String getFunctionBlockName(java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public java.util.List<java.lang.Byte> getFunctionBlockNameBytes(java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public String getProductInstanceId(java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public java.util.List<java.lang.Byte> getProductInstanceIdBytes(java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public java.util.List<java.lang.Byte> getSysex7Data(java.util.Iterator<dev.atsushieno.ktmidi.Ump> iter, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public void getSysex7Data(kotlin.jvm.functions.Function1<? super java.util.List<java.lang.Byte>,kotlin.Unit> outputter, java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public java.util.List<java.lang.Byte> getSysex8Data(java.util.Iterator<dev.atsushieno.ktmidi.Ump> iter, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public void getSysex8Data(kotlin.jvm.functions.Function1<? super java.util.List<java.lang.Byte>,kotlin.Unit> outputter, java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    field public static final dev.atsushieno.ktmidi.UmpRetriever INSTANCE;
  }

  public final class UmpRetrieverTest {
    ctor public UmpRetrieverTest();
    method public void getSysex7Data1();
    method public void getSysex7Data2();
    method public void getSysex8Data();
    method public void performanceText();
    method public void testChordName();
    method public void testChordName2();
    method public void testDeviceIdentityNotification();
    method public void testEndpointDiscovery();
    method public void testEndpointInfoNotification();
    method public void testEndpointNameNotification();
    method public void testEndpointNameNotification2();
    method public void testFunctionBlockDiscovery();
    method public void testFunctionBlockInfoNotification();
    method public void testFunctionBlockNameNotification();
    method public void testFunctionBlockNameNotification2();
    method public void testKeySignature();
    method public void testMetadataText();
    method public void testMetadataText2();
    method public void testMetadataText3();
    method public void testMetronome();
    method public void testProductInstanceIdNotification();
    method public void testStreamConfigNotification();
    method public void testStreamConfigRequest();
    method public void testTempo();
    method public void testTimeSignature();
  }

  public final class UmpStreamStatus {
    field public static final byte DEVICE_IDENTITY_NOTIFICATION = 2; // 0x2
    field public static final byte ENDPOINT_DISCOVERY = 0; // 0x0
    field public static final byte ENDPOINT_INFO_NOTIFICATION = 1; // 0x1
    field public static final byte ENDPOINT_NAME_NOTIFICATION = 3; // 0x3
    field public static final byte END_OF_CLIP = 33; // 0x21
    field public static final byte FUNCTION_BLOCK_DISCOVERY = 16; // 0x10
    field public static final byte FUNCTION_BLOCK_INFO_NOTIFICATION = 17; // 0x11
    field public static final byte FUNCTION_BLOCK_NAME_NOTIFICATION = 18; // 0x12
    field public static final dev.atsushieno.ktmidi.UmpStreamStatus INSTANCE;
    field public static final byte PRODUCT_INSTANCE_ID_NOTIFICATION = 4; // 0x4
    field public static final byte START_OF_CLIP = 32; // 0x20
    field public static final byte STREAM_CONFIGURATION = 5; // 0x5
    field public static final byte STREAM_CONFIGURATION_NOTIFICATION = 6; // 0x6
  }

  public final class UmpTest {
    ctor public UmpTest();
    method public void testToAndFromBytes();
  }

  public final class UmpToMidi1BytesTranslatorContext {
    ctor public UmpToMidi1BytesTranslatorContext(optional int deltaTimeMasterClock, optional boolean treatJRTimestampAsSmfDeltaTime, optional boolean skipDeltaTime);
    method public int getDeltaTimeMasterClock();
    method public boolean getSkipDeltaTime();
    method public boolean getTreatJRTimestampAsSmfDeltaTime();
    property public final int deltaTimeMasterClock;
    property public final boolean skipDeltaTime;
    property public final boolean treatJRTimestampAsSmfDeltaTime;
  }

  public final class UmpTranslationResult {
    field public static final int INCOMPLETE_SYSEX7 = 32; // 0x20
    field public static final dev.atsushieno.ktmidi.UmpTranslationResult INSTANCE;
    field public static final int INVALID_DTE_SEQUENCE = 17; // 0x11
    field public static final int INVALID_STATUS = 19; // 0x13
    field public static final int INVALID_SYSEX = 16; // 0x10
    field public static final int OK = 0; // 0x0
  }

  public final class UmpTranslator {
    method public int translateMidi1BytesToUmp(dev.atsushieno.ktmidi.Midi1ToUmpTranslatorContext context);
    method public int translateSingleUmpToMidi1Bytes(java.util.List<java.lang.Byte> dst, dev.atsushieno.ktmidi.Ump ump, optional int dstOffset, optional Integer? deltaTime, optional java.util.List<java.lang.Byte>? sysex);
    method public int translateUmpToMidi1Bytes(java.util.List<java.lang.Byte> dst, kotlin.sequences.Sequence<dev.atsushieno.ktmidi.Ump> src, optional dev.atsushieno.ktmidi.UmpToMidi1BytesTranslatorContext context);
    field public static final dev.atsushieno.ktmidi.UmpTranslator INSTANCE;
  }

  public final class UmpTranslatorTest {
    ctor public UmpTranslatorTest();
    method public void testConvertMidi1ToUmpBankLsbAndProgramChange();
    method public void testConvertMidi1ToUmpBankMsbAndProgramChange();
    method public void testConvertMidi1ToUmpBankMsbLsbAndProgramChange();
    method public void testConvertMidi1ToUmpCAf();
    method public void testConvertMidi1ToUmpInvalidNRPN();
    method public void testConvertMidi1ToUmpInvalidRPN();
    method public void testConvertMidi1ToUmpNoteOn();
    method public void testConvertMidi1ToUmpPAf();
    method public void testConvertMidi1ToUmpPitchBend();
    method public void testConvertMidi1ToUmpSimpleCC();
    method public void testConvertMidi1ToUmpSimpleProgramChange();
    method public void testConvertMidi1ToUmpValidNRPN();
    method public void testConvertMidi1ToUmpValidRPN();
    method public void testConvertSingleUmpToMidi1();
    method public void testConvertUmpToMidi1Bytes1();
    method public void testConvertUmpToMidi1Bytes2();
  }

  public class VirtualMidiPlayerTimer implements dev.atsushieno.ktmidi.MidiPlayerTimer {
    ctor public VirtualMidiPlayerTimer();
    method public final double getTotalProceededSeconds();
    method public final double getTotalWaitedSeconds();
    method public void proceedBySeconds(double addedSeconds);
    method public final void setTotalProceededSeconds(double);
    method public final void setTotalWaitedSeconds(double);
    method public void stop();
    method public suspend Object? waitBySeconds(double addedSeconds, kotlin.coroutines.Continuation<? super kotlin.Unit>);
    property public final double totalProceededSeconds;
    property public final double totalWaitedSeconds;
  }

  public final class WellKnownNames {
    method public java.util.Map<java.lang.Integer,java.lang.String> getCcFullNames();
    method public java.util.Map<java.lang.Integer,java.lang.String> getCcNames();
    property public final java.util.Map<java.lang.Integer,java.lang.String> ccFullNames;
    property public final java.util.Map<java.lang.Integer,java.lang.String> ccNames;
    field public static final dev.atsushieno.ktmidi.WellKnownNames INSTANCE;
  }

}

