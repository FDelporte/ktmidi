package dev.atsushieno.ktmidi {

  public final class AndroidMidiAccess extends dev.atsushieno.ktmidi.MidiAccess {
    ctor public AndroidMidiAccess(@NonNull android.content.Context applicationContext);
    method @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method @NonNull public String getName();
    method @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method @Nullable public suspend Object openInput(@NonNull String portId, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput> p);
    method @Nullable public suspend Object openOutput(@NonNull String portId, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput> p);
    property @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property @NonNull public String name;
    property @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
  }

  public final class ChordAlterationType {
    field public static final byte ADD_DEGREE = 16; // 0x10
    field @NonNull public static final dev.atsushieno.ktmidi.ChordAlterationType INSTANCE;
    field public static final byte LOWER_DEGREE = 64; // 0x40
    field public static final byte NO_ALTERATION = 0; // 0x0
    field public static final byte RAISE_DEGREE = 48; // 0x30
    field public static final byte SUBTRACT_DEGREE = 32; // 0x20
  }

  public final class ChordSharpFlatsField {
    field public static final byte BASS_NOTE_AS_CHORD_TONIC_NOTE = -8; // 0xfffffff8
    field public static final byte DOUBLE_FLAT = -2; // 0xfffffffe
    field public static final byte DOUBLE_SHARP = 2; // 0x2
    field public static final byte FLAT = -1; // 0xffffffff
    field @NonNull public static final dev.atsushieno.ktmidi.ChordSharpFlatsField INSTANCE;
    field public static final byte NATURAL = 0; // 0x0
    field public static final byte SHARP = 1; // 0x1
  }

  public final class ChordTypeField {
    field public static final byte AUGMENTED = 17; // 0x11
    field public static final byte AUGMENTED_7TH = 18; // 0x12
    field public static final byte CLEAR_CHORD = 0; // 0x0
    field public static final byte DIMINISHED = 19; // 0x13
    field public static final byte DIMINISHED_7TH = 20; // 0x14
    field public static final byte DOMINANT = 13; // 0xd
    field public static final byte DOMINANT_11TH = 15; // 0xf
    field public static final byte DOMINANT_13TH = 16; // 0x10
    field public static final byte DOMINANT_9TH = 14; // 0xe
    field public static final byte HALF_DIMINISHED = 21; // 0x15
    field @NonNull public static final dev.atsushieno.ktmidi.ChordTypeField INSTANCE;
    field public static final byte MAJOR = 1; // 0x1
    field public static final byte MAJOR_11TH = 5; // 0x5
    field public static final byte MAJOR_13TH = 6; // 0x6
    field public static final byte MAJOR_6TH = 2; // 0x2
    field public static final byte MAJOR_7TH = 3; // 0x3
    field public static final byte MAJOR_9TH = 4; // 0x4
    field public static final byte MAJOR_MINOR = 22; // 0x16
    field public static final byte MINOR = 7; // 0x7
    field public static final byte MINOR_11TH = 11; // 0xb
    field public static final byte MINOR_13TH = 12; // 0xc
    field public static final byte MINOR_6TH = 8; // 0x8
    field public static final byte MINOR_7TH = 9; // 0x9
    field public static final byte MINOR_9TH = 10; // 0xa
    field public static final byte MINOR_MAJOR = 22; // 0x16
    field public static final byte NO_CHORD = 0; // 0x0
    field public static final byte PEDAL = 23; // 0x17
    field public static final byte POWER = 24; // 0x18
    field public static final byte SEVENTH_SUSPENDED_4TH = 27; // 0x1b
    field public static final byte SUSPENDED_2ND = 25; // 0x19
    field public static final byte SUSPENDED_4TH = 26; // 0x1a
  }

  public final class Dc {
    ctor public Dc(int value);
    method public int component1();
    method @NonNull public dev.atsushieno.ktmidi.Dc copy(int value);
    method public int getValue();
    property public final int value;
  }

  public final class DefaultMidiModuleDatabase extends dev.atsushieno.ktmidi.MidiModuleDatabase {
    ctor public DefaultMidiModuleDatabase();
    method @NonNull public Iterable<dev.atsushieno.ktmidi.MidiModuleDefinition> all();
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.MidiModuleDefinition> getModules();
    method @NonNull public dev.atsushieno.ktmidi.MidiModuleDefinition resolve(@NonNull String moduleName);
    method @NonNull public String resolvePossibleAlias(@NonNull String name);
    property @NonNull public final java.util.List<dev.atsushieno.ktmidi.MidiModuleDefinition> modules;
    field @NonNull public static final dev.atsushieno.ktmidi.DefaultMidiModuleDatabase.Companion Companion;
  }

  public static final class DefaultMidiModuleDatabase.Companion {
    method @NonNull public java.io.InputStream getResource(@NonNull String name);
  }

  public enum DteTarget {
    enum_constant public static final dev.atsushieno.ktmidi.DteTarget NRPN;
    enum_constant public static final dev.atsushieno.ktmidi.DteTarget RPN;
  }

  public final class EmptyMidiAccess extends dev.atsushieno.ktmidi.MidiAccess {
    ctor public EmptyMidiAccess();
    method @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method @NonNull public String getName();
    method @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method @Nullable public suspend Object openInput(@NonNull String portId, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput> p);
    method @Nullable public suspend Object openOutput(@NonNull String portId, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput> p);
    property @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property @NonNull public String name;
    property @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
  }

  public final class FlexDataAddress {
    field public static final byte CHANNEL_FIELD = 0; // 0x0
    field public static final byte GROUP = 1; // 0x1
    field @NonNull public static final dev.atsushieno.ktmidi.FlexDataAddress INSTANCE;
  }

  public final class FlexDataStatus {
    field public static final byte CHORD_NAME = 6; // 0x6
    field @NonNull public static final dev.atsushieno.ktmidi.FlexDataStatus INSTANCE;
    field public static final byte KEY_SIGNATURE = 5; // 0x5
    field public static final byte METRONOME = 2; // 0x2
    field public static final byte TEMPO = 0; // 0x0
    field public static final byte TIME_SIGNATURE = 1; // 0x1
  }

  public final class FlexDataStatusBank {
    field @NonNull public static final dev.atsushieno.ktmidi.FlexDataStatusBank INSTANCE;
    field public static final byte METADATA_TEXT = 1; // 0x1
    field public static final byte PERFORMANCE_TEXT = 2; // 0x2
    field public static final byte SETUP_AND_PERFORMANCE = 0; // 0x0
  }

  public final class FunctionBlockDirection {
    field public static final int BIDIRECTIONAL = 3; // 0x3
    field public static final int INPUT = 1; // 0x1
    field @NonNull public static final dev.atsushieno.ktmidi.FunctionBlockDirection INSTANCE;
    field public static final int OUTPUT = 2; // 0x2
  }

  public final class FunctionBlockMidi1Bandwidth {
    field @NonNull public static final dev.atsushieno.ktmidi.FunctionBlockMidi1Bandwidth INSTANCE;
    field public static final int NOT_AVAILABLE = 0; // 0x0
    field public static final int NO_LIMITATION = 1; // 0x1
    field public static final int UP_TO_31250BPS = 2; // 0x2
  }

  public final class FunctionBlockUiHint {
    field public static final int BOTH = 3; // 0x3
    field @NonNull public static final dev.atsushieno.ktmidi.FunctionBlockUiHint INSTANCE;
    field public static final int RECEIVER = 1; // 0x1
    field public static final int SENDER = 2; // 0x2
    field public static final int UNKNOWN = 0; // 0x0
  }

  @Deprecated public final class GeneralMidi {
    ctor @Deprecated public GeneralMidi();
    field @Deprecated @NonNull public static final dev.atsushieno.ktmidi.GeneralMidi.Companion Companion;
  }

  @Deprecated public static final class GeneralMidi.Companion {
    method @Deprecated @NonNull public String[] getDRUM_KITS_GM2();
    method @Deprecated @NonNull public String[] getINSTRUMENT_CATEGORIES();
    method @Deprecated @NonNull public String[] getINSTRUMENT_NAMES();
    property @NonNull public final String[] DRUM_KITS_GM2;
    property @NonNull public final String[] INSTRUMENT_CATEGORIES;
    property @NonNull public final String[] INSTRUMENT_NAMES;
  }

  @Deprecated public static final class GeneralMidi.Companion.Instruments {
    ctor @Deprecated public GeneralMidi.Companion.Instruments();
    field @Deprecated public static final int ACCORDION = 21; // 0x15
    field @Deprecated public static final int ACOUSTIC_BASS = 32; // 0x20
    field @Deprecated public static final int ACOUSTIC_GRAND_PIANO = 0; // 0x0
    field @Deprecated public static final int ACOUSTIC_GUITAR_NYLON = 24; // 0x18
    field @Deprecated public static final int ACOUSTIC_GUITAR_STEEL = 25; // 0x19
    field @Deprecated public static final int AGOGO = 113; // 0x71
    field @Deprecated public static final int ALTO_SAX = 65; // 0x41
    field @Deprecated public static final int APPLAUSE = 126; // 0x7e
    field @Deprecated public static final int BAGPIPE = 109; // 0x6d
    field @Deprecated public static final int BANJO = 105; // 0x69
    field @Deprecated public static final int BARITONE_SAX = 67; // 0x43
    field @Deprecated public static final int BASSOON = 70; // 0x46
    field @Deprecated public static final int BIRD_TWEET = 123; // 0x7b
    field @Deprecated public static final int BLOWN_BOTTLE = 76; // 0x4c
    field @Deprecated public static final int BRASS_SECTION = 61; // 0x3d
    field @Deprecated public static final int BREATH_NOISE = 121; // 0x79
    field @Deprecated public static final int BRIGHT_ACOUSTIC_PIANO = 1; // 0x1
    field @Deprecated public static final int CELESTA = 8; // 0x8
    field @Deprecated public static final int CELLO = 42; // 0x2a
    field @Deprecated public static final int CHOIR_AAHS = 52; // 0x34
    field @Deprecated public static final int CHURCH_ORGAN = 29; // 0x1d
    field @Deprecated public static final int CLARINET = 71; // 0x47
    field @Deprecated public static final int CLAVI = 7; // 0x7
    field @Deprecated public static final int CONTRABASS = 43; // 0x2b
    field @Deprecated @NonNull public static final dev.atsushieno.ktmidi.GeneralMidi.Companion.Instruments.Companion Companion;
    field @Deprecated public static final int DISTORTION_GUITAR = 30; // 0x1e
    field @Deprecated public static final int DRAWBAR_ORGAN = 16; // 0x10
    field @Deprecated public static final int DULCIMER = 15; // 0xf
    field @Deprecated public static final int ELECTRIC_BASS_FINGER = 33; // 0x21
    field @Deprecated public static final int ELECTRIC_BASS_PICK = 34; // 0x22
    field @Deprecated public static final int ELECTRIC_GRAND_PIANO = 2; // 0x2
    field @Deprecated public static final int ELECTRIC_GUITAR_CLEAN = 27; // 0x1b
    field @Deprecated public static final int ELECTRIC_GUITAR_JAZZ = 26; // 0x1a
    field @Deprecated public static final int ELECTRIC_GUITAR_MUTED = 28; // 0x1c
    field @Deprecated public static final int ELECTRIC_PIANO_1 = 4; // 0x4
    field @Deprecated public static final int ELECTRIC_PIANO_2 = 5; // 0x5
    field @Deprecated public static final int ENGLISH_HORN = 69; // 0x45
    field @Deprecated public static final int FIDDLE = 110; // 0x6e
    field @Deprecated public static final int FLUTE = 73; // 0x49
    field @Deprecated public static final int FRENCH_HORN = 60; // 0x3c
    field @Deprecated public static final int FRETLESS_BASS = 35; // 0x23
    field @Deprecated public static final int FX_ATMOSPHERE = 99; // 0x63
    field @Deprecated public static final int FX_BRIGHTNESS = 100; // 0x64
    field @Deprecated public static final int FX_CRYSTAL = 98; // 0x62
    field @Deprecated public static final int FX_ECHOES = 102; // 0x66
    field @Deprecated public static final int FX_GOBLINS = 101; // 0x65
    field @Deprecated public static final int FX_RAIN = 96; // 0x60
    field @Deprecated public static final int FX_SCIFI = 103; // 0x67
    field @Deprecated public static final int FX_SOUNDTRACK = 97; // 0x61
    field @Deprecated public static final int GLOCKENSPIEL = 9; // 0x9
    field @Deprecated public static final int GUITARHARMONICS = 31; // 0x1f
    field @Deprecated public static final int GUITAR_FRET_NOISE = 120; // 0x78
    field @Deprecated public static final int GUNSHOT = 127; // 0x7f
    field @Deprecated public static final int HARMONICA = 22; // 0x16
    field @Deprecated public static final int HARPSICHORD = 6; // 0x6
    field @Deprecated public static final int HELICOPTER = 125; // 0x7d
    field @Deprecated public static final int HONKYTONK_PIANO = 3; // 0x3
    field @Deprecated public static final int KALIMBA = 108; // 0x6c
    field @Deprecated public static final int KOTO = 107; // 0x6b
    field @Deprecated public static final int LEAD_BASS_AND_LEAD = 87; // 0x57
    field @Deprecated public static final int LEAD_CALLIOPE = 82; // 0x52
    field @Deprecated public static final int LEAD_CHARANG = 84; // 0x54
    field @Deprecated public static final int LEAD_CHIFF = 83; // 0x53
    field @Deprecated public static final int LEAD_FIFTHS = 86; // 0x56
    field @Deprecated public static final int LEAD_SAWTOOTH = 81; // 0x51
    field @Deprecated public static final int LEAD_SQUARE = 80; // 0x50
    field @Deprecated public static final int LEAD_VOICE = 85; // 0x55
    field @Deprecated public static final int MARIMBA = 12; // 0xc
    field @Deprecated public static final int MELODIC_TOM = 117; // 0x75
    field @Deprecated public static final int MUSIC_BOX = 10; // 0xa
    field @Deprecated public static final int MUTED_TRUMPET = 59; // 0x3b
    field @Deprecated public static final int OBOE = 68; // 0x44
    field @Deprecated public static final int OCARINA = 79; // 0x4f
    field @Deprecated public static final int ORCHESTRAL_HARP = 46; // 0x2e
    field @Deprecated public static final int ORCHESTRA_HIT = 55; // 0x37
    field @Deprecated public static final int OVERDRIVEN_GUITAR = 29; // 0x1d
    field @Deprecated public static final int PAD_BOWED = 92; // 0x5c
    field @Deprecated public static final int PAD_CHOIR = 91; // 0x5b
    field @Deprecated public static final int PAD_HALO = 94; // 0x5e
    field @Deprecated public static final int PAD_METALLIC = 93; // 0x5d
    field @Deprecated public static final int PAD_NEWAGE = 88; // 0x58
    field @Deprecated public static final int PAD_POLYSYNTH = 90; // 0x5a
    field @Deprecated public static final int PAD_SWEEP = 95; // 0x5f
    field @Deprecated public static final int PAD_WARM = 89; // 0x59
    field @Deprecated public static final int PAN_FLUTE = 75; // 0x4b
    field @Deprecated public static final int PERCUSSIVE_ORGAN = 17; // 0x11
    field @Deprecated public static final int PICCOLO = 72; // 0x48
    field @Deprecated public static final int PIZZICATO_STRINGS = 45; // 0x2d
    field @Deprecated public static final int RECORDER = 74; // 0x4a
    field @Deprecated public static final int REED_ORGAN = 20; // 0x14
    field @Deprecated public static final int REVERSE_CYMBAL = 119; // 0x77
    field @Deprecated public static final int ROCK_ORGAN = 18; // 0x12
    field @Deprecated public static final int SEASHORE = 122; // 0x7a
    field @Deprecated public static final int SHAKUHACHI = 77; // 0x4d
    field @Deprecated public static final int SHAMISEN = 106; // 0x6a
    field @Deprecated public static final int SHANAI = 111; // 0x6f
    field @Deprecated public static final int SITAR = 104; // 0x68
    field @Deprecated public static final int SLAP_BASS_1 = 36; // 0x24
    field @Deprecated public static final int SLAP_BASS_2 = 37; // 0x25
    field @Deprecated public static final int SOPRANO_SAX = 64; // 0x40
    field @Deprecated public static final int STEEL_DRUMS = 114; // 0x72
    field @Deprecated public static final int STRING_ENSEMBLE_1 = 48; // 0x30
    field @Deprecated public static final int STRING_ENSEMBLE_2 = 49; // 0x31
    field @Deprecated public static final int SYNTH_BASS_1 = 38; // 0x26
    field @Deprecated public static final int SYNTH_BASS_2 = 39; // 0x27
    field @Deprecated public static final int SYNTH_BRASS_1 = 62; // 0x3e
    field @Deprecated public static final int SYNTH_BRASS_2 = 63; // 0x3f
    field @Deprecated public static final int SYNTH_DRUM = 118; // 0x76
    field @Deprecated public static final int SYNTH_STRINGS_1 = 50; // 0x32
    field @Deprecated public static final int SYNTH_STRINGS_2 = 51; // 0x33
    field @Deprecated public static final int SYNTH_VOICE = 54; // 0x36
    field @Deprecated public static final int TAIKO_DRUM = 116; // 0x74
    field @Deprecated public static final int TANGO_ACCORDION = 23; // 0x17
    field @Deprecated public static final int TELEPHONE_RING = 124; // 0x7c
    field @Deprecated public static final int TENOR_SAX = 66; // 0x42
    field @Deprecated public static final int TIMPANI = 47; // 0x2f
    field @Deprecated public static final int TINKLE_BELL = 112; // 0x70
    field @Deprecated public static final int TREMOLO_STRINGS = 44; // 0x2c
    field @Deprecated public static final int TROMBONE = 57; // 0x39
    field @Deprecated public static final int TRUMPET = 56; // 0x38
    field @Deprecated public static final int TUBA = 58; // 0x3a
    field @Deprecated public static final int TUBULAR_BELLS = 14; // 0xe
    field @Deprecated public static final int VIBRAPHONE = 11; // 0xb
    field @Deprecated public static final int VIOLA = 41; // 0x29
    field @Deprecated public static final int VIOLIN = 40; // 0x28
    field @Deprecated public static final int VOICE_OOHS = 53; // 0x35
    field @Deprecated public static final int WHISTLE = 78; // 0x4e
    field @Deprecated public static final int WOODBLOCK = 115; // 0x73
    field @Deprecated public static final int XYLOPHONE = 13; // 0xd
  }

  @Deprecated public static final class GeneralMidi.Companion.Instruments.Companion {
  }

  @Deprecated public static final class GeneralMidi.Companion.Percussions {
    ctor @Deprecated public GeneralMidi.Companion.Percussions();
    field @Deprecated public static final int ACOUSTIC_BASS_DRUM = 34; // 0x22
    field @Deprecated public static final int ACOUSTIC_SNARE = 37; // 0x25
    field @Deprecated public static final int BASS_DRUM_1 = 35; // 0x23
    field @Deprecated public static final int CABASA = 68; // 0x44
    field @Deprecated public static final int CHINESE_CYMBAL = 51; // 0x33
    field @Deprecated public static final int CLAVES = 74; // 0x4a
    field @Deprecated public static final int CLOSED_HI_HAT = 41; // 0x29
    field @Deprecated public static final int COWBELL = 55; // 0x37
    field @Deprecated public static final int CRASH_CYMBAL_1 = 48; // 0x30
    field @Deprecated public static final int CRASH_CYMBAL_2 = 56; // 0x38
    field @Deprecated @NonNull public static final dev.atsushieno.ktmidi.GeneralMidi.Companion.Percussions.Companion Companion;
    field @Deprecated public static final int ELECTRIC_SNARE = 39; // 0x27
    field @Deprecated public static final int HAND_CLAP = 38; // 0x26
    field @Deprecated public static final int HIGH_AGOGO = 66; // 0x42
    field @Deprecated public static final int HIGH_FLOOR_TOM = 42; // 0x2a
    field @Deprecated public static final int HIGH_TIMBALE = 64; // 0x40
    field @Deprecated public static final int HIGH_TOM = 49; // 0x31
    field @Deprecated public static final int HI_BONGO = 59; // 0x3b
    field @Deprecated public static final int HI_MID_TOM = 47; // 0x2f
    field @Deprecated public static final int HI_WOOD_BLOCK = 75; // 0x4b
    field @Deprecated public static final int LONG_GUIRO = 73; // 0x49
    field @Deprecated public static final int LONG_WHISTLE = 71; // 0x47
    field @Deprecated public static final int LOW_AGOGO = 67; // 0x43
    field @Deprecated public static final int LOW_BONGO = 60; // 0x3c
    field @Deprecated public static final int LOW_CONGA = 63; // 0x3f
    field @Deprecated public static final int LOW_FLOOR_TOM = 40; // 0x28
    field @Deprecated public static final int LOW_MID_TOM = 46; // 0x2e
    field @Deprecated public static final int LOW_TIMBALE = 65; // 0x41
    field @Deprecated public static final int LOW_TOM = 44; // 0x2c
    field @Deprecated public static final int LOW_WOOD_BLOCK = 76; // 0x4c
    field @Deprecated public static final int MARACAS = 69; // 0x45
    field @Deprecated public static final int MUTE_CUICA = 77; // 0x4d
    field @Deprecated public static final int MUTE_HI_CONGA = 61; // 0x3d
    field @Deprecated public static final int MUTE_TRIANGLE = 79; // 0x4f
    field @Deprecated public static final int OPEN_CUICA = 78; // 0x4e
    field @Deprecated public static final int OPEN_HI_CONGA = 62; // 0x3e
    field @Deprecated public static final int OPEN_HI_HAT = 45; // 0x2d
    field @Deprecated public static final int OPEN_TRIANGLE = 80; // 0x50
    field @Deprecated public static final int PEDAL_HI_HAT = 43; // 0x2b
    field @Deprecated public static final int RIDE_BELL = 52; // 0x34
    field @Deprecated public static final int RIDE_CYMBAL_1 = 50; // 0x32
    field @Deprecated public static final int RIDE_CYMBAL_2 = 58; // 0x3a
    field @Deprecated public static final int SHORT_GUIRO = 72; // 0x48
    field @Deprecated public static final int SHORT_WHISTLE = 70; // 0x46
    field @Deprecated public static final int SIDE_STICK = 36; // 0x24
    field @Deprecated public static final int SPLASH_CYMBAL = 54; // 0x36
    field @Deprecated public static final int TAMBOURINE = 53; // 0x35
    field @Deprecated public static final int VIBRASLAP = 57; // 0x39
  }

  @Deprecated public static final class GeneralMidi.Companion.Percussions.Companion {
  }

  public final class GeneralMidi2 {
    method @NonNull public String[] getCategories();
    method @NonNull public String[] getDrumkits();
    method @NonNull public String[] getInstrumentNames();
    property @NonNull public final String[] categories;
    property @NonNull public final String[] drumkits;
    property @NonNull public final String[] instrumentNames;
    field @NonNull public static final dev.atsushieno.ktmidi.GeneralMidi2 INSTANCE;
  }

  public static final class GeneralMidi2.Instruments {
    field public static final int ACCORDION = 21; // 0x15
    field public static final int ACOUSTIC_BASS = 32; // 0x20
    field public static final int ACOUSTIC_GRAND_PIANO = 0; // 0x0
    field public static final int ACOUSTIC_GUITAR_NYLON = 24; // 0x18
    field public static final int ACOUSTIC_GUITAR_STEEL = 25; // 0x19
    field public static final int AGOGO = 113; // 0x71
    field public static final int ALTO_SAX = 65; // 0x41
    field public static final int APPLAUSE = 126; // 0x7e
    field public static final int BAGPIPE = 109; // 0x6d
    field public static final int BANJO = 105; // 0x69
    field public static final int BARITONE_SAX = 67; // 0x43
    field public static final int BASSOON = 70; // 0x46
    field public static final int BIRD_TWEET = 123; // 0x7b
    field public static final int BLOWN_BOTTLE = 76; // 0x4c
    field public static final int BRASS_SECTION = 61; // 0x3d
    field public static final int BREATH_NOISE = 121; // 0x79
    field public static final int BRIGHT_ACOUSTIC_PIANO = 1; // 0x1
    field public static final int CELESTA = 8; // 0x8
    field public static final int CELLO = 42; // 0x2a
    field public static final int CHOIR_AAHS = 52; // 0x34
    field public static final int CHURCH_ORGAN = 29; // 0x1d
    field public static final int CLARINET = 71; // 0x47
    field public static final int CLAVI = 7; // 0x7
    field public static final int CONTRABASS = 43; // 0x2b
    field public static final int DISTORTION_GUITAR = 30; // 0x1e
    field public static final int DRAWBAR_ORGAN = 16; // 0x10
    field public static final int DULCIMER = 15; // 0xf
    field public static final int ELECTRIC_BASS_FINGER = 33; // 0x21
    field public static final int ELECTRIC_BASS_PICK = 34; // 0x22
    field public static final int ELECTRIC_GRAND_PIANO = 2; // 0x2
    field public static final int ELECTRIC_GUITAR_CLEAN = 27; // 0x1b
    field public static final int ELECTRIC_GUITAR_JAZZ = 26; // 0x1a
    field public static final int ELECTRIC_GUITAR_MUTED = 28; // 0x1c
    field public static final int ELECTRIC_PIANO_1 = 4; // 0x4
    field public static final int ELECTRIC_PIANO_2 = 5; // 0x5
    field public static final int ENGLISH_HORN = 69; // 0x45
    field public static final int FIDDLE = 110; // 0x6e
    field public static final int FLUTE = 73; // 0x49
    field public static final int FRENCH_HORN = 60; // 0x3c
    field public static final int FRETLESS_BASS = 35; // 0x23
    field public static final int FX_ATMOSPHERE = 99; // 0x63
    field public static final int FX_BRIGHTNESS = 100; // 0x64
    field public static final int FX_CRYSTAL = 98; // 0x62
    field public static final int FX_ECHOES = 102; // 0x66
    field public static final int FX_GOBLINS = 101; // 0x65
    field public static final int FX_RAIN = 96; // 0x60
    field public static final int FX_SCIFI = 103; // 0x67
    field public static final int FX_SOUNDTRACK = 97; // 0x61
    field public static final int GLOCKENSPIEL = 9; // 0x9
    field public static final int GUITARHARMONICS = 31; // 0x1f
    field public static final int GUITAR_FRET_NOISE = 120; // 0x78
    field public static final int GUNSHOT = 127; // 0x7f
    field public static final int HARMONICA = 22; // 0x16
    field public static final int HARPSICHORD = 6; // 0x6
    field public static final int HELICOPTER = 125; // 0x7d
    field public static final int HONKYTONK_PIANO = 3; // 0x3
    field @NonNull public static final dev.atsushieno.ktmidi.GeneralMidi2.Instruments INSTANCE;
    field public static final int KALIMBA = 108; // 0x6c
    field public static final int KOTO = 107; // 0x6b
    field public static final int LEAD_BASS_AND_LEAD = 87; // 0x57
    field public static final int LEAD_CALLIOPE = 82; // 0x52
    field public static final int LEAD_CHARANG = 84; // 0x54
    field public static final int LEAD_CHIFF = 83; // 0x53
    field public static final int LEAD_FIFTHS = 86; // 0x56
    field public static final int LEAD_SAWTOOTH = 81; // 0x51
    field public static final int LEAD_SQUARE = 80; // 0x50
    field public static final int LEAD_VOICE = 85; // 0x55
    field public static final int MARIMBA = 12; // 0xc
    field public static final int MELODIC_TOM = 117; // 0x75
    field public static final int MUSIC_BOX = 10; // 0xa
    field public static final int MUTED_TRUMPET = 59; // 0x3b
    field public static final int OBOE = 68; // 0x44
    field public static final int OCARINA = 79; // 0x4f
    field public static final int ORCHESTRAL_HARP = 46; // 0x2e
    field public static final int ORCHESTRA_HIT = 55; // 0x37
    field public static final int OVERDRIVEN_GUITAR = 29; // 0x1d
    field public static final int PAD_BOWED = 92; // 0x5c
    field public static final int PAD_CHOIR = 91; // 0x5b
    field public static final int PAD_HALO = 94; // 0x5e
    field public static final int PAD_METALLIC = 93; // 0x5d
    field public static final int PAD_NEWAGE = 88; // 0x58
    field public static final int PAD_POLYSYNTH = 90; // 0x5a
    field public static final int PAD_SWEEP = 95; // 0x5f
    field public static final int PAD_WARM = 89; // 0x59
    field public static final int PAN_FLUTE = 75; // 0x4b
    field public static final int PERCUSSIVE_ORGAN = 17; // 0x11
    field public static final int PICCOLO = 72; // 0x48
    field public static final int PIZZICATO_STRINGS = 45; // 0x2d
    field public static final int RECORDER = 74; // 0x4a
    field public static final int REED_ORGAN = 20; // 0x14
    field public static final int REVERSE_CYMBAL = 119; // 0x77
    field public static final int ROCK_ORGAN = 18; // 0x12
    field public static final int SEASHORE = 122; // 0x7a
    field public static final int SHAKUHACHI = 77; // 0x4d
    field public static final int SHAMISEN = 106; // 0x6a
    field public static final int SHANAI = 111; // 0x6f
    field public static final int SITAR = 104; // 0x68
    field public static final int SLAP_BASS_1 = 36; // 0x24
    field public static final int SLAP_BASS_2 = 37; // 0x25
    field public static final int SOPRANO_SAX = 64; // 0x40
    field public static final int STEEL_DRUMS = 114; // 0x72
    field public static final int STRING_ENSEMBLE_1 = 48; // 0x30
    field public static final int STRING_ENSEMBLE_2 = 49; // 0x31
    field public static final int SYNTH_BASS_1 = 38; // 0x26
    field public static final int SYNTH_BASS_2 = 39; // 0x27
    field public static final int SYNTH_BRASS_1 = 62; // 0x3e
    field public static final int SYNTH_BRASS_2 = 63; // 0x3f
    field public static final int SYNTH_DRUM = 118; // 0x76
    field public static final int SYNTH_STRINGS_1 = 50; // 0x32
    field public static final int SYNTH_STRINGS_2 = 51; // 0x33
    field public static final int SYNTH_VOICE = 54; // 0x36
    field public static final int TAIKO_DRUM = 116; // 0x74
    field public static final int TANGO_ACCORDION = 23; // 0x17
    field public static final int TELEPHONE_RING = 124; // 0x7c
    field public static final int TENOR_SAX = 66; // 0x42
    field public static final int TIMPANI = 47; // 0x2f
    field public static final int TINKLE_BELL = 112; // 0x70
    field public static final int TREMOLO_STRINGS = 44; // 0x2c
    field public static final int TROMBONE = 57; // 0x39
    field public static final int TRUMPET = 56; // 0x38
    field public static final int TUBA = 58; // 0x3a
    field public static final int TUBULAR_BELLS = 14; // 0xe
    field public static final int VIBRAPHONE = 11; // 0xb
    field public static final int VIOLA = 41; // 0x29
    field public static final int VIOLIN = 40; // 0x28
    field public static final int VOICE_OOHS = 53; // 0x35
    field public static final int WHISTLE = 78; // 0x4e
    field public static final int WOODBLOCK = 115; // 0x73
    field public static final int XYLOPHONE = 13; // 0xd
  }

  public static final class GeneralMidi2.Percussions {
    field public static final int ACOUSTIC_BASS_DRUM = 34; // 0x22
    field public static final int ACOUSTIC_SNARE = 37; // 0x25
    field public static final int BASS_DRUM_1 = 35; // 0x23
    field public static final int CABASA = 68; // 0x44
    field public static final int CHINESE_CYMBAL = 51; // 0x33
    field public static final int CLAVES = 74; // 0x4a
    field public static final int CLOSED_HI_HAT = 41; // 0x29
    field public static final int COWBELL = 55; // 0x37
    field public static final int CRASH_CYMBAL_1 = 48; // 0x30
    field public static final int CRASH_CYMBAL_2 = 56; // 0x38
    field public static final int ELECTRIC_SNARE = 39; // 0x27
    field public static final int HAND_CLAP = 38; // 0x26
    field public static final int HIGH_AGOGO = 66; // 0x42
    field public static final int HIGH_FLOOR_TOM = 42; // 0x2a
    field public static final int HIGH_TIMBALE = 64; // 0x40
    field public static final int HIGH_TOM = 49; // 0x31
    field public static final int HI_BONGO = 59; // 0x3b
    field public static final int HI_MID_TOM = 47; // 0x2f
    field public static final int HI_WOOD_BLOCK = 75; // 0x4b
    field @NonNull public static final dev.atsushieno.ktmidi.GeneralMidi2.Percussions INSTANCE;
    field public static final int LONG_GUIRO = 73; // 0x49
    field public static final int LONG_WHISTLE = 71; // 0x47
    field public static final int LOW_AGOGO = 67; // 0x43
    field public static final int LOW_BONGO = 60; // 0x3c
    field public static final int LOW_CONGA = 63; // 0x3f
    field public static final int LOW_FLOOR_TOM = 40; // 0x28
    field public static final int LOW_MID_TOM = 46; // 0x2e
    field public static final int LOW_TIMBALE = 65; // 0x41
    field public static final int LOW_TOM = 44; // 0x2c
    field public static final int LOW_WOOD_BLOCK = 76; // 0x4c
    field public static final int MARACAS = 69; // 0x45
    field public static final int MUTE_CUICA = 77; // 0x4d
    field public static final int MUTE_HI_CONGA = 61; // 0x3d
    field public static final int MUTE_TRIANGLE = 79; // 0x4f
    field public static final int OPEN_CUICA = 78; // 0x4e
    field public static final int OPEN_HI_CONGA = 62; // 0x3e
    field public static final int OPEN_HI_HAT = 45; // 0x2d
    field public static final int OPEN_TRIANGLE = 80; // 0x50
    field public static final int PEDAL_HI_HAT = 43; // 0x2b
    field public static final int RIDE_BELL = 52; // 0x34
    field public static final int RIDE_CYMBAL_1 = 50; // 0x32
    field public static final int RIDE_CYMBAL_2 = 58; // 0x3a
    field public static final int SHORT_GUIRO = 72; // 0x48
    field public static final int SHORT_WHISTLE = 70; // 0x46
    field public static final int SIDE_STICK = 36; // 0x24
    field public static final int SPLASH_CYMBAL = 54; // 0x36
    field public static final int TAMBOURINE = 53; // 0x35
    field public static final int VIBRASLAP = 57; // 0x39
  }

  public final class JvmMidiAccess extends dev.atsushieno.ktmidi.MidiAccess {
    ctor public JvmMidiAccess();
    method @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method @NonNull public String getName();
    method @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method @Nullable public suspend Object openInput(@NonNull String portId, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput> p);
    method @Nullable public suspend Object openOutput(@NonNull String portId, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput> p);
    property @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property @NonNull public String name;
    property @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
  }

  public final class JvmMidiAccessKt {
  }

  public final class JzzMidiAccess extends dev.atsushieno.ktmidi.MidiAccess {
    method @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method @NonNull public String getName();
    method @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method public boolean getUseSysex();
    method @Nullable public suspend Object openInput(@NonNull String portId, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput> p);
    method @Nullable public suspend Object openOutput(@NonNull String portId, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput> p);
    property @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property @NonNull public String name;
    property @NonNull public Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
    property public final boolean useSysex;
    field @NonNull public static final dev.atsushieno.ktmidi.JzzMidiAccess.Companion Companion;
  }

  public static final class JzzMidiAccess.Companion {
    method @Nullable public suspend Object create(boolean useSysex, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.JzzMidiAccess> p);
  }

  public final class JzzMidiAccessKt {
  }

  public final class JzzMidiAccessTest {
    ctor public JzzMidiAccessTest();
    method public error.NonExistentClass create();
    method public error.NonExistentClass input();
    method public error.NonExistentClass output();
  }

  public final class MergedMidiModuleDatabase extends dev.atsushieno.ktmidi.MidiModuleDatabase {
    ctor public MergedMidiModuleDatabase(@NonNull Iterable<? extends dev.atsushieno.ktmidi.MidiModuleDatabase> sources);
    method @NonNull public Iterable<dev.atsushieno.ktmidi.MidiModuleDefinition> all();
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.MidiModuleDatabase> getList();
    method @NonNull public dev.atsushieno.ktmidi.MidiModuleDefinition resolve(@NonNull String moduleName);
    property @NonNull public final java.util.List<dev.atsushieno.ktmidi.MidiModuleDatabase> list;
  }

  public final class MetadataTextStatus {
    field public static final byte ACCOMPANYING_PERFORMER = 10; // 0xa
    field public static final byte ARRANGER = 7; // 0x7
    field public static final byte AUTHOR = 5; // 0x5
    field public static final byte COMPOSITION_NAME = 2; // 0x2
    field public static final byte COPYRIGHT = 4; // 0x4
    field @NonNull public static final dev.atsushieno.ktmidi.MetadataTextStatus INSTANCE;
    field public static final byte LYRICIST = 6; // 0x6
    field public static final byte MIDI_CLIP_NAME = 3; // 0x3
    field public static final byte PRIMARY_PERFORMER = 9; // 0x9
    field public static final byte PROJECT_NAME = 1; // 0x1
    field public static final byte PUBLISHER = 8; // 0x8
    field public static final byte RECORDING_CONCERT_DATE = 11; // 0xb
    field public static final byte RECORDING_CONCERT_LOCATION = 12; // 0xc
    field public static final byte UNKNOWN = 0; // 0x0
  }

  public final class Midi1CompoundMessage implements dev.atsushieno.ktmidi.Midi1Message {
    ctor public Midi1CompoundMessage(int type, int arg1, int arg2, optional @Nullable byte[] extraData, optional int extraOffset, optional int extraLength);
    method @Nullable public byte[] getExtraData();
    method public int getExtraDataLength();
    method public int getExtraDataOffset();
    method public int getValue();
    property @Nullable public final byte[] extraData;
    property public final int extraDataLength;
    property public final int extraDataOffset;
    property public final int value;
  }

  public final class Midi1Event {
    ctor public Midi1Event(int deltaTime, @NonNull dev.atsushieno.ktmidi.Midi1Message message);
    method public int getDeltaTime();
    method @Deprecated @NonNull public dev.atsushieno.ktmidi.Midi1Message getEvent();
    method @NonNull public dev.atsushieno.ktmidi.Midi1Message getMessage();
    property public final int deltaTime;
    property @Deprecated @NonNull public final dev.atsushieno.ktmidi.Midi1Message event;
    property @NonNull public final dev.atsushieno.ktmidi.Midi1Message message;
    field @NonNull public static final dev.atsushieno.ktmidi.Midi1Event.Companion Companion;
  }

  public static final class Midi1Event.Companion {
    method @NonNull public kotlin.sequences.Sequence<java.lang.Byte> encode7BitLength(int length);
  }

  public final class Midi1Machine {
    ctor public Midi1Machine();
    method @NonNull public dev.atsushieno.ktmidi.Midi1MachineChannel[] getChannels();
    method @Deprecated @NonNull public java.util.List<dev.atsushieno.ktmidi.Midi1Machine.OnMidi1MessageListener> getEventListeners();
    method public error.NonExistentClass getMessageListeners();
    method public void processMessage(@NonNull dev.atsushieno.ktmidi.Midi1Message evt);
    method public void setChannels(@NonNull dev.atsushieno.ktmidi.Midi1MachineChannel[] channels);
    property @NonNull public final dev.atsushieno.ktmidi.Midi1MachineChannel[] channels;
    property @Deprecated @NonNull public final java.util.List<dev.atsushieno.ktmidi.Midi1Machine.OnMidi1MessageListener> eventListeners;
    property public final error.NonExistentClass messageListeners;
  }

  public static fun interface Midi1Machine.OnMidi1MessageListener {
    method public void onMessage(@NonNull dev.atsushieno.ktmidi.Midi1Message e);
  }

  public final class Midi1MachineChannel {
    ctor public Midi1MachineChannel();
    method public byte getCaf();
    method @NonNull public byte[] getControls();
    method public int getCurrentNRPN();
    method public int getCurrentRPN();
    method @NonNull public dev.atsushieno.ktmidi.DteTarget getDteTarget();
    method @NonNull public byte[] getNoteVelocity();
    method @NonNull public short[] getNrpns();
    method @NonNull public byte[] getPafVelocity();
    method public short getPitchbend();
    method public byte getProgram();
    method @Deprecated public short getRpnTarget();
    method @NonNull public short[] getRpns();
    method public void processDte(byte value, boolean isMsb);
    method public void processDteDecrement();
    method public void processDteIncrement();
    method public void setCaf(byte caf);
    method public void setDteTarget(@NonNull dev.atsushieno.ktmidi.DteTarget dteTarget);
    method public void setPitchbend(short pitchbend);
    method public void setProgram(byte program);
    property public final byte caf;
    property @NonNull public final byte[] controls;
    property public final int currentNRPN;
    property public final int currentRPN;
    property @NonNull public final dev.atsushieno.ktmidi.DteTarget dteTarget;
    property @NonNull public final byte[] noteVelocity;
    property @NonNull public final short[] nrpns;
    property @NonNull public final byte[] pafVelocity;
    property public final short pitchbend;
    property public final byte program;
    property @Deprecated public final short rpnTarget;
    property @NonNull public final short[] rpns;
  }

  public interface Midi1Message {
    method public default byte getChannel();
    method @Deprecated public default byte getEventType();
    method public default byte getLsb();
    method public default byte getMetaType();
    method public default byte getMsb();
    method public default byte getStatusByte();
    method public default byte getStatusCode();
    method public int getValue();
    property public default byte channel;
    property @Deprecated public default byte eventType;
    property public default byte lsb;
    property public default byte metaType;
    property public default byte msb;
    property public default byte statusByte;
    property public default byte statusCode;
    property public abstract int value;
    field @NonNull public static final dev.atsushieno.ktmidi.Midi1Message.Companion Companion;
  }

  public static final class Midi1Message.Companion {
    method public error.NonExistentClass convert(@NonNull byte[] bytes, int index, int size);
    method public byte fixedDataSize(byte statusByte);
  }

  public final class Midi1Music {
    ctor public Midi1Music();
    method public void addTrack(@NonNull dev.atsushieno.ktmidi.Midi1Track track);
    method @NonNull public Iterable<dev.atsushieno.ktmidi.Midi1Event> filterEvents(@NonNull kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.Midi1Event,java.lang.Boolean> filter);
    method public int getDeltaTimeSpec();
    method public byte getFormat();
    method public int getTimePositionInMillisecondsForTick(int ticks);
    method public int getTotalPlayTimeMilliseconds();
    method public int getTotalTicks();
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Midi1Track> getTracks();
    method public void setDeltaTimeSpec(int deltaTimeSpec);
    method public void setFormat(byte format);
    property public final int deltaTimeSpec;
    property public final byte format;
    property @NonNull public final java.util.List<dev.atsushieno.ktmidi.Midi1Track> tracks;
    field @NonNull public static final dev.atsushieno.ktmidi.Midi1Music.Companion Companion;
    field public static final int DEFAULT_TEMPO = 500000; // 0x7a120
  }

  public static final class Midi1Music.Companion {
    method public error.NonExistentClass filterEvents(@NonNull Iterable<dev.atsushieno.ktmidi.Midi1Event> messages, @NonNull kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.Midi1Event,java.lang.Boolean> filter);
    method public int getPlayTimeMillisecondsAtTick(@NonNull Iterable<dev.atsushieno.ktmidi.Midi1Event> messages, int ticks, int deltaTimeSpec);
    method public double getSmfBpm(@NonNull byte[] data, int offset);
    method public int getSmfTempo(@NonNull byte[] data, int offset);
    method public double getSmpteDurationInSeconds(int smfDeltaTimeSpec, int ticks, optional int tempo, optional double tempoRatio);
    method public int getSmpteTicksForSeconds(int smfDeltaTimeSpec, double duration, optional int tempo, optional double tempoRatio);
    method public int getSmpteTicksPerSeconds(int smfDeltaTimeSpec);
    method public int getTotalPlayTimeMilliseconds(@NonNull Iterable<dev.atsushieno.ktmidi.Midi1Event> messages, int deltaTimeSpec);
  }

  public final class Midi1MusicKt {
    method @NonNull public static dev.atsushieno.ktmidi.Midi1Music mergeTracks(@NonNull dev.atsushieno.ktmidi.Midi1Music);
    method @NonNull public static dev.atsushieno.ktmidi.Midi1Music splitTracksByChannel(@NonNull dev.atsushieno.ktmidi.Midi1Track, byte deltaTimeSpec);
  }

  @kotlin.ExperimentalUnsignedTypes public final class Midi1MusicUnitTest {
    ctor public Midi1MusicUnitTest();
    method public void convert();
    method public void encode7BitLength();
    method public void getFixedSize();
    method public void getSmfBpm();
    method public void getSmpteDurationInSeconds();
    method public void getSmpteTicksForSeconds();
    method public void getSmpteTicksPerSeconds();
    method public void midi1MusicGetPlayTimeMillisecondsAtTick();
    method public void midiEventConvert();
    method public void smfReaderRead();
    method public void smfWriterWrite();
    method public void unsignedOperations();
  }

  public static final class Midi1MusicUnitTest.L {
    ctor public Midi1MusicUnitTest.L();
    field @NonNull public static final dev.atsushieno.ktmidi.Midi1MusicUnitTest.L.Companion Companion;
  }

  public static final class Midi1MusicUnitTest.L.Companion {
    method public error.NonExistentClass getD();
    method public error.NonExistentClass getE();
    method public error.NonExistentClass getH();
    method public error.NonExistentClass getK();
    method public error.NonExistentClass getR();
    method public error.NonExistentClass getS();
    method public error.NonExistentClass getT();
    property public final error.NonExistentClass d;
    property public final error.NonExistentClass e;
    property public final error.NonExistentClass h;
    property public final error.NonExistentClass k;
    property public final error.NonExistentClass r;
    property public final error.NonExistentClass s;
    property public final error.NonExistentClass t;
  }

  public static final class Midi1MusicUnitTest.U {
    ctor public Midi1MusicUnitTest.U();
    field @NonNull public static final dev.atsushieno.ktmidi.Midi1MusicUnitTest.U.Companion Companion;
  }

  public static final class Midi1MusicUnitTest.U.Companion {
    method public error.NonExistentClass getM();
    method public error.NonExistentClass getT();
    property public final error.NonExistentClass M;
    property public final error.NonExistentClass T;
  }

  public final class Midi1Player extends dev.atsushieno.ktmidi.MidiPlayer {
    ctor public Midi1Player(@NonNull dev.atsushieno.ktmidi.Midi1Music music, @NonNull dev.atsushieno.ktmidi.MidiOutput output, optional @NonNull dev.atsushieno.ktmidi.MidiPlayerTimer timer, optional boolean shouldDisposeOutput);
    method public void addOnEventListener(@NonNull dev.atsushieno.ktmidi.OnMidi1EventListener listener);
    method public long getPositionInMilliseconds();
    method public int getTotalPlayTimeMilliseconds();
    method public void removeOnEventListener(@NonNull dev.atsushieno.ktmidi.OnMidi1EventListener listener);
    method public void seek(int ticks);
    method public void setMutedChannels(@NonNull Iterable<java.lang.Integer> mutedChannels);
    property public long positionInMilliseconds;
    property public int totalPlayTimeMilliseconds;
    field @NonNull public static final dev.atsushieno.ktmidi.Midi1Player.Companion Companion;
  }

  public static final class Midi1Player.Companion {
    method @Nullable public suspend Object create(@NonNull dev.atsushieno.ktmidi.Midi1Music music, @NonNull dev.atsushieno.ktmidi.MidiAccess access, optional @NonNull dev.atsushieno.ktmidi.MidiPlayerTimer timer, optional @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.Midi1Player> p);
  }

  public final class Midi1PlayerTest {
    ctor public Midi1PlayerTest();
    method public void getTimePositionInMillisecondsForTick();
    method public void playSimple();
    method public void playbackCompletedToEnd();
    method public void playbackCompletedToEndAbort();
  }

  public static final class Midi1PlayerTest.AlmostVirtualMidiPlayerTimer extends dev.atsushieno.ktmidi.VirtualMidiPlayerTimer {
    ctor public Midi1PlayerTest.AlmostVirtualMidiPlayerTimer();
  }

  public final class Midi1ReaderWriterKt {
    method public static void read(@NonNull dev.atsushieno.ktmidi.Midi1Music, @NonNull java.util.List<java.lang.Byte> stream);
    method public static void write(@NonNull dev.atsushieno.ktmidi.Midi1Music, @NonNull java.util.List<java.lang.Byte> stream, optional @NonNull kotlin.jvm.functions.Function3<? super java.lang.Boolean,? super dev.atsushieno.ktmidi.Midi1Event,? super java.util.List<java.lang.Byte>,java.lang.Integer> metaEventWriter, optional boolean disableRunningStatus);
  }

  public final class Midi1SimpleMessage implements dev.atsushieno.ktmidi.Midi1Message {
    ctor public Midi1SimpleMessage(int value);
    ctor public Midi1SimpleMessage(int type, int arg1, int arg2);
    method public int component1();
    method @NonNull public dev.atsushieno.ktmidi.Midi1SimpleMessage copy(int value);
    method public int getValue();
    property public int value;
  }

  public final class Midi1Status {
    field @NonNull public static final dev.atsushieno.ktmidi.Midi1Status INSTANCE;
    field public static final int META = 255; // 0xff
    field public static final int SYSEX = 240; // 0xf0
    field public static final int SYSEX_END = 247; // 0xf7
  }

  public final class Midi1ToUmpTranslatorContext {
    ctor public Midi1ToUmpTranslatorContext(@NonNull java.util.List<java.lang.Byte> midi1, optional boolean allowReorderedDTE, optional int midiProtocol, int group, optional boolean useSysex8, optional boolean isMidi1Smf);
    method public boolean getAllowReorderedDTE();
    method public int getBankState();
    method public int getDteState();
    method public int getGroup();
    method @NonNull public java.util.List<java.lang.Byte> getMidi1();
    method public int getMidi1Pos();
    method public int getMidiProtocol();
    method public int getNrpnState();
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> getOutput();
    method public int getRpnState();
    method public int getTempo();
    method public boolean getUseSysex8();
    method public boolean isMidi1Smf();
    method public void setBankState(int bankState);
    method public void setDteState(int dteState);
    method public void setMidi1Pos(int midi1Pos);
    method public void setNrpnState(int nrpnState);
    method public void setRpnState(int rpnState);
    method public void setTempo(int tempo);
    property public final boolean allowReorderedDTE;
    property public final int bankState;
    property public final int dteState;
    property public final int group;
    property public final boolean isMidi1Smf;
    property @NonNull public final java.util.List<java.lang.Byte> midi1;
    property public final int midi1Pos;
    property public final int midiProtocol;
    property public final int nrpnState;
    property @NonNull public final java.util.List<dev.atsushieno.ktmidi.Ump> output;
    property public final int rpnState;
    property public final int tempo;
    property public final boolean useSysex8;
  }

  public final class Midi1Track {
    ctor public Midi1Track(optional @NonNull java.util.List<dev.atsushieno.ktmidi.Midi1Event> events);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Midi1Event> getEvents();
    method @Deprecated @NonNull public java.util.List<dev.atsushieno.ktmidi.Midi1Event> getMessages();
    property @NonNull public final java.util.List<dev.atsushieno.ktmidi.Midi1Event> events;
    property @Deprecated @NonNull public final java.util.List<dev.atsushieno.ktmidi.Midi1Event> messages;
  }

  public class Midi1TrackSplitter {
    ctor public Midi1TrackSplitter(@NonNull java.util.List<dev.atsushieno.ktmidi.Midi1Event> source, byte deltaTimeSpec);
    method public int getTrackId(@NonNull dev.atsushieno.ktmidi.Midi1Event e);
    method @NonNull public final dev.atsushieno.ktmidi.Midi1Music split();
    field @NonNull public static final dev.atsushieno.ktmidi.Midi1TrackSplitter.Companion Companion;
  }

  public static final class Midi1TrackSplitter.Companion {
    method @NonNull public dev.atsushieno.ktmidi.Midi1Music split(@NonNull java.util.List<dev.atsushieno.ktmidi.Midi1Event> source, byte deltaTimeSpec);
  }

  public final class Midi1WriterExtension {
    method @NonNull public kotlin.jvm.functions.Function3<java.lang.Boolean,dev.atsushieno.ktmidi.Midi1Event,java.util.List<java.lang.Byte>,java.lang.Integer> getDefaultMetaEventWriter();
    property @NonNull public final kotlin.jvm.functions.Function3<java.lang.Boolean,dev.atsushieno.ktmidi.Midi1Event,java.util.List<java.lang.Byte>,java.lang.Integer> defaultMetaEventWriter;
    field @NonNull public static final dev.atsushieno.ktmidi.Midi1WriterExtension INSTANCE;
  }

  public final class Midi2BinaryChunkFormat {
    field public static final int COMPLETE_PACKET = 0; // 0x0
    field public static final int CONTINUE = 2; // 0x2
    field public static final int END = 3; // 0x3
    field @NonNull public static final dev.atsushieno.ktmidi.Midi2BinaryChunkFormat INSTANCE;
    field public static final int START = 1; // 0x1
  }

  public final class Midi2BinaryChunkStatus {
    field public static final int COMPLETE_PACKET = 0; // 0x0
    field public static final int CONTINUE = 32; // 0x20
    field public static final int END = 48; // 0x30
    field @NonNull public static final dev.atsushieno.ktmidi.Midi2BinaryChunkStatus INSTANCE;
    field public static final int MDS_HEADER = 128; // 0x80
    field public static final int MDS_PAYLOAD = 144; // 0x90
    field public static final int START = 16; // 0x10
    field @Deprecated public static final int SYSEX_CONTINUE = 32; // 0x20
    field @Deprecated public static final int SYSEX_END = 48; // 0x30
    field @Deprecated public static final int SYSEX_IN_ONE_UMP = 0; // 0x0
    field @Deprecated public static final int SYSEX_START = 16; // 0x10
  }

  public final class Midi2Machine {
    ctor public Midi2Machine();
    method @Deprecated public void addListener(@NonNull dev.atsushieno.ktmidi.Midi2Machine.Listener listener);
    method @NonNull public dev.atsushieno.ktmidi.Midi2MachineChannel channel(int index);
    method @NonNull public kotlin.jvm.functions.Function2<java.lang.String,dev.atsushieno.ktmidi.Ump,kotlin.Unit> getDiagnosticsHandler();
    method public error.NonExistentClass getEventListeners();
    method @NonNull public Iterable<dev.atsushieno.ktmidi.Midi2MachineChannel> getUsedChannels();
    method public void processEvent(@NonNull dev.atsushieno.ktmidi.Ump evt);
    method @Deprecated public void removeListener(@NonNull dev.atsushieno.ktmidi.Midi2Machine.Listener listener);
    method public void setDiagnosticsHandler(@NonNull kotlin.jvm.functions.Function2<? super java.lang.String,? super dev.atsushieno.ktmidi.Ump,kotlin.Unit> diagnosticsHandler);
    property @NonNull public final kotlin.jvm.functions.Function2<java.lang.String,dev.atsushieno.ktmidi.Ump,kotlin.Unit> diagnosticsHandler;
    property public final error.NonExistentClass eventListeners;
    property @NonNull public final Iterable<dev.atsushieno.ktmidi.Midi2MachineChannel> usedChannels;
  }

  public static fun interface Midi2Machine.Listener {
    method public void onEvent(@NonNull dev.atsushieno.ktmidi.Ump e);
  }

  public final class Midi2MachineChannel {
    ctor public Midi2MachineChannel();
    method public int getCaf();
    method @NonNull public kotlin.UInt[] getControls();
    method @NonNull public dev.atsushieno.ktmidi.DteTarget getDteTarget();
    method @NonNull public kotlin.UShort[] getNoteAttribute();
    method @NonNull public kotlin.UShort[] getNoteAttributeType();
    method @NonNull public kotlin.UShort[] getNoteVelocity();
    method @NonNull public kotlin.UInt[] getNrpns();
    method @NonNull public kotlin.UInt[] getPafVelocity();
    method @NonNull public kotlin.UInt[][] getPerNoteACC();
    method @NonNull public kotlin.UInt[] getPerNotePitchbend();
    method @NonNull public kotlin.UInt[][] getPerNoteRCC();
    method public int getPitchbend();
    method public byte getProgram();
    method @NonNull public kotlin.UInt[] getRpns();
    method public void processMidi1Dte(byte value, boolean isMsb);
    method public void processMidi1DteDecrement();
    method public void processMidi1DteIncrement();
    method public void setCaf(int caf);
    method public void setDteTarget(@NonNull dev.atsushieno.ktmidi.DteTarget dteTarget);
    method public void setPitchbend(int pitchbend);
    method public void setProgram(byte program);
    property public final int caf;
    property @NonNull public final kotlin.UInt[] controls;
    property @NonNull public final dev.atsushieno.ktmidi.DteTarget dteTarget;
    property @NonNull public final kotlin.UShort[] noteAttribute;
    property @NonNull public final kotlin.UShort[] noteAttributeType;
    property @NonNull public final kotlin.UShort[] noteVelocity;
    property @NonNull public final kotlin.UInt[] nrpns;
    property @NonNull public final kotlin.UInt[] pafVelocity;
    property @NonNull public final kotlin.UInt[][] perNoteACC;
    property @NonNull public final kotlin.UInt[] perNotePitchbend;
    property @NonNull public final kotlin.UInt[][] perNoteRCC;
    property public final int pitchbend;
    property public final byte program;
    property @NonNull public final kotlin.UInt[] rpns;
  }

  public final class Midi2Music {
    ctor public Midi2Music();
    method public void addTrack(@NonNull dev.atsushieno.ktmidi.Midi2Track track);
    method @NonNull public Iterable<dev.atsushieno.ktmidi.Timed<dev.atsushieno.ktmidi.Ump>> filterEvents(@NonNull kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.Ump,java.lang.Boolean> filter);
    method public int getDeltaTimeSpec();
    method @Deprecated public int getFormat();
    method public int getTimePositionInMillisecondsForTick(int ticks);
    method public int getTotalPlayTimeMilliseconds();
    method public int getTotalTicks();
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Midi2Track> getTracks();
    method public boolean isSingleTrack();
    method public void setDeltaTimeSpec(int deltaTimeSpec);
    method @Deprecated public void setFormat(int _);
    property public final int deltaTimeSpec;
    property @Deprecated public final int format;
    property public final boolean isSingleTrack;
    property @NonNull public final java.util.List<dev.atsushieno.ktmidi.Midi2Track> tracks;
    field @NonNull public static final dev.atsushieno.ktmidi.Midi2Music.Companion Companion;
  }

  public static final class Midi2Music.Companion {
    method @NonNull public kotlin.sequences.Sequence<dev.atsushieno.ktmidi.Timed<dev.atsushieno.ktmidi.Ump>> filterEvents(@NonNull Iterable<dev.atsushieno.ktmidi.Ump> messages, @NonNull kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.Ump,java.lang.Boolean> filter);
    method @Deprecated public int getMetaEventType(@NonNull dev.atsushieno.ktmidi.Ump message);
    method public int getPlayTimeMillisecondsAtTick(@NonNull Iterable<dev.atsushieno.ktmidi.Ump> messages, int ticks, int deltaTimeSpec);
    method public int getTempoValue(@NonNull dev.atsushieno.ktmidi.Ump message);
    method public int getTotalPlayTimeMilliseconds(@NonNull Iterable<dev.atsushieno.ktmidi.Ump> messages, int deltaTimeSpec);
    method @Deprecated public boolean isMetaEventMessage(@NonNull dev.atsushieno.ktmidi.Ump message, int metaType);
    method public boolean isMetaEventMessageStarter(@NonNull dev.atsushieno.ktmidi.Ump message);
    method public boolean isTempoMessage(@NonNull dev.atsushieno.ktmidi.Ump message);
  }

  public final class Midi2MusicKt {
    method @Deprecated @NonNull public static dev.atsushieno.ktmidi.Midi2Music convertDeltaTimesToJRTimestamps(@NonNull dev.atsushieno.ktmidi.Midi2Music);
    method @NonNull public static dev.atsushieno.ktmidi.Midi2Music mergeTracks(@NonNull dev.atsushieno.ktmidi.Midi2Music);
    method @NonNull public static dev.atsushieno.ktmidi.Midi2Music splitTracksByChannel(@NonNull dev.atsushieno.ktmidi.Midi2Track);
  }

  public final class Midi2MusicTest {
    ctor public Midi2MusicTest();
    method public void readWriteMusic();
    method public void writeSysex8();
  }

  public final class Midi2MusicTestKt {
    method public static error.NonExistentClass getMusicFileIdentifier();
    method public static error.NonExistentClass getMusicTrackIdentifier();
    property public static final error.NonExistentClass musicFileIdentifier;
    property public static final error.NonExistentClass musicTrackIdentifier;
  }

  public final class Midi2Player extends dev.atsushieno.ktmidi.MidiPlayer {
    ctor public Midi2Player(@NonNull dev.atsushieno.ktmidi.Midi2Music music, @NonNull dev.atsushieno.ktmidi.MidiOutput output, optional @NonNull dev.atsushieno.ktmidi.MidiPlayerTimer timer, optional boolean shouldDisposeOutput);
    method public void addOnMessageListener(@NonNull dev.atsushieno.ktmidi.OnMidi2EventListener listener);
    method public long getPositionInMilliseconds();
    method public int getTotalPlayTimeMilliseconds();
    method public void removeOnMessageListener(@NonNull dev.atsushieno.ktmidi.OnMidi2EventListener listener);
    method public void seek(int ticks);
    method public void setMutedChannels(@NonNull Iterable<java.lang.Integer> mutedChannels);
    property public long positionInMilliseconds;
    property public int totalPlayTimeMilliseconds;
    field @NonNull public static final dev.atsushieno.ktmidi.Midi2Player.Companion Companion;
  }

  public static final class Midi2Player.Companion {
    method @Nullable public suspend Object create(@NonNull dev.atsushieno.ktmidi.Midi2Music music, @NonNull dev.atsushieno.ktmidi.MidiAccess access, optional @NonNull dev.atsushieno.ktmidi.MidiPlayerTimer timer, optional @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.Midi2Player> p);
  }

  public final class Midi2PlayerKt {
  }

  public final class Midi2ReaderWriterKt {
    method @Deprecated public static void read(@NonNull dev.atsushieno.ktmidi.Midi2Music, @NonNull java.util.List<java.lang.Byte> stream);
    method public static void read(@NonNull dev.atsushieno.ktmidi.Midi2Music, @NonNull java.util.List<java.lang.Byte> stream, optional boolean removeEmptyDeltaClockstamps);
    method public static void write(@NonNull dev.atsushieno.ktmidi.Midi2Music, @NonNull java.util.List<java.lang.Byte> stream);
  }

  public final class Midi2Track {
    ctor public Midi2Track(optional @NonNull java.util.List<dev.atsushieno.ktmidi.Ump> messages);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> getMessages();
    property @NonNull public final java.util.List<dev.atsushieno.ktmidi.Ump> messages;
  }

  public class Midi2TrackSplitter {
    ctor public Midi2TrackSplitter(@NonNull java.util.List<dev.atsushieno.ktmidi.Ump> source);
    method public int getTrackId(@NonNull dev.atsushieno.ktmidi.Ump e);
    method @NonNull public final dev.atsushieno.ktmidi.Midi2Music split();
    field @NonNull public static final dev.atsushieno.ktmidi.Midi2TrackSplitter.Companion Companion;
  }

  public static final class Midi2TrackSplitter.Companion {
    method @NonNull public dev.atsushieno.ktmidi.Midi2Music split(@NonNull java.util.List<dev.atsushieno.ktmidi.Ump> source);
  }

  public abstract class MidiAccess {
    ctor public MidiAccess();
    method @Nullable public suspend Object createVirtualInputSender(@NonNull dev.atsushieno.ktmidi.PortCreatorContext context, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput> p);
    method @Nullable public suspend Object createVirtualOutputReceiver(@NonNull dev.atsushieno.ktmidi.PortCreatorContext context, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput> p);
    method public boolean getCanCreateVirtualPort();
    method public boolean getCanDetectStateChanges();
    method @NonNull public abstract Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getInputs();
    method @NonNull public abstract String getName();
    method @NonNull public abstract Iterable<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method @NonNull public final kotlin.jvm.functions.Function1<dev.atsushieno.ktmidi.MidiPortDetails,kotlin.Unit> getStateChanged();
    method @Nullable public abstract suspend Object openInput(@NonNull String portId, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiInput> p);
    method @Nullable public abstract suspend Object openOutput(@NonNull String portId, @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.MidiOutput> p);
    method public final void setStateChanged(@NonNull kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.MidiPortDetails,kotlin.Unit> stateChanged);
    property public boolean canCreateVirtualPort;
    property public boolean canDetectStateChanges;
    property @NonNull public abstract Iterable<dev.atsushieno.ktmidi.MidiPortDetails> inputs;
    property @NonNull public abstract String name;
    property @NonNull public abstract Iterable<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
    property @NonNull public final kotlin.jvm.functions.Function1<dev.atsushieno.ktmidi.MidiPortDetails,kotlin.Unit> stateChanged;
  }

  public final class MidiAccessKt {
    method @NonNull public static dev.atsushieno.ktmidi.EmptyMidiAccess getEmptyMidiAccess();
    property @NonNull public static final dev.atsushieno.ktmidi.EmptyMidiAccess emptyMidiAccess;
  }

  public final class MidiBankDefinition {
    ctor public MidiBankDefinition();
    method public int getLsb();
    method public int getMsb();
    method @Nullable public String getName();
    method public void setLsb(int lsb);
    method public void setMsb(int msb);
    method public void setName(@Nullable String name);
    property public final int lsb;
    property public final int msb;
    property @Nullable public final String name;
  }

  public final class MidiCC {
    field public static final int ALL_NOTES_OFF = 123; // 0x7b
    field public static final int ALL_SOUND_OFF = 120; // 0x78
    field public static final int BALANCE = 8; // 0x8
    field public static final int BALANCE_LSB = 40; // 0x28
    field public static final int BANK_SELECT = 0; // 0x0
    field public static final int BANK_SELECT_LSB = 32; // 0x20
    field public static final int BREATH = 2; // 0x2
    field public static final int BREATH_LSB = 34; // 0x22
    field public static final int CELESTE = 94; // 0x5e
    field public static final int CSD = 93; // 0x5d
    field public static final int DTE_DECREMENT = 97; // 0x61
    field public static final int DTE_INCREMENT = 96; // 0x60
    field public static final int DTE_LSB = 38; // 0x26
    field public static final int DTE_MSB = 6; // 0x6
    field public static final int EFFECT_1 = 91; // 0x5b
    field public static final int EFFECT_1_LSB = 44; // 0x2c
    field public static final int EFFECT_2 = 92; // 0x5c
    field public static final int EFFECT_2_LSB = 45; // 0x2d
    field public static final int EFFECT_3 = 93; // 0x5d
    field public static final int EFFECT_4 = 94; // 0x5e
    field public static final int EFFECT_5 = 95; // 0x5f
    field public static final int EFFECT_CONTROL_1 = 12; // 0xc
    field public static final int EFFECT_CONTROL_2 = 13; // 0xd
    field public static final int EXPRESSION = 11; // 0xb
    field public static final int EXPRESSION_LSB = 43; // 0x2b
    field public static final int FOOT = 4; // 0x4
    field public static final int FOOT_LSB = 36; // 0x24
    field public static final int GENERAL_1 = 16; // 0x10
    field public static final int GENERAL_1_LSB = 48; // 0x30
    field public static final int GENERAL_2 = 17; // 0x11
    field public static final int GENERAL_2_LSB = 49; // 0x31
    field public static final int GENERAL_3 = 18; // 0x12
    field public static final int GENERAL_3_LSB = 50; // 0x32
    field public static final int GENERAL_4 = 19; // 0x13
    field public static final int GENERAL_4_LSB = 51; // 0x33
    field public static final int GENERAL_5 = 80; // 0x50
    field public static final int GENERAL_6 = 81; // 0x51
    field public static final int GENERAL_7 = 82; // 0x52
    field public static final int GENERAL_8 = 83; // 0x53
    field public static final int HOLD = 64; // 0x40
    field public static final int HOLD_2 = 69; // 0x45
    field @NonNull public static final dev.atsushieno.ktmidi.MidiCC INSTANCE;
    field public static final int LEGATO = 68; // 0x44
    field public static final int LOCAL_CONTROL = 122; // 0x7a
    field public static final int MODULATION = 1; // 0x1
    field public static final int MODULATION_LSB = 33; // 0x21
    field public static final int NRPN_LSB = 98; // 0x62
    field public static final int NRPN_MSB = 99; // 0x63
    field public static final int OMNI_MODE_OFF = 124; // 0x7c
    field public static final int OMNI_MODE_ON = 125; // 0x7d
    field public static final int PAN = 10; // 0xa
    field public static final int PAN_LSB = 42; // 0x2a
    field public static final int PHASER = 95; // 0x5f
    field public static final int POLY_MODE_OFF = 126; // 0x7e
    field public static final int POLY_MODE_ON = 127; // 0x7f
    field public static final int PORTAMENTO_CONTROL = 84; // 0x54
    field public static final int PORTAMENTO_SWITCH = 65; // 0x41
    field public static final int PORTAMENTO_TIME = 5; // 0x5
    field public static final int PORTAMENTO_TIME_LSB = 37; // 0x25
    field public static final int RESET_ALL_CONTROLLERS = 121; // 0x79
    field public static final int RPN_LSB = 100; // 0x64
    field public static final int RPN_MSB = 101; // 0x65
    field public static final int RSD = 91; // 0x5b
    field public static final int SOFT_PEDAL = 67; // 0x43
    field public static final int SOSTENUTO = 66; // 0x42
    field public static final int SOUND_CONTROLLER_1 = 70; // 0x46
    field public static final int SOUND_CONTROLLER_10 = 79; // 0x4f
    field public static final int SOUND_CONTROLLER_2 = 71; // 0x47
    field public static final int SOUND_CONTROLLER_3 = 72; // 0x48
    field public static final int SOUND_CONTROLLER_4 = 73; // 0x49
    field public static final int SOUND_CONTROLLER_5 = 74; // 0x4a
    field public static final int SOUND_CONTROLLER_6 = 75; // 0x4b
    field public static final int SOUND_CONTROLLER_7 = 76; // 0x4c
    field public static final int SOUND_CONTROLLER_8 = 77; // 0x4d
    field public static final int SOUND_CONTROLLER_9 = 78; // 0x4e
    field public static final int TREMOLO = 92; // 0x5c
    field public static final int VOLUME = 7; // 0x7
    field public static final int VOLUME_LSB = 39; // 0x27
  }

  public final class MidiCIProtocolBytes {
    field public static final int EXTENSIONS = 2; // 0x2
    field @NonNull public static final dev.atsushieno.ktmidi.MidiCIProtocolBytes INSTANCE;
    field public static final int TYPE = 0; // 0x0
    field public static final int VERSION = 1; // 0x1
  }

  public final class MidiCIProtocolExtensions {
    field @NonNull public static final dev.atsushieno.ktmidi.MidiCIProtocolExtensions INSTANCE;
    field public static final int JITTER = 1; // 0x1
    field public static final int LARGER = 2; // 0x2
  }

  public final class MidiCIProtocolType {
    field @NonNull public static final dev.atsushieno.ktmidi.MidiCIProtocolType INSTANCE;
    field public static final int MIDI1 = 1; // 0x1
    field public static final int MIDI2 = 2; // 0x2
  }

  public final class MidiCIProtocolValue {
    field @NonNull public static final dev.atsushieno.ktmidi.MidiCIProtocolValue INSTANCE;
    field public static final int MIDI1 = 0; // 0x0
    field public static final int MIDI2_V1 = 0; // 0x0
  }

  public final class MidiChannelStatus {
    field public static final int CAF = 208; // 0xd0
    field public static final int CC = 176; // 0xb0
    field @NonNull public static final dev.atsushieno.ktmidi.MidiChannelStatus INSTANCE;
    field public static final int NOTE_OFF = 128; // 0x80
    field public static final int NOTE_ON = 144; // 0x90
    field public static final int NRPN = 48; // 0x30
    field public static final int PAF = 160; // 0xa0
    field public static final int PER_NOTE_ACC = 16; // 0x10
    field public static final int PER_NOTE_MANAGEMENT = 240; // 0xf0
    field public static final int PER_NOTE_PITCH_BEND = 96; // 0x60
    field public static final int PER_NOTE_RCC = 0; // 0x0
    field public static final int PITCH_BEND = 224; // 0xe0
    field public static final int PROGRAM = 192; // 0xc0
    field public static final int RELATIVE_NRPN = 80; // 0x50
    field public static final int RELATIVE_RPN = 64; // 0x40
    field public static final int RPN = 32; // 0x20
  }

  @Deprecated public final class MidiEvent {
    ctor @Deprecated public MidiEvent(int value);
    ctor @Deprecated public MidiEvent(int type, int arg1, int arg2, optional @Nullable byte[] extraData, optional int extraOffset, optional int extraLength);
    method @Deprecated public byte getChannel();
    method @Deprecated public byte getEventType();
    method @Deprecated @Nullable public byte[] getExtraData();
    method @Deprecated public int getExtraDataLength();
    method @Deprecated public int getExtraDataOffset();
    method @Deprecated public byte getLsb();
    method @Deprecated public byte getMetaType();
    method @Deprecated public byte getMsb();
    method @Deprecated public byte getStatusByte();
    method @Deprecated public int getValue();
    method @Deprecated public void setValue(int value);
    property public final byte channel;
    property public final byte eventType;
    property @Nullable public final byte[] extraData;
    property public final int extraDataLength;
    property public final int extraDataOffset;
    property public final byte lsb;
    property public final byte metaType;
    property public final byte msb;
    property public final byte statusByte;
    property public final int value;
    field @Deprecated @NonNull public static final dev.atsushieno.ktmidi.MidiEvent.Companion Companion;
  }

  @Deprecated public static final class MidiEvent.Companion {
    method @Deprecated public error.NonExistentClass convert(@NonNull byte[] bytes, int index, int size);
    method @Deprecated public byte fixedDataSize(byte statusByte);
  }

  @Deprecated public final class MidiEventType {
    field @Deprecated public static final byte CAF = -48; // 0xffffffd0
    field @Deprecated public static final byte CC = -80; // 0xffffffb0
    field @Deprecated @NonNull public static final dev.atsushieno.ktmidi.MidiEventType INSTANCE;
    field @Deprecated public static final byte NOTE_OFF = -128; // 0xffffff80
    field @Deprecated public static final byte NOTE_ON = -112; // 0xffffff90
    field @Deprecated public static final byte PAF = -96; // 0xffffffa0
    field @Deprecated public static final byte PITCH = -32; // 0xffffffe0
    field @Deprecated public static final byte PROGRAM = -64; // 0xffffffc0
  }

  public interface MidiInput extends dev.atsushieno.ktmidi.MidiPort {
    method public void setMessageReceivedListener(@NonNull dev.atsushieno.ktmidi.OnMidiReceivedEventListener listener);
  }

  public final class MidiInstrumentDefinition {
    ctor public MidiInstrumentDefinition();
    method public error.NonExistentClass getDrumMaps();
    method public error.NonExistentClass getMaps();
    method public void setDrumMaps(error.NonExistentClass drumMaps);
    method public void setMaps(error.NonExistentClass maps);
    property public final error.NonExistentClass drumMaps;
    property public final error.NonExistentClass maps;
  }

  public final class MidiInstrumentMap {
    ctor public MidiInstrumentMap();
    method @Nullable public String getName();
    method public error.NonExistentClass getPrograms();
    method public void setName(@Nullable String name);
    method public void setPrograms(error.NonExistentClass programs);
    property @Nullable public final String name;
    property public final error.NonExistentClass programs;
  }

  @Deprecated public final class MidiMachine {
    ctor @Deprecated public MidiMachine();
    method @Deprecated public void addOnEventReceivedListener(@NonNull dev.atsushieno.ktmidi.OnMidiEventListener listener);
    method @Deprecated @NonNull public dev.atsushieno.ktmidi.MidiMachineChannel[] getChannels();
    method @Deprecated public void processEvent(@NonNull dev.atsushieno.ktmidi.MidiEvent evt);
    method @Deprecated public void removeOnEventReceivedListener(@NonNull dev.atsushieno.ktmidi.OnMidiEventListener listener);
    method @Deprecated public void setChannels(@NonNull dev.atsushieno.ktmidi.MidiMachineChannel[] channels);
    property @NonNull public final dev.atsushieno.ktmidi.MidiMachineChannel[] channels;
  }

  public final class MidiMachineChannel {
    ctor public MidiMachineChannel();
    method public byte getCaf();
    method @NonNull public byte[] getControls();
    method @NonNull public dev.atsushieno.ktmidi.DteTarget getDteTarget();
    method @NonNull public byte[] getNoteVelocity();
    method @NonNull public short[] getNrpns();
    method @NonNull public byte[] getPafVelocity();
    method public short getPitchbend();
    method public byte getProgram();
    method public short getRpnTarget();
    method @NonNull public short[] getRpns();
    method public void processDte(byte value, boolean isMsb);
    method public void processDteDecrement();
    method public void processDteIncrement();
    method public void setCaf(byte caf);
    method public void setDteTarget(@NonNull dev.atsushieno.ktmidi.DteTarget dteTarget);
    method public void setPitchbend(short pitchbend);
    method public void setProgram(byte program);
    property public final byte caf;
    property @NonNull public final byte[] controls;
    property @NonNull public final dev.atsushieno.ktmidi.DteTarget dteTarget;
    property @NonNull public final byte[] noteVelocity;
    property @NonNull public final short[] nrpns;
    property @NonNull public final byte[] pafVelocity;
    property public final short pitchbend;
    property public final byte program;
    property public final short rpnTarget;
    property @NonNull public final short[] rpns;
  }

  @Deprecated public final class MidiMessage {
    ctor @Deprecated public MidiMessage(int deltaTime, @NonNull dev.atsushieno.ktmidi.MidiEvent evt);
    method @Deprecated public int getDeltaTime();
    method @Deprecated @NonNull public dev.atsushieno.ktmidi.MidiEvent getEvent();
    property public final int deltaTime;
    property @NonNull public final dev.atsushieno.ktmidi.MidiEvent event;
    field @Deprecated @NonNull public static final dev.atsushieno.ktmidi.MidiMessage.Companion Companion;
  }

  @Deprecated public static final class MidiMessage.Companion {
    method @Deprecated @NonNull public kotlin.sequences.Sequence<java.lang.Byte> encode7BitLength(int length);
  }

  public final class MidiMessageType {
    field public static final int FLEX_DATA = 13; // 0xd
    field @NonNull public static final dev.atsushieno.ktmidi.MidiMessageType INSTANCE;
    field public static final int MIDI1 = 2; // 0x2
    field public static final int MIDI2 = 4; // 0x4
    field public static final int SYSEX7 = 3; // 0x3
    field public static final int SYSEX8_MDS = 5; // 0x5
    field public static final int SYSTEM = 1; // 0x1
    field public static final int UMP_STREAM = 15; // 0xf
    field public static final int UTILITY = 0; // 0x0
  }

  public final class MidiMetaType {
    field public static final int CHANNEL_PREFIX = 32; // 0x20
    field public static final int COPYRIGHT = 2; // 0x2
    field public static final int CUE = 7; // 0x7
    field public static final int END_OF_TRACK = 47; // 0x2f
    field @NonNull public static final dev.atsushieno.ktmidi.MidiMetaType INSTANCE;
    field public static final int INSTRUMENT_NAME = 4; // 0x4
    field public static final int KEY_SIGNATURE = 89; // 0x59
    field public static final int LYRIC = 5; // 0x5
    field public static final int MARKER = 6; // 0x6
    field public static final int SEQUENCER_SPECIFIC = 127; // 0x7f
    field public static final int SEQUENCE_NUMBER = 0; // 0x0
    field public static final int SMTPE_OFFSET = 84; // 0x54
    field public static final int TEMPO = 81; // 0x51
    field public static final int TEXT = 1; // 0x1
    field public static final int TIME_SIGNATURE = 88; // 0x58
    field public static final int TRACK_NAME = 3; // 0x3
  }

  public abstract class MidiModuleDatabase {
    ctor public MidiModuleDatabase();
    method @NonNull public abstract Iterable<dev.atsushieno.ktmidi.MidiModuleDefinition> all();
    method @NonNull public abstract dev.atsushieno.ktmidi.MidiModuleDefinition resolve(@NonNull String moduleName);
  }

  public final class MidiModuleDatabase_jvmKt {
    method @NonNull public static dev.atsushieno.ktmidi.DefaultMidiModuleDatabase getDefaultMidiModuleDatabase();
    property @NonNull public static final dev.atsushieno.ktmidi.DefaultMidiModuleDatabase defaultMidiModuleDatabase;
  }

  public final class MidiModuleDefinition {
    ctor public MidiModuleDefinition();
    method @NonNull public dev.atsushieno.ktmidi.MidiInstrumentDefinition getInstrument();
    method @Nullable public String getMatch();
    method @Nullable public String getName();
    method public void setInstrument(@NonNull dev.atsushieno.ktmidi.MidiInstrumentDefinition instrument);
    method public void setMatch(@Nullable String match);
    method public void setName(@Nullable String name);
    property @NonNull public final dev.atsushieno.ktmidi.MidiInstrumentDefinition instrument;
    property @Nullable public final String match;
    property @Nullable public final String name;
  }

  @Deprecated public final class MidiMusic {
    ctor @Deprecated public MidiMusic();
    method @Deprecated public void addTrack(@NonNull dev.atsushieno.ktmidi.MidiTrack track);
    method @Deprecated @NonNull public Iterable<dev.atsushieno.ktmidi.MidiMessage> filterEvents(@NonNull kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.MidiMessage,java.lang.Boolean> filter);
    method @Deprecated public int getDeltaTimeSpec();
    method @Deprecated public byte getFormat();
    method @Deprecated public int getTimePositionInMillisecondsForTick(int ticks);
    method @Deprecated public int getTotalPlayTimeMilliseconds();
    method @Deprecated public int getTotalTicks();
    method @Deprecated @NonNull public java.util.List<dev.atsushieno.ktmidi.MidiTrack> getTracks();
    method @Deprecated public void setDeltaTimeSpec(int deltaTimeSpec);
    method @Deprecated public void setFormat(byte format);
    property public final int deltaTimeSpec;
    property public final byte format;
    property @NonNull public final java.util.List<dev.atsushieno.ktmidi.MidiTrack> tracks;
    field @Deprecated @NonNull public static final dev.atsushieno.ktmidi.MidiMusic.Companion Companion;
    field @Deprecated public static final int DEFAULT_TEMPO = 500000; // 0x7a120
    field @Deprecated public static final int META_EVENT = 255; // 0xff
    field @Deprecated public static final int SYSEX_END = 247; // 0xf7
    field @Deprecated public static final int SYSEX_EVENT = 240; // 0xf0
  }

  @Deprecated public static final class MidiMusic.Companion {
    method @Deprecated public error.NonExistentClass filterEvents(@NonNull Iterable<dev.atsushieno.ktmidi.MidiMessage> messages, @NonNull kotlin.jvm.functions.Function1<? super dev.atsushieno.ktmidi.MidiMessage,java.lang.Boolean> filter);
    method @Deprecated public int getPlayTimeMillisecondsAtTick(@NonNull Iterable<dev.atsushieno.ktmidi.MidiMessage> messages, int ticks, int deltaTimeSpec);
    method @Deprecated public double getSmfBpm(@NonNull byte[] data, int offset);
    method @Deprecated public int getSmfTempo(@NonNull byte[] data, int offset);
    method @Deprecated public double getSmpteDurationInSeconds(int smfDeltaTimeSpec, int ticks, optional int tempo, optional double tempoRatio);
    method @Deprecated public int getSmpteTicksForSeconds(int smfDeltaTimeSpec, double duration, optional int tempo, optional double tempoRatio);
    method @Deprecated public int getSmpteTicksPerSeconds(int smfDeltaTimeSpec);
    method @Deprecated public int getTotalPlayTimeMilliseconds(@NonNull Iterable<dev.atsushieno.ktmidi.MidiMessage> messages, int deltaTimeSpec);
  }

  public final class MidiMusicCommonKt {
    method @NonNull public static dev.atsushieno.ktmidi.Dc getDc(int);
  }

  public final class MidiMusicKt {
    method @Deprecated @NonNull public static dev.atsushieno.ktmidi.MidiMusic mergeTracks(@NonNull dev.atsushieno.ktmidi.MidiMusic);
    method @NonNull public static dev.atsushieno.ktmidi.MidiMusic splitTracksByChannel(@NonNull dev.atsushieno.ktmidi.MidiTrack, byte deltaTimeSpec);
  }

  public final class MidiNoteAttributeType {
    field @NonNull public static final dev.atsushieno.ktmidi.MidiNoteAttributeType INSTANCE;
    field public static final int MANUFACTURER_SPECIFIC = 1; // 0x1
    field public static final int NONE = 0; // 0x0
    field public static final int PROFILE_SPECIFIC = 2; // 0x2
    field public static final int Pitch7_9 = 3; // 0x3
  }

  public interface MidiOutput extends dev.atsushieno.ktmidi.MidiPort {
    method public void send(@NonNull byte[] mevent, int offset, int length, long timestampInNanoseconds);
  }

  public final class MidiPerNoteManagementFlags {
    field public static final int DETACH = 2; // 0x2
    field @NonNull public static final dev.atsushieno.ktmidi.MidiPerNoteManagementFlags INSTANCE;
    field public static final int RESET = 1; // 0x1
  }

  public abstract class MidiPlayer {
    method public final void close();
    method public final int getBpm();
    method @Nullable public final Runnable getFinished();
    method public final int getPlayDeltaTime();
    method @Nullable public final Runnable getPlaybackCompletedToEnd();
    method public abstract long getPositionInMilliseconds();
    method @NonNull public final dev.atsushieno.ktmidi.PlayerState getState();
    method public final int getTempo();
    method public final double getTempoChangeRatio();
    method @NonNull public final java.util.List<java.lang.Byte> getTimeSignature();
    method public abstract int getTotalPlayTimeMilliseconds();
    method public final void pause();
    method public final void play();
    method public abstract void seek(int ticks);
    method public final void setFinished(@Nullable Runnable v);
    method public abstract void setMutedChannels(@NonNull Iterable<java.lang.Integer> mutedChannels);
    method public final void setPlaybackCompletedToEnd(@Nullable Runnable v);
    method public final void setTempo(int v);
    method public final void setTempoChangeRatio(double v);
    method public final void stop();
    property public final int bpm;
    property @Nullable public final Runnable finished;
    property public final int playDeltaTime;
    property @Nullable public final Runnable playbackCompletedToEnd;
    property public abstract long positionInMilliseconds;
    property @NonNull public final dev.atsushieno.ktmidi.PlayerState state;
    property public final int tempo;
    property public final double tempoChangeRatio;
    property @NonNull public final java.util.List<java.lang.Byte> timeSignature;
    property public abstract int totalPlayTimeMilliseconds;
  }

  public interface MidiPlayerTimer {
    method public void stop();
    method @Nullable public suspend Object waitBySeconds(double addedSeconds, @NonNull kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  public final class MidiPlayerTimerTest {
    ctor public MidiPlayerTimerTest();
    method public void simpleTimerTest();
  }

  public interface MidiPort {
    method public void close();
    method @NonNull public dev.atsushieno.ktmidi.MidiPortConnectionState getConnectionState();
    method @NonNull public dev.atsushieno.ktmidi.MidiPortDetails getDetails();
    method public int getMidiProtocol();
    method public void setMidiProtocol(int midiProtocol);
    property @NonNull public abstract dev.atsushieno.ktmidi.MidiPortConnectionState connectionState;
    property @NonNull public abstract dev.atsushieno.ktmidi.MidiPortDetails details;
    property public abstract int midiProtocol;
  }

  public enum MidiPortConnectionState {
    enum_constant public static final dev.atsushieno.ktmidi.MidiPortConnectionState CLOSED;
    enum_constant public static final dev.atsushieno.ktmidi.MidiPortConnectionState OPEN;
  }

  public interface MidiPortDetails {
    method @NonNull public String getId();
    method @Nullable public String getManufacturer();
    method @Nullable public String getName();
    method @Nullable public String getVersion();
    property @NonNull public abstract String id;
    property @Nullable public abstract String manufacturer;
    property @Nullable public abstract String name;
    property @Nullable public abstract String version;
  }

  public final class MidiProgramChangeOptions {
    field public static final int BANK_VALID = 1; // 0x1
    field @NonNull public static final dev.atsushieno.ktmidi.MidiProgramChangeOptions INSTANCE;
    field public static final int NONE = 0; // 0x0
  }

  public final class MidiProgramDefinition {
    ctor public MidiProgramDefinition();
    method public error.NonExistentClass getBanks();
    method public int getIndex();
    method @Nullable public String getName();
    method public void setBanks(error.NonExistentClass banks);
    method public void setIndex(int index);
    method public void setName(@Nullable String name);
    property public final error.NonExistentClass banks;
    property public final int index;
    property @Nullable public final String name;
  }

  public final class MidiReaderWriterKt {
    method @Deprecated public static void read(@NonNull dev.atsushieno.ktmidi.MidiMusic, @NonNull java.util.List<java.lang.Byte> stream);
    method @Deprecated public static void write(@NonNull dev.atsushieno.ktmidi.MidiMusic, @NonNull java.util.List<java.lang.Byte> stream, optional @NonNull kotlin.jvm.functions.Function3<? super java.lang.Boolean,? super dev.atsushieno.ktmidi.MidiMessage,? super java.util.List<java.lang.Byte>,java.lang.Integer> metaEventWriter, optional boolean disableRunningStatus);
  }

  public final class MidiReaderWriterTest {
    ctor public MidiReaderWriterTest();
    method public void readMusicFromResource();
    method public void writeMetaText();
  }

  public final class MidiRpn {
    field public static final int COARSE_TUNING = 2; // 0x2
    field public static final int FINE_TUNING = 1; // 0x1
    field @NonNull public static final dev.atsushieno.ktmidi.MidiRpn INSTANCE;
    field public static final int MODULATION_DEPTH = 5; // 0x5
    field public static final int PITCH_BEND_SENSITIVITY = 0; // 0x0
    field public static final int TUNING_BANK_SELECT = 4; // 0x4
    field public static final int TUNING_PROGRAM = 3; // 0x3
  }

  public final class MidiSystemStatus {
    field public static final int ACTIVE_SENSING = 254; // 0xfe
    field public static final int CONTINUE = 251; // 0xfb
    field @NonNull public static final dev.atsushieno.ktmidi.MidiSystemStatus INSTANCE;
    field public static final int MIDI_TIME_CODE = 241; // 0xf1
    field public static final int RESET = 255; // 0xff
    field public static final int SONG_POSITION = 242; // 0xf2
    field public static final int SONG_SELECT = 243; // 0xf3
    field public static final int START = 250; // 0xfa
    field public static final int STOP = 252; // 0xfc
    field public static final int TIMING_CLOCK = 248; // 0xf8
    field public static final int TUNE_REQUEST = 246; // 0xf6
  }

  @Deprecated public final class MidiTrack {
    ctor @Deprecated public MidiTrack(optional @NonNull java.util.List<dev.atsushieno.ktmidi.MidiMessage> messages);
    method @Deprecated @NonNull public java.util.List<dev.atsushieno.ktmidi.MidiMessage> getMessages();
    property @NonNull public final java.util.List<dev.atsushieno.ktmidi.MidiMessage> messages;
  }

  @Deprecated public class MidiTrackSplitter {
    ctor @Deprecated public MidiTrackSplitter(@NonNull java.util.List<dev.atsushieno.ktmidi.MidiMessage> source, byte deltaTimeSpec);
    method @Deprecated public int getTrackId(@NonNull dev.atsushieno.ktmidi.MidiMessage e);
    method @Deprecated @NonNull public final dev.atsushieno.ktmidi.MidiMusic split();
    field @Deprecated @NonNull public static final dev.atsushieno.ktmidi.MidiTrackSplitter.Companion Companion;
  }

  @Deprecated public static final class MidiTrackSplitter.Companion {
    method @Deprecated @NonNull public dev.atsushieno.ktmidi.MidiMusic split(@NonNull java.util.List<dev.atsushieno.ktmidi.MidiMessage> source, byte deltaTimeSpec);
  }

  public final class MidiUtilityStatus {
    field public static final int DCTPQ = 48; // 0x30
    field public static final int DELTA_CLOCKSTAMP = 64; // 0x40
    field @NonNull public static final dev.atsushieno.ktmidi.MidiUtilityStatus INSTANCE;
    field public static final int JR_CLOCK = 16; // 0x10
    field public static final int JR_TIMESTAMP = 32; // 0x20
    field public static final int NOP = 0; // 0x0
  }

  public fun interface OnMidi1EventListener {
    method public void onEvent(@NonNull dev.atsushieno.ktmidi.Midi1Event m);
  }

  public fun interface OnMidi2EventListener {
    method public void onEvent(@NonNull dev.atsushieno.ktmidi.Ump e);
  }

  @Deprecated public fun interface OnMidiEventListener {
    method @Deprecated public void onEvent(@NonNull dev.atsushieno.ktmidi.MidiEvent e);
  }

  @Deprecated public fun interface OnMidiMessageListener {
    method @Deprecated public void onMessage(@NonNull dev.atsushieno.ktmidi.MidiMessage m);
  }

  public fun interface OnMidiReceivedEventListener {
    method public void onEventReceived(@NonNull byte[] data, int start, int length, long timestampInNanoseconds);
  }

  public final class PerformanceTextStatus {
    field @NonNull public static final dev.atsushieno.ktmidi.PerformanceTextStatus INSTANCE;
    field public static final byte LYRICS = 1; // 0x1
    field public static final byte LYRICS_LANGUAGE = 2; // 0x2
    field public static final byte RUBY = 3; // 0x3
    field public static final byte RUBY_LANGUAGE = 4; // 0x4
    field public static final byte UNKNOWN = 0; // 0x0
  }

  public enum PlayerState {
    enum_constant public static final dev.atsushieno.ktmidi.PlayerState PAUSED;
    enum_constant public static final dev.atsushieno.ktmidi.PlayerState PLAYING;
    enum_constant public static final dev.atsushieno.ktmidi.PlayerState STOPPED;
  }

  public final class PortCreatorContext {
    ctor public PortCreatorContext(@NonNull String applicationName, @NonNull String portName, @NonNull String manufacturer, @NonNull String version);
    method @NonNull public String component1();
    method @NonNull public String component2();
    method @NonNull public String component3();
    method @NonNull public String component4();
    method @NonNull public dev.atsushieno.ktmidi.PortCreatorContext copy(@NonNull String applicationName, @NonNull String portName, @NonNull String manufacturer, @NonNull String version);
    method @NonNull public String getApplicationName();
    method @NonNull public String getManufacturer();
    method @NonNull public String getPortName();
    method @NonNull public String getVersion();
    method public void setApplicationName(@NonNull String applicationName);
    method public void setManufacturer(@NonNull String manufacturer);
    method public void setPortName(@NonNull String portName);
    method public void setVersion(@NonNull String version);
    property @NonNull public final String applicationName;
    property @NonNull public final String manufacturer;
    property @NonNull public final String portName;
    property @NonNull public final String version;
  }

  public enum SeekFilterResult {
    enum_constant public static final dev.atsushieno.ktmidi.SeekFilterResult BLOCK;
    enum_constant public static final dev.atsushieno.ktmidi.SeekFilterResult BLOCK_AND_TERMINATE;
    enum_constant public static final dev.atsushieno.ktmidi.SeekFilterResult PASS;
    enum_constant public static final dev.atsushieno.ktmidi.SeekFilterResult PASS_AND_TERMINATE;
  }

  public fun interface SeekProcessor<TEvent> {
    method @NonNull public dev.atsushieno.ktmidi.SeekFilterResult filterEvent(@Nullable TEvent evt);
  }

  public final class SimpleAdjustingMidiPlayerTimer implements dev.atsushieno.ktmidi.MidiPlayerTimer {
    ctor public SimpleAdjustingMidiPlayerTimer(optional @NonNull kotlin.time.TimeSource timeSource);
    method public void stop();
    method @Nullable public suspend Object waitBySeconds(double addedSeconds, @NonNull kotlin.coroutines.Continuation<? super kotlin.Unit> p);
  }

  public final class SimpleVirtualMidiInput extends dev.atsushieno.ktmidi.SimpleVirtualMidiPort implements dev.atsushieno.ktmidi.MidiInput {
    ctor public SimpleVirtualMidiInput(@NonNull dev.atsushieno.ktmidi.MidiPortDetails details, @NonNull kotlin.jvm.functions.Function0<kotlin.Unit> onDispose);
    method public void setMessageReceivedListener(@NonNull dev.atsushieno.ktmidi.OnMidiReceivedEventListener listener);
  }

  public final class SimpleVirtualMidiOutput extends dev.atsushieno.ktmidi.SimpleVirtualMidiPort implements dev.atsushieno.ktmidi.MidiOutput {
    ctor public SimpleVirtualMidiOutput(@NonNull dev.atsushieno.ktmidi.MidiPortDetails details, @NonNull kotlin.jvm.functions.Function0<kotlin.Unit> onDispose);
    method @NonNull public kotlin.jvm.functions.Function4<byte[],java.lang.Integer,java.lang.Integer,java.lang.Long,kotlin.Unit> getOnSend();
    method public void send(@NonNull byte[] mevent, int offset, int length, long timestampInNanoseconds);
    method public void setOnSend(@NonNull kotlin.jvm.functions.Function4<? super byte[],? super java.lang.Integer,? super java.lang.Integer,? super java.lang.Long,kotlin.Unit> onSend);
    property @NonNull public final kotlin.jvm.functions.Function4<byte[],java.lang.Integer,java.lang.Integer,java.lang.Long,kotlin.Unit> onSend;
  }

  public abstract class SimpleVirtualMidiPort implements dev.atsushieno.ktmidi.MidiPort {
    ctor protected SimpleVirtualMidiPort(@NonNull dev.atsushieno.ktmidi.MidiPortDetails details, @NonNull kotlin.jvm.functions.Function0<kotlin.Unit> onDispose);
    method public void close();
    method @NonNull public dev.atsushieno.ktmidi.MidiPortConnectionState getConnectionState();
    method @NonNull public dev.atsushieno.ktmidi.MidiPortDetails getDetails();
    method public int getMidiProtocol();
    method public void setMidiProtocol(int _);
    property @NonNull public dev.atsushieno.ktmidi.MidiPortConnectionState connectionState;
    property @NonNull public dev.atsushieno.ktmidi.MidiPortDetails details;
    property public int midiProtocol;
  }

  public final class SmfParserException extends java.lang.Exception {
    ctor public SmfParserException();
    ctor public SmfParserException(@NonNull String message);
    ctor public SmfParserException(@NonNull String message, @NonNull Exception innerException);
  }

  @Deprecated public final class SmfWriterExtension {
    ctor @Deprecated public SmfWriterExtension();
    field @Deprecated @NonNull public static final dev.atsushieno.ktmidi.SmfWriterExtension.Companion Companion;
  }

  @Deprecated public static final class SmfWriterExtension.Companion {
    method @Deprecated @NonNull public kotlin.jvm.functions.Function3<java.lang.Boolean,dev.atsushieno.ktmidi.MidiMessage,java.util.List<java.lang.Byte>,java.lang.Integer> getDEFAULT_META_EVENT_WRITER();
    property @NonNull public final kotlin.jvm.functions.Function3<java.lang.Boolean,dev.atsushieno.ktmidi.MidiMessage,java.util.List<java.lang.Byte>,java.lang.Integer> DEFAULT_META_EVENT_WRITER;
  }

  public final class TestHelper {
    ctor public TestHelper();
    field @NonNull public static final dev.atsushieno.ktmidi.TestHelper.Companion Companion;
  }

  public static final class TestHelper.Companion {
    method @NonNull public dev.atsushieno.ktmidi.Midi1Music getMidiMusic();
    method @NonNull public dev.atsushieno.ktmidi.Midi1Music getMidiMusic(@NonNull String resourceId);
    method @Nullable public suspend Object getMidiPlayer(@Nullable dev.atsushieno.ktmidi.MidiPlayerTimer timeManager, @Nullable dev.atsushieno.ktmidi.Midi1Music midiMusic, optional @Nullable dev.atsushieno.ktmidi.MidiAccess midiAccess, optional @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.Midi1Player> p);
    method @Nullable public suspend Object getMidiPlayer(optional @Nullable dev.atsushieno.ktmidi.MidiPlayerTimer timeManager, optional @Nullable dev.atsushieno.ktmidi.MidiAccess midiAccess, optional @Nullable String resourceId, optional @NonNull kotlin.coroutines.Continuation<? super dev.atsushieno.ktmidi.Midi1Player> p);
  }

  public final class Timed<T> {
    ctor public Timed(@NonNull dev.atsushieno.ktmidi.Dc duration, @Nullable T value);
    method @NonNull public dev.atsushieno.ktmidi.Dc component1();
    method public T component2();
    method @NonNull public dev.atsushieno.ktmidi.Timed<T> copy(@NonNull dev.atsushieno.ktmidi.Dc duration, T value);
    method @NonNull public dev.atsushieno.ktmidi.Dc getDuration();
    method public T getValue();
    property @NonNull public final dev.atsushieno.ktmidi.Dc duration;
    property public final T value;
  }

  public final class TonicNoteField {
    field public static final byte A = 1; // 0x1
    field public static final byte B = 2; // 0x2
    field public static final byte C = 3; // 0x3
    field public static final byte D = 4; // 0x4
    field public static final byte E = 5; // 0x5
    field public static final byte F = 6; // 0x6
    field public static final byte G = 7; // 0x7
    field @NonNull public static final dev.atsushieno.ktmidi.TonicNoteField INSTANCE;
    field public static final byte NON_STANDARD = 0; // 0x0
    field public static final byte UNKNOWN = 0; // 0x0
  }

  public final class Ump {
    ctor public Ump(int int1, optional int int2, optional int int3, optional int int4);
    ctor public Ump(long long1, optional long long2);
    method public int component1();
    method public int component2();
    method public int component3();
    method public int component4();
    method @NonNull public dev.atsushieno.ktmidi.Ump copy(int int1, int int2, int int3, int int4);
    method public int getInt1();
    method public int getInt2();
    method public int getInt3();
    method public int getInt4();
    property public final int int1;
    property public final int int2;
    property public final int int3;
    property public final int int4;
    field @NonNull public static final dev.atsushieno.ktmidi.Ump.Companion Companion;
  }

  public static final class Ump.Companion {
    method public error.NonExistentClass fromBytes(@NonNull byte[] bytes, int offset, int count);
  }

  public enum UmpBinaryRetrieverFallback {
    enum_constant public static final dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback Break;
    enum_constant public static final dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback Exception;
  }

  public final class UmpException extends java.lang.Exception {
    ctor public UmpException();
    ctor public UmpException(@NonNull String message);
    ctor public UmpException(@NonNull String message, @NonNull Exception innerException);
  }

  public final class UmpFactory {
    method @NonNull public dev.atsushieno.ktmidi.Ump chordName(byte group, byte address, byte channel, byte tonicSharpsFlats, byte chordTonic, byte chordType, int alter1, int alter2, int alter3, int alter4, byte bassSharpsFlats, byte bassNote, byte bassChordType, int bassAlter1, int bassAlter2);
    method public int dctpq(short numberOfTicksPerQuarterNote);
    method public int deltaClockstamp(int ticks20);
    method @NonNull public dev.atsushieno.ktmidi.Ump deviceIdentityNotification(@NonNull dev.atsushieno.ktmidi.ci.DeviceDetails device);
    method @NonNull public dev.atsushieno.ktmidi.Ump endOfClip();
    method @NonNull public dev.atsushieno.ktmidi.Ump endpointDiscovery(byte umpVersionMajor, byte umpVersionMinor, byte filterBitmap);
    method @NonNull public dev.atsushieno.ktmidi.Ump endpointInfoNotification(byte umpVersionMajor, byte umpVersionMinor, boolean isStaticFunctionBlock, byte functionBlockCount, boolean midi2Capable, boolean midi1Capable, boolean supportsRxJR, boolean supportsTxJR);
    method public error.NonExistentClass endpointNameNotification(@NonNull String name);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> endpointNameNotification(@NonNull byte[] name);
    method @NonNull public dev.atsushieno.ktmidi.Ump flexDataCompleteBinary(byte group, byte address, byte channel, byte statusByte, int int2, optional int int3, optional int int4);
    method public void flexDataProcess(byte group, byte address, byte channel, byte statusBank, byte status, @NonNull byte[] text, optional @Nullable Object context, optional @NonNull kotlin.jvm.functions.Function2<? super dev.atsushieno.ktmidi.Ump,java.lang.Object,kotlin.Unit> sendUMP128);
    method public error.NonExistentClass flexDataText(byte group, byte address, byte channel, byte statusBank, byte status, @NonNull String text);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> flexDataText(byte group, byte address, byte channel, byte statusBank, byte status, @NonNull byte[] text);
    method @NonNull public Iterable<dev.atsushieno.ktmidi.Ump> fromPlatformBytes(@NonNull io.ktor.utils.io.core.ByteOrder byteOrder, @NonNull java.util.List<java.lang.Byte> bytes);
    method @NonNull public Iterable<dev.atsushieno.ktmidi.Ump> fromPlatformNativeBytes(@NonNull java.util.List<java.lang.Byte> bytes);
    method @NonNull public dev.atsushieno.ktmidi.Ump functionBlockDiscovery(byte fbNumber, byte filter);
    method @NonNull public dev.atsushieno.ktmidi.Ump functionBlockInfoNotification(boolean isFbActive, byte fbNumber, byte uiHint, byte midi1, byte direction, byte firstGroup, byte numberOfGroupsSpanned, byte midiCIMessageVersionFormat, int maxSysEx8Streams);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> functionBlockNameNotification(byte blockNumber, @NonNull String name);
    method public int jrClock(int senderClockTime16);
    method @Deprecated public int jrClock(int group, int senderClockTime16);
    method public int jrClock(double senderClockTimeSeconds);
    method @Deprecated public int jrClock(int group, double senderClockTimeSeconds);
    method public int jrTimestamp(int senderClockTimestamp16);
    method @Deprecated public int jrTimestamp(int group, int senderClockTimestamp16);
    method public int jrTimestamp(double senderClockTimestampSeconds);
    method @Deprecated public int jrTimestamp(int group, double senderClockTimestampSeconds);
    method @NonNull public kotlin.sequences.Sequence<java.lang.Integer> jrTimestamps(long senderClockTimestampTicks);
    method @Deprecated @NonNull public kotlin.sequences.Sequence<java.lang.Integer> jrTimestamps(int group, long senderClockTimestampTicks);
    method @NonNull public kotlin.sequences.Sequence<java.lang.Integer> jrTimestamps(double senderClockTimestampSeconds);
    method @Deprecated @NonNull public kotlin.sequences.Sequence<java.lang.Integer> jrTimestamps(int group, double senderClockTimestampSeconds);
    method @NonNull public dev.atsushieno.ktmidi.Ump keySignature(byte group, byte address, byte channel, byte sharpsOrFlats, byte tonicNote);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> mds(byte group, @NonNull java.util.List<java.lang.Byte> data, optional byte mdsId);
    method @Deprecated @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> mds(int group, @NonNull java.util.List<java.lang.Byte> data, optional byte mdsId);
    method public int mdsGetChunkCount(int numTotalBytesInMDS);
    method @NonNull public kotlin.Pair<java.lang.Long,java.lang.Long> mdsGetHeader(byte group, byte mdsId, int numBytesInChunk16, int numChunks16, int chunkIndex16, int manufacturerId16, int deviceId16, int subId16, int subId2_16);
    method public int mdsGetPayloadCount(int numTotalBytesInChunk);
    method @NonNull public kotlin.Pair<java.lang.Long,java.lang.Long> mdsGetPayloadOf(byte group, byte mdsId, int numBytes16, @NonNull java.util.List<java.lang.Byte> srcData, int offset);
    method public void mdsProcess(byte group, byte mdsId, @NonNull java.util.List<java.lang.Byte> data, optional @Nullable Object context, @NonNull kotlin.jvm.functions.Function5<? super java.lang.Long,? super java.lang.Long,? super java.lang.Integer,? super java.lang.Integer,java.lang.Object,kotlin.Unit> sendUmp);
    method public error.NonExistentClass metadataText(byte group, byte address, byte channel, byte status, @NonNull String text);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> metadataText(byte group, byte address, byte channel, byte status, @NonNull byte[] text);
    method @NonNull public dev.atsushieno.ktmidi.Ump metronome(byte group, byte channel, byte numClocksPerPrimeryClick, byte barAccent1, byte barAccent2, byte barAccent3, byte numSubdivisionClick1, byte numSubdivisionClick2);
    method public int midi1CAf(int group, int channel, byte data);
    method public int midi1CC(int group, int channel, byte index, byte data);
    method public int midi1Message(int group, byte code, int channel, byte byte3, byte byte4);
    method public int midi1NoteOff(int group, int channel, byte note, byte velocity);
    method public int midi1NoteOn(int group, int channel, byte note, byte velocity);
    method public int midi1PAf(int group, int channel, byte note, byte data);
    method public int midi1PitchBend(int group, int channel, short data);
    method public int midi1PitchBendDirect(int group, int channel, short data);
    method public int midi1PitchBendSplit(int group, int channel, byte dataLSB, byte dataMSB);
    method public int midi1Program(int group, int channel, byte program);
    method public long midi2CAf(int group, int channel, long data32);
    method public long midi2CC(int group, int channel, int index8, long data32);
    method public long midi2ChannelMessage8_8_16_16(int group, int code, int channel, int byte3, int byte4, int short1, int short2);
    method public long midi2ChannelMessage8_8_32(int group, int code, int channel, int byte3, int byte4, long rest32);
    method public long midi2NRPN(int group, int channel, int bankAkaMSB8, int indexAkaLSB8, long dataAkaDTE32);
    method public long midi2NoteOff(int group, int channel, int note, byte attributeType8, int velocity16, int attributeData16);
    method public long midi2NoteOn(int group, int channel, int note, byte attributeType8, int velocity16, int attributeData16);
    method public long midi2PAf(int group, int channel, int note, long data32);
    method public long midi2PerNoteACC(int group, int channel, int note, int index8, long data32);
    method public long midi2PerNoteManagement(int group, int channel, int note, int optionFlags);
    method public long midi2PerNotePitchBend(int group, int channel, int note, long data32);
    method public long midi2PerNotePitchBendDirect(int group, int channel, int note, long data32);
    method public long midi2PerNoteRCC(int group, int channel, int note, int index8, long data32);
    method public long midi2PitchBend(int group, int channel, long data32);
    method public long midi2PitchBendDirect(int group, int channel, long data32);
    method public long midi2Program(int group, int channel, int optionFlags, int program8, int bankMSB8, int bankLSB8);
    method public long midi2RPN(int group, int channel, int bankAkaMSB8, int indexAkaLSB8, long dataAkaDTE32);
    method public long midi2RelativeNRPN(int group, int channel, int bankAkaMSB8, int indexAkaLSB8, long dataAkaDTE32);
    method public long midi2RelativeRPN(int group, int channel, int bankAkaMSB8, int indexAkaLSB8, long dataAkaDTE32);
    method public int noop();
    method @Deprecated public int noop(int group);
    method public error.NonExistentClass performanceText(byte group, byte address, byte channel, byte status, @NonNull String text);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> performanceText(byte group, byte address, byte channel, byte status, @NonNull byte[] text);
    method public int pitch7_9(double pitch);
    method public int pitch7_9Split(byte semitone, double microtone0To1);
    method public error.NonExistentClass productInstanceNotification(@NonNull String id);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> productInstanceNotification(@NonNull byte[] id);
    method @NonNull public dev.atsushieno.ktmidi.Ump startOfClip();
    method @NonNull public dev.atsushieno.ktmidi.Ump streamConfigNotification(byte protocol, boolean rxJRTimestamp, boolean txJRTimestamp);
    method @NonNull public dev.atsushieno.ktmidi.Ump streamConfigRequest(byte protocol, boolean rxJRTimestamp, boolean txJRTimestamp);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> sysex7(int group, @NonNull java.util.List<java.lang.Byte> sysex);
    method public long sysex7Direct(int group, byte status, int numBytes, byte data1, byte data2, byte data3, byte data4, byte data5, byte data6);
    method public int sysex7GetPacketCount(int numSysex7Bytes);
    method public long sysex7GetPacketOf(int group, int numBytes, @NonNull java.util.List<java.lang.Byte> srcData, int index);
    method public int sysex7GetSysexLength(@NonNull java.util.List<java.lang.Byte> srcData);
    method public void sysex7Process(int group, @NonNull java.util.List<java.lang.Byte> sysex, optional @Nullable Object context, optional @NonNull kotlin.jvm.functions.Function2<? super java.lang.Long,java.lang.Object,kotlin.Unit> sendUMP64);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.Ump> sysex8(int group, @NonNull java.util.List<java.lang.Byte> sysex, optional byte streamId);
    method public int sysex8GetPacketCount(int numBytes);
    method @NonNull public kotlin.Pair<java.lang.Long,java.lang.Long> sysex8GetPacketOf(int group, byte streamId, int numBytes, @NonNull java.util.List<java.lang.Byte> srcData, int index);
    method @Deprecated public void sysex8Process(int group, @NonNull java.util.List<java.lang.Byte> sysex, byte streamId, @NonNull kotlin.jvm.functions.Function3<? super java.lang.Long,? super java.lang.Long,java.lang.Object,kotlin.Unit> sendUMP128, @Nullable Object context);
    method public void sysex8Process(int group, @NonNull java.util.List<java.lang.Byte> sysex, optional byte streamId, optional @Nullable Object context, optional @NonNull kotlin.jvm.functions.Function3<? super java.lang.Long,? super java.lang.Long,java.lang.Object,kotlin.Unit> sendUMP128);
    method public int systemMessage(int group, byte status, byte midi1Byte2, byte midi1Byte3);
    method @NonNull public dev.atsushieno.ktmidi.Ump tempo(byte group, byte channel, int numberOf10NanosecondsPerQuarterNote);
    method @NonNull public dev.atsushieno.ktmidi.Ump timeSignatureDirect(byte group, byte channel, byte numerator, byte rawDenominator, byte numberOf32Notes);
    method public int umpGetNumBytes(int data);
    field @NonNull public static final dev.atsushieno.ktmidi.UmpFactory INSTANCE;
  }

  public final class UmpFactoryKt {
    field public static final int JR_TIMESTAMP_TICKS_PER_SECOND = 31250; // 0x7a12
    field public static final byte MIDI_2_0_RESERVED = 0; // 0x0
  }

  public final class UmpFactoryTest {
    ctor public UmpFactoryTest();
    method public void fromPlatformBytes();
    method public void performanceText();
    method public void sysex7Process();
    method public void sysex8Process();
    method public void testChordName();
    method public void testDeviceIdentityNotification();
    method public void testEndpointDiscovery();
    method public void testEndpointInfoNotification();
    method public void testEndpointNameNotification();
    method public void testFunctionBlockDiscovery();
    method public void testFunctionBlockInfoNotification();
    method public void testFunctionBlockNameNotification();
    method public void testKeySignature();
    method public void testMetadataText();
    method public void testMetronome();
    method public void testProductInstanceIdNotification();
    method public void testStreamConfigNotification();
    method public void testStreamConfigRequest();
    method public void testTempo();
    method public void testTimeSignatureDirect();
    method public void testType0Messages();
    method public void testType1Messages();
    method public void testType2Messages();
    method public void testType3Messages();
    method public void testType4Messages();
    method public void testType5Messages();
  }

  public final class UmpFactoryTestKt {
  }

  public final class UmpRetrievalKt {
    method public static int getChannelInGroup(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getChordNameAlter1(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getChordNameAlter2(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getChordNameAlter3(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getChordNameAlter4(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getChordNameBassAlter1(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getChordNameBassAlter2(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameBassChordType(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameBassNote(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameBassSharpsFlats(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameChordTonic(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameChordType(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static byte getChordNameSharpsFlats(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getDctpq(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getDeltaClockstamp(@NonNull dev.atsushieno.ktmidi.Ump);
    method @NonNull public static dev.atsushieno.ktmidi.ci.DeviceDetails getDeviceIdentity(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointDiscoveryFilterBitmap(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointDiscoveryUmpVersionMajor(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointDiscoveryUmpVersionMinor(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointInfoFunctionBlockCount(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean getEndpointInfoMidi1Capable(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean getEndpointInfoMidi2Capable(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean getEndpointInfoStaticFunctionBlocks(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean getEndpointInfoSupportsRxJR(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean getEndpointInfoSupportsTxJR(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointInfoUmpVersionMajor(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getEndpointInfoUmpVersionMinor(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getFlexDataFormat(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static byte getFlexDataStatus(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static byte getFlexDataStatusBank(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean getFunctionBlockActive(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockCIVersion(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockCount(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockDirection(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockDiscoveryFilter(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockFirstGroup(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockGroupCount(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockMaxSysEx8(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockMidi1Port(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getFunctionBlockUiHint(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getGroup(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getGroupAndChannel(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getGroupByte(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getJrClock(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getJrTimestamp(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static byte getKeySignatureSharpsFlats(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static byte getKeySignatureTonicNote(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMdsChunkByteSize(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMdsChunkCount(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMdsChunkIndex(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMdsDeviceId(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMdsId(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMdsManufacturerId(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMdsSubId1(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMdsSubId2(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMessageType(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeBarAccent1(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeBarAccent2(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeBarAccent3(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeClocksPerPrimaryClick(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeSubDivisionClick1(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMetronomeSubDivisionClick2(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1CAf(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1CCData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1CCIndex(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1Lsb(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1Msb(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1Note(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1PAfData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1PitchBendData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1Program(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi1Velocity(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getMidi2CAfData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getMidi2CCData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2CCIndex(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2Note(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2NoteAttributeData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2NoteAttributeType(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getMidi2NrpnData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2NrpnLsb(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2NrpnMsb(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getMidi2PAfData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getMidi2PerNoteACCData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2PerNoteACCIndex(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2PerNoteManagementOptions(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getMidi2PerNoteRCCData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2PerNoteRCCIndex(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getMidi2PitchBendData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2ProgramBankLsb(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2ProgramBankMsb(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2ProgramOptions(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2ProgramProgram(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass getMidi2RpnData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2RpnLsb(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2RpnMsb(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getMidi2Velocity16(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getSizeInBytes(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getSizeInInts(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getStatusByte(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getStatusCode(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getStreamConfigProtocol(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean getStreamConfigSupportsRxJR(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean getStreamConfigSupportsTxJR(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getSysex7Size(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getSysex8Size(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getSysex8StreamId(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getTempo(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getTimeSignatureDenominator(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getTimeSignatureNumberOf32thNotes(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getTimeSignatureNumerator(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static int getUmpStreamFormat(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isChordName(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isDCTPQ(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isDeltaClockstamp(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isEndOfClip(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isFlexData(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isJRClock(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isJRTimestamp(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isKeySignature(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isMetronome(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isStartOfClip(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isTempo(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isTimeSignature(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static boolean isUmpStream(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static error.NonExistentClass toInts(@NonNull dev.atsushieno.ktmidi.Ump);
    method public static void toPlatformBytes(@NonNull dev.atsushieno.ktmidi.Ump, @NonNull byte[] bytes, int offset, @NonNull io.ktor.utils.io.core.ByteOrder byteOrder);
    method public static void toPlatformBytes(@NonNull dev.atsushieno.ktmidi.Ump, @NonNull byte[] bytes, int offset);
    method @NonNull public static byte[] toPlatformBytes(@NonNull dev.atsushieno.ktmidi.Ump, @NonNull io.ktor.utils.io.core.ByteOrder byteOrder);
    method @NonNull public static byte[] toPlatformNativeBytes(@NonNull dev.atsushieno.ktmidi.Ump);
  }

  public final class UmpRetriever {
    method @NonNull public String getEndpointName(@NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method @NonNull public java.util.List<java.lang.Byte> getEndpointNameBytes(@NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method @NonNull public String getFlexDataText(@NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method @NonNull public java.util.List<java.lang.Byte> getFlexDataTextBytes(@NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public void getFlexDataTextBytes(@NonNull kotlin.jvm.functions.Function1<? super java.util.List<java.lang.Byte>,kotlin.Unit> outputter, @NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method @NonNull public String getFunctionBlockName(@NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method @NonNull public java.util.List<java.lang.Byte> getFunctionBlockNameBytes(@NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method @NonNull public String getProductInstanceId(@NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method @NonNull public java.util.List<java.lang.Byte> getProductInstanceIdBytes(@NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method @NonNull public java.util.List<java.lang.Byte> getSysex7Data(@NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> iter, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public void getSysex7Data(@NonNull kotlin.jvm.functions.Function1<? super java.util.List<java.lang.Byte>,kotlin.Unit> outputter, @NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method @NonNull public java.util.List<java.lang.Byte> getSysex8Data(@NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> iter, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    method public void getSysex8Data(@NonNull kotlin.jvm.functions.Function1<? super java.util.List<java.lang.Byte>,kotlin.Unit> outputter, @NonNull java.util.Iterator<dev.atsushieno.ktmidi.Ump> input, optional @NonNull dev.atsushieno.ktmidi.UmpBinaryRetrieverFallback fallback);
    field @NonNull public static final dev.atsushieno.ktmidi.UmpRetriever INSTANCE;
  }

  public final class UmpRetrieverTest {
    ctor public UmpRetrieverTest();
    method public void getSysex7Data1();
    method public void getSysex7Data2();
    method public void getSysex8Data();
    method public void performanceText();
    method public void testChordName();
    method public void testChordName2();
    method public void testDeviceIdentityNotification();
    method public void testEndpointDiscovery();
    method public void testEndpointInfoNotification();
    method public void testEndpointNameNotification();
    method public void testEndpointNameNotification2();
    method public void testFunctionBlockDiscovery();
    method public void testFunctionBlockInfoNotification();
    method public void testFunctionBlockNameNotification();
    method public void testFunctionBlockNameNotification2();
    method public void testKeySignature();
    method public void testMetadataText();
    method public void testMetadataText2();
    method public void testMetadataText3();
    method public void testMetronome();
    method public void testProductInstanceIdNotification();
    method public void testStreamConfigNotification();
    method public void testStreamConfigRequest();
    method public void testTempo();
    method public void testTimeSignature();
  }

  public final class UmpStreamStatus {
    field public static final byte DEVICE_IDENTITY_NOTIFICATION = 2; // 0x2
    field public static final byte ENDPOINT_DISCOVERY = 0; // 0x0
    field public static final byte ENDPOINT_INFO_NOTIFICATION = 1; // 0x1
    field public static final byte ENDPOINT_NAME_NOTIFICATION = 3; // 0x3
    field public static final byte END_OF_CLIP = 33; // 0x21
    field public static final byte FUNCTION_BLOCK_DISCOVERY = 16; // 0x10
    field public static final byte FUNCTION_BLOCK_INFO_NOTIFICATION = 17; // 0x11
    field public static final byte FUNCTION_BLOCK_NAME_NOTIFICATION = 18; // 0x12
    field @NonNull public static final dev.atsushieno.ktmidi.UmpStreamStatus INSTANCE;
    field public static final byte PRODUCT_INSTANCE_ID_NOTIFICATION = 4; // 0x4
    field public static final byte START_OF_CLIP = 32; // 0x20
    field public static final byte STREAM_CONFIGURATION = 5; // 0x5
    field public static final byte STREAM_CONFIGURATION_NOTIFICATION = 6; // 0x6
  }

  public final class UmpTest {
    ctor public UmpTest();
    method public void testToAndFromBytes();
  }

  public final class UmpToMidi1BytesTranslatorContext {
    ctor public UmpToMidi1BytesTranslatorContext(optional int deltaTimeMasterClock, optional boolean treatJRTimestampAsSmfDeltaTime, optional boolean skipDeltaTime);
    method public int getDeltaTimeMasterClock();
    method public boolean getSkipDeltaTime();
    method public boolean getTreatJRTimestampAsSmfDeltaTime();
    property public final int deltaTimeMasterClock;
    property public final boolean skipDeltaTime;
    property public final boolean treatJRTimestampAsSmfDeltaTime;
  }

  public final class UmpTranslationResult {
    field public static final int INCOMPLETE_SYSEX7 = 32; // 0x20
    field @NonNull public static final dev.atsushieno.ktmidi.UmpTranslationResult INSTANCE;
    field public static final int INVALID_DTE_SEQUENCE = 17; // 0x11
    field public static final int INVALID_STATUS = 19; // 0x13
    field public static final int INVALID_SYSEX = 16; // 0x10
    field public static final int OK = 0; // 0x0
  }

  public final class UmpTranslator {
    method public int translateMidi1BytesToUmp(@NonNull dev.atsushieno.ktmidi.Midi1ToUmpTranslatorContext context);
    method public int translateSingleUmpToMidi1Bytes(@NonNull java.util.List<java.lang.Byte> dst, @NonNull dev.atsushieno.ktmidi.Ump ump, optional int dstOffset, optional @Nullable Integer deltaTime, optional @Nullable java.util.List<java.lang.Byte> sysex);
    method public int translateUmpToMidi1Bytes(@NonNull java.util.List<java.lang.Byte> dst, @NonNull kotlin.sequences.Sequence<dev.atsushieno.ktmidi.Ump> src, optional @NonNull dev.atsushieno.ktmidi.UmpToMidi1BytesTranslatorContext context);
    field @NonNull public static final dev.atsushieno.ktmidi.UmpTranslator INSTANCE;
  }

  public final class UmpTranslatorTest {
    ctor public UmpTranslatorTest();
    method public void testConvertMidi1ToUmpBankLsbAndProgramChange();
    method public void testConvertMidi1ToUmpBankMsbAndProgramChange();
    method public void testConvertMidi1ToUmpBankMsbLsbAndProgramChange();
    method public void testConvertMidi1ToUmpCAf();
    method public void testConvertMidi1ToUmpInvalidNRPN();
    method public void testConvertMidi1ToUmpInvalidRPN();
    method public void testConvertMidi1ToUmpNoteOn();
    method public void testConvertMidi1ToUmpPAf();
    method public void testConvertMidi1ToUmpPitchBend();
    method public void testConvertMidi1ToUmpSimpleCC();
    method public void testConvertMidi1ToUmpSimpleProgramChange();
    method public void testConvertMidi1ToUmpValidNRPN();
    method public void testConvertMidi1ToUmpValidRPN();
    method public void testConvertSingleUmpToMidi1();
    method public void testConvertUmpToMidi1Bytes1();
    method public void testConvertUmpToMidi1Bytes2();
  }

  public class VirtualMidiPlayerTimer implements dev.atsushieno.ktmidi.MidiPlayerTimer {
    ctor public VirtualMidiPlayerTimer();
    method public final double getTotalProceededSeconds();
    method public final double getTotalWaitedSeconds();
    method public void proceedBySeconds(double addedSeconds);
    method public final void setTotalProceededSeconds(double totalProceededSeconds);
    method public final void setTotalWaitedSeconds(double totalWaitedSeconds);
    method public void stop();
    method @Nullable public suspend Object waitBySeconds(double addedSeconds, @NonNull kotlin.coroutines.Continuation<? super kotlin.Unit> p);
    property public final double totalProceededSeconds;
    property public final double totalWaitedSeconds;
  }

  public final class WellKnownNames {
    method public error.NonExistentClass getCcFullNames();
    method public error.NonExistentClass getCcNames();
    property public final error.NonExistentClass ccFullNames;
    property public final error.NonExistentClass ccNames;
    field @NonNull public static final dev.atsushieno.ktmidi.WellKnownNames INSTANCE;
  }

}

package dev.atsushieno.ktmidi.ci {

  public final class CIFactory {
    method public void midiCI7bitInt14At(@NonNull java.util.List<java.lang.Byte> dst, int offset, short v);
    method public void midiCI7bitInt21At(@NonNull java.util.List<java.lang.Byte> dst, int offset, int v);
    method public void midiCI7bitInt28At(@NonNull java.util.List<java.lang.Byte> dst, int offset, int v);
    method public void midiCIDiscovery(@NonNull java.util.List<java.lang.Byte> dst, byte versionAndFormat, int sourceMUID, int deviceManufacturer, short deviceFamily, short deviceFamilyModelNumber, int softwareRevisionLevel, byte ciCategorySupported, int receivableMaxSysExSize);
    method public void midiCIDiscoveryCommon(@NonNull java.util.List<java.lang.Byte> dst, byte sysexSubId2, byte versionAndFormat, int sourceMUID, int destinationMUID, int deviceManufacturer3Bytes, short deviceFamily, short deviceFamilyModelNumber, int softwareRevisionLevel, byte ciCategorySupported, int receivableMaxSysExSize);
    method public void midiCIDiscoveryInvalidateMuid(@NonNull java.util.List<java.lang.Byte> dst, byte versionAndFormat, int sourceMUID, int targetMUID);
    method public void midiCIDiscoveryNak(@NonNull java.util.List<java.lang.Byte> dst, byte deviceId, byte versionAndFormat, int sourceMUID, int destinationMUID);
    method public void midiCIDiscoveryReply(@NonNull java.util.List<java.lang.Byte> dst, byte versionAndFormat, int sourceMUID, int destinationMUID, int deviceManufacturer, short deviceFamily, short deviceFamilyModelNumber, int softwareRevisionLevel, byte ciCategorySupported, int receivableMaxSysExSize);
    method public void midiCIMessageCommon(@NonNull java.util.List<java.lang.Byte> dst, byte destination, byte sysexSubId2, byte versionAndFormat, int sourceMUID, int destinationMUID);
    method public void midiCIProfile(@NonNull java.util.List<java.lang.Byte> dst, int offset, @NonNull dev.atsushieno.ktmidi.ci.MidiCIProfileId info);
    method public void midiCIProfileInquiry(@NonNull java.util.List<java.lang.Byte> dst, byte destinationChannelOr7F, int sourceMUID, int destinationMUID);
    method public void midiCIProfileInquiryReply(@NonNull java.util.List<java.lang.Byte> dst, byte source, int sourceMUID, int destinationMUID, @NonNull java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProfileId> enabledProfiles, @NonNull java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProfileId> disabledProfiles);
    method public void midiCIProfileReport(@NonNull java.util.List<java.lang.Byte> dst, byte source, boolean isEnabledReport, int sourceMUID, @NonNull dev.atsushieno.ktmidi.ci.MidiCIProfileId profile);
    method public void midiCIProfileSet(@NonNull java.util.List<java.lang.Byte> dst, byte destination, boolean turnOn, int sourceMUID, int destinationMUID, @NonNull dev.atsushieno.ktmidi.ci.MidiCIProfileId profile);
    method public void midiCIProfileSpecificData(@NonNull java.util.List<java.lang.Byte> dst, byte source, int sourceMUID, int destinationMUID, @NonNull dev.atsushieno.ktmidi.ci.MidiCIProfileId profile, int dataSize, @NonNull java.util.List<java.lang.Byte> data);
    method public void midiCIPropertyCommon(@NonNull java.util.List<java.lang.Byte> dst, byte destination, byte messageTypeSubId2, int sourceMUID, int destinationMUID, byte requestId, short headerSize, @NonNull java.util.List<java.lang.Byte> header, short numChunks, short chunkIndex, short dataSize, @NonNull java.util.List<java.lang.Byte> data);
    method public void midiCIPropertyGetCapabilities(@NonNull java.util.List<java.lang.Byte> dst, byte destination, boolean isReply, int sourceMUID, int destinationMUID, byte maxSimulutaneousRequests);
    method public void midiCIProtocolConfirmEstablished(@NonNull java.util.List<java.lang.Byte> dst, int sourceMUID, int destinationMUID, byte authorityLevel);
    method public void midiCIProtocolInfo(@NonNull java.util.List<java.lang.Byte> dst, int offset, @NonNull dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo info);
    method public void midiCIProtocolNegotiation(@NonNull java.util.List<java.lang.Byte> dst, boolean isReply, int sourceMUID, int destinationMUID, byte authorityLevel, @NonNull java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo> protocolTypes);
    method public void midiCIProtocolSet(@NonNull java.util.List<java.lang.Byte> dst, int sourceMUID, int destinationMUID, byte authorityLevel, @NonNull dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo newProtocolType);
    method public void midiCIProtocolTest(@NonNull java.util.List<java.lang.Byte> dst, boolean isInitiatorToResponder, int sourceMUID, int destinationMUID, byte authorityLevel, @NonNull java.util.List<java.lang.Byte> testData48Bytes);
    method public void midiCIProtocols(@NonNull java.util.List<java.lang.Byte> dst, int offset, @NonNull java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo> protocolTypes);
    method public void midiCiDirectUint16At(@NonNull java.util.List<java.lang.Byte> dst, int offset, short v);
    method public void midiCiDirectUint32At(@NonNull java.util.List<java.lang.Byte> dst, int offset, int v);
    field @NonNull public static final dev.atsushieno.ktmidi.ci.CIFactory INSTANCE;
    field public static final int PROFILE_CONFIGURATION_SUPPORTED = 4; // 0x4
    field public static final int PROPERTY_EXCHANGE_SUPPORTED = 8; // 0x8
    field public static final int PROTOCOL_NEGOTIATION_SUPPORTED = 2; // 0x2
    field public static final byte SUB_ID = 13; // 0xd
    field public static final byte SUB_ID_2_CONFIRM_NEW_PROTOCOL_ESTABLISHED = 21; // 0x15
    field public static final byte SUB_ID_2_DISCOVERY_INQUIRY = 112; // 0x70
    field public static final byte SUB_ID_2_DISCOVERY_REPLY = 113; // 0x71
    field public static final byte SUB_ID_2_INVALIDATE_MUID = 126; // 0x7e
    field public static final byte SUB_ID_2_NAK = 127; // 0x7f
    field public static final byte SUB_ID_2_PROFILE_DISABLED_REPORT = 37; // 0x25
    field public static final byte SUB_ID_2_PROFILE_ENABLED_REPORT = 36; // 0x24
    field public static final byte SUB_ID_2_PROFILE_INQUIRY = 32; // 0x20
    field public static final byte SUB_ID_2_PROFILE_INQUIRY_REPLY = 33; // 0x21
    field public static final byte SUB_ID_2_PROFILE_SPECIFIC_DATA = 47; // 0x2f
    field public static final byte SUB_ID_2_PROPERTY_CAPABILITIES_INQUIRY = 48; // 0x30
    field public static final byte SUB_ID_2_PROPERTY_CAPABILITIES_REPLY = 49; // 0x31
    field public static final byte SUB_ID_2_PROPERTY_GET_DATA_INQUIRY = 52; // 0x34
    field public static final byte SUB_ID_2_PROPERTY_GET_DATA_REPLY = 53; // 0x35
    field public static final byte SUB_ID_2_PROPERTY_HAS_DATA_INQUIRY = 50; // 0x32
    field public static final byte SUB_ID_2_PROPERTY_HAS_DATA_REPLY = 51; // 0x33
    field public static final byte SUB_ID_2_PROPERTY_NOTIFY = 63; // 0x3f
    field public static final byte SUB_ID_2_PROPERTY_SET_DATA_INQUIRY = 54; // 0x36
    field public static final byte SUB_ID_2_PROPERTY_SET_DATA_REPLY = 55; // 0x37
    field public static final byte SUB_ID_2_PROPERTY_SUBSCRIBE = 56; // 0x38
    field public static final byte SUB_ID_2_PROPERTY_SUBSCRIBE_REPLY = 57; // 0x39
    field public static final byte SUB_ID_2_PROTOCOL_NEGOTIATION_INQUIRY = 16; // 0x10
    field public static final byte SUB_ID_2_PROTOCOL_NEGOTIATION_REPLY = 17; // 0x11
    field public static final byte SUB_ID_2_SET_NEW_PROTOCOL = 18; // 0x12
    field public static final byte SUB_ID_2_SET_PROFILE_OFF = 35; // 0x23
    field public static final byte SUB_ID_2_SET_PROFILE_ON = 34; // 0x22
    field public static final byte SUB_ID_2_TEST_NEW_PROTOCOL_I2R = 19; // 0x13
    field public static final byte SUB_ID_2_TEST_NEW_PROTOCOL_R2I = 20; // 0x14
  }

  public final class CIFactoryTest {
    ctor public CIFactoryTest();
    method public void testDiscoveryMessages();
    method public void testProfileConfigurationMessages();
    method public void testPropertyExchangeMessages();
    method public void testProtocolNegotiationMessages();
  }

  public final class CIRetrieval {
    method public byte midiCIGetDestination(@NonNull java.util.List<java.lang.Byte> sysex);
    method public int midiCIGetDestinationMUID(@NonNull java.util.List<java.lang.Byte> sysex);
    method @NonNull public dev.atsushieno.ktmidi.ci.DeviceDetails midiCIGetDeviceDetails(@NonNull java.util.List<java.lang.Byte> sysex);
    method public byte midiCIGetMaxPropertyRequests(@NonNull java.util.List<java.lang.Byte> sysex);
    method @NonNull public dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo midiCIGetNewProtocol(@NonNull java.util.List<java.lang.Byte> sysex);
    method @NonNull public dev.atsushieno.ktmidi.ci.MidiCIProfileId midiCIGetProfileId(@NonNull java.util.List<java.lang.Byte> sysex);
    method @NonNull public java.util.List<kotlin.Pair<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean>> midiCIGetProfileSet(@NonNull java.util.List<java.lang.Byte> sysex);
    method public int midiCIGetProfileSpecificDataSize(@NonNull java.util.List<java.lang.Byte> sysex);
    method public int midiCIGetSourceMUID(@NonNull java.util.List<java.lang.Byte> sysex);
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo> midiCIGetSupportedProtocols(@NonNull java.util.List<java.lang.Byte> sysex);
    method public error.NonExistentClass midiCIGetTestData(@NonNull java.util.List<java.lang.Byte> sysex);
    field @NonNull public static final dev.atsushieno.ktmidi.ci.CIRetrieval INSTANCE;
  }

  public final class DeviceDetails {
    ctor public DeviceDetails(optional int manufacturer, optional short family, optional short familyModelNumber, optional int softwareRevisionLevel);
    method public int component1();
    method public short component2();
    method public short component3();
    method public int component4();
    method @NonNull public dev.atsushieno.ktmidi.ci.DeviceDetails copy(int manufacturer, short family, short familyModelNumber, int softwareRevisionLevel);
    method public short getFamily();
    method public short getFamilyModelNumber();
    method public int getManufacturer();
    method public int getSoftwareRevisionLevel();
    property public final short family;
    property public final short familyModelNumber;
    property public final int manufacturer;
    property public final int softwareRevisionLevel;
    field @NonNull public static final dev.atsushieno.ktmidi.ci.DeviceDetails.Companion Companion;
  }

  public static final class DeviceDetails.Companion {
    method @NonNull public dev.atsushieno.ktmidi.ci.DeviceDetails getEmpty();
    property @NonNull public final dev.atsushieno.ktmidi.ci.DeviceDetails empty;
  }

  public final class MidiCIAuthorityLevelBasis {
    field public static final byte Endpoint = 48; // 0x30
    field public static final byte EventProcessor = 32; // 0x20
    field public static final byte Gateway = 80; // 0x50
    field @NonNull public static final dev.atsushieno.ktmidi.ci.MidiCIAuthorityLevelBasis INSTANCE;
    field public static final byte NodeServer = 96; // 0x60
    field public static final byte Translator = 64; // 0x40
    field public static final byte Transport = 16; // 0x10
  }

  public final class MidiCIConstants {
    method @NonNull public dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo getMidi1ProtocolTypeInfo();
    method public error.NonExistentClass getMidi1ThenMidi2Protocols();
    method @NonNull public dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo getMidi2ProtocolTypeInfo();
    method public error.NonExistentClass getMidi2ThenMidi1Protocols();
    property @NonNull public final dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo Midi1ProtocolTypeInfo;
    property public final error.NonExistentClass Midi1ThenMidi2Protocols;
    property @NonNull public final dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo Midi2ProtocolTypeInfo;
    property public final error.NonExistentClass Midi2ThenMidi1Protocols;
    field public static final byte CI_VERSION_AND_FORMAT = 1; // 0x1
    field public static final byte DEVICE_ID_MIDI_PORT = 127; // 0x7f
    field @NonNull public static final dev.atsushieno.ktmidi.ci.MidiCIConstants INSTANCE;
    field public static final int RECEIVABLE_MAX_SYSEX_SIZE = 4096; // 0x1000
    field public static final byte RESPONDER_CI_CATEGORY_SUPPORTED = 127; // 0x7f
  }

  public final class MidiCIDiscoveryCategoryFlags {
    field @NonNull public static final dev.atsushieno.ktmidi.ci.MidiCIDiscoveryCategoryFlags INSTANCE;
    field public static final byte None = 0; // 0x0
    field public static final byte ProfileConfiguration = 2; // 0x2
    field public static final byte PropertyExchange = 4; // 0x4
    field public static final byte ProtocolNegotiation = 1; // 0x1
    field public static final byte ThreePs = 7; // 0x7
  }

  public enum MidiCIDiscoveryResponseCode {
    enum_constant public static final dev.atsushieno.ktmidi.ci.MidiCIDiscoveryResponseCode InvalidateMUID;
    enum_constant public static final dev.atsushieno.ktmidi.ci.MidiCIDiscoveryResponseCode NAK;
    enum_constant public static final dev.atsushieno.ktmidi.ci.MidiCIDiscoveryResponseCode Reply;
  }

  public final class MidiCIInitiator {
    ctor public MidiCIInitiator(@NonNull kotlin.jvm.functions.Function1<? super java.util.List<java.lang.Byte>,kotlin.Unit> sendOutput, optional byte authorityLevel, optional int muid);
    method public void confirmProtocol(int destinationMUID, byte authorityLevel);
    method public byte getAuthorityLevel();
    method @NonNull public dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo getCurrentMidiProtocol();
    method @NonNull public dev.atsushieno.ktmidi.ci.DeviceDetails getDevice();
    method public int getMidiCIBufferSize();
    method public int getMuid();
    method public error.NonExistentClass getPreferredProtocols();
    method @NonNull public kotlin.jvm.functions.Function4<dev.atsushieno.ktmidi.ci.MidiCIDiscoveryResponseCode,dev.atsushieno.ktmidi.ci.DeviceDetails,java.lang.Integer,java.lang.Integer,kotlin.Unit> getProcessDiscoveryResponse();
    method @NonNull public kotlin.jvm.functions.Function3<java.lang.Byte,java.lang.Integer,java.util.List<kotlin.Pair<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean>>,kotlin.Unit> getProcessProfileInquiryResponse();
    method @NonNull public kotlin.jvm.functions.Function2<java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo>,java.lang.Integer,kotlin.Unit> getProcessReplyToInitiateProtocolNegotiation();
    method @NonNull public kotlin.jvm.functions.Function2<java.lang.Integer,java.util.List<java.lang.Byte>,kotlin.Unit> getProcessTestProtocolReply();
    method public boolean getProtocolTested();
    method @NonNull public dev.atsushieno.ktmidi.ci.MidiCIInitiatorState getState();
    method public void initiateProtocolNegotiation(int destinationMUID, byte authorityLevel, @NonNull java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo> protocolTypes);
    method public void processInput(@NonNull java.util.List<java.lang.Byte> data);
    method public void requestProfiles(byte destinationChannelOr7F, int destinationMUID);
    method public void sendDiscovery(optional byte ciCategorySupported);
    method public void setCurrentMidiProtocol(@NonNull dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo currentMidiProtocol);
    method public void setDevice(@NonNull dev.atsushieno.ktmidi.ci.DeviceDetails device);
    method public void setMidiCIBufferSize(int midiCIBufferSize);
    method public void setNewProtocol(int destinationMUID, byte authorityLevel, @NonNull dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo newProtocolType);
    method public void setPreferredProtocols(error.NonExistentClass preferredProtocols);
    method public void setProcessDiscoveryResponse(@NonNull kotlin.jvm.functions.Function4<? super dev.atsushieno.ktmidi.ci.MidiCIDiscoveryResponseCode,? super dev.atsushieno.ktmidi.ci.DeviceDetails,? super java.lang.Integer,? super java.lang.Integer,kotlin.Unit> processDiscoveryResponse);
    method public void setProcessProfileInquiryResponse(@NonNull kotlin.jvm.functions.Function3<? super java.lang.Byte,? super java.lang.Integer,? super java.util.List<kotlin.Pair<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean>>,kotlin.Unit> processProfileInquiryResponse);
    method public void setProcessReplyToInitiateProtocolNegotiation(@NonNull kotlin.jvm.functions.Function2<? super java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo>,? super java.lang.Integer,kotlin.Unit> processReplyToInitiateProtocolNegotiation);
    method public void setProcessTestProtocolReply(@NonNull kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.util.List<java.lang.Byte>,kotlin.Unit> processTestProtocolReply);
    method public void setProtocolTested(boolean protocolTested);
    method public void setState(@NonNull dev.atsushieno.ktmidi.ci.MidiCIInitiatorState state);
    method public void testNewProtocol(int destinationMUID, byte authorityLevel, @NonNull java.util.List<java.lang.Byte> testData48Bytes);
    property public final byte authorityLevel;
    property @NonNull public final dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo currentMidiProtocol;
    property @NonNull public final dev.atsushieno.ktmidi.ci.DeviceDetails device;
    property public final int midiCIBufferSize;
    property public final int muid;
    property public final error.NonExistentClass preferredProtocols;
    property @NonNull public final kotlin.jvm.functions.Function4<dev.atsushieno.ktmidi.ci.MidiCIDiscoveryResponseCode,dev.atsushieno.ktmidi.ci.DeviceDetails,java.lang.Integer,java.lang.Integer,kotlin.Unit> processDiscoveryResponse;
    property @NonNull public final kotlin.jvm.functions.Function3<java.lang.Byte,java.lang.Integer,java.util.List<kotlin.Pair<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean>>,kotlin.Unit> processProfileInquiryResponse;
    property @NonNull public final kotlin.jvm.functions.Function2<java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo>,java.lang.Integer,kotlin.Unit> processReplyToInitiateProtocolNegotiation;
    property @NonNull public final kotlin.jvm.functions.Function2<java.lang.Integer,java.util.List<java.lang.Byte>,kotlin.Unit> processTestProtocolReply;
    property public final boolean protocolTested;
    property @NonNull public final dev.atsushieno.ktmidi.ci.MidiCIInitiatorState state;
  }

  public enum MidiCIInitiatorState {
    enum_constant public static final dev.atsushieno.ktmidi.ci.MidiCIInitiatorState DISCOVERED;
    enum_constant public static final dev.atsushieno.ktmidi.ci.MidiCIInitiatorState DISCOVERY_SENT;
    enum_constant public static final dev.atsushieno.ktmidi.ci.MidiCIInitiatorState ESTABLISHED;
    enum_constant public static final dev.atsushieno.ktmidi.ci.MidiCIInitiatorState Initial;
    enum_constant public static final dev.atsushieno.ktmidi.ci.MidiCIInitiatorState NEW_PROTOCOL_SENT;
    enum_constant public static final dev.atsushieno.ktmidi.ci.MidiCIInitiatorState TEST_SENT;
  }

  public final class MidiCIInitiatorTest {
    ctor public MidiCIInitiatorTest();
    method public void basicRun();
    method public void initialState();
  }

  public final class MidiCIProfileId {
    ctor public MidiCIProfileId(optional byte mid1_7e, byte mid2_bank, byte mid3_number, byte msi1_version, byte msi2_level);
    method public byte getMid1_7e();
    method public byte getMid2_bank();
    method public byte getMid3_number();
    method public byte getMsi1_version();
    method public byte getMsi2_level();
    property public final byte mid1_7e;
    property public final byte mid2_bank;
    property public final byte mid3_number;
    property public final byte msi1_version;
    property public final byte msi2_level;
  }

  public final class MidiCIProtocolTypeInfo {
    ctor public MidiCIProtocolTypeInfo(byte type, byte version, byte extensions, byte reserved1, byte reserved2);
    method public byte getExtensions();
    method public byte getReserved1();
    method public byte getReserved2();
    method public byte getType();
    method public byte getVersion();
    property public final byte extensions;
    property public final byte reserved1;
    property public final byte reserved2;
    property public final byte type;
    property public final byte version;
  }

  public final class MidiCIResponder {
    ctor public MidiCIResponder(@NonNull kotlin.jvm.functions.Function1<? super java.util.List<java.lang.Byte>,kotlin.Unit> sendOutput, optional byte authorityLevel, optional int muid);
    method @NonNull public dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo getCurrentMidiProtocol();
    method @NonNull public dev.atsushieno.ktmidi.ci.DeviceDetails getDevice();
    method @Nullable public dev.atsushieno.ktmidi.ci.DeviceDetails getInitiatorDevice();
    method public int getMidiCIBufferSize();
    method @NonNull public kotlin.jvm.functions.Function2<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean,kotlin.Unit> getOnProfileSet();
    method @NonNull public kotlin.jvm.functions.Function1<java.lang.Integer,kotlin.Unit> getProcessConfirmNewProtocol();
    method @NonNull public kotlin.jvm.functions.Function2<dev.atsushieno.ktmidi.ci.DeviceDetails,java.lang.Integer,dev.atsushieno.ktmidi.ci.MidiCIDiscoveryResponseCode> getProcessDiscovery();
    method @NonNull public kotlin.jvm.functions.Function2<java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo>,java.lang.Integer,java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo>> getProcessNegotiationInquiry();
    method @NonNull public kotlin.jvm.functions.Function2<java.lang.Integer,java.lang.Integer,java.util.List<kotlin.Pair<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean>>> getProcessProfileInquiry();
    method @NonNull public kotlin.jvm.functions.Function5<java.lang.Byte,java.lang.Integer,java.lang.Integer,dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.util.List<java.lang.Byte>,kotlin.Unit> getProcessProfileSpecificData();
    method @NonNull public kotlin.jvm.functions.Function2<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo,java.lang.Integer,java.lang.Boolean> getProcessSetNewProtocol();
    method @NonNull public kotlin.jvm.functions.Function5<java.lang.Byte,java.lang.Integer,java.lang.Integer,dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean,java.lang.Boolean> getProcessSetProfile();
    method @NonNull public kotlin.jvm.functions.Function2<java.util.List<java.lang.Byte>,java.lang.Integer,java.lang.Boolean> getProcessTestNewProtocol();
    method @NonNull public java.util.List<kotlin.Pair<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean>> getProfileSet();
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo> getSupportedProtocols();
    method public void processInput(@NonNull java.util.List<java.lang.Byte> data);
    method public void setCurrentMidiProtocol(@NonNull dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo currentMidiProtocol);
    method public void setDevice(@NonNull dev.atsushieno.ktmidi.ci.DeviceDetails device);
    method public void setInitiatorDevice(@Nullable dev.atsushieno.ktmidi.ci.DeviceDetails initiatorDevice);
    method public void setMidiCIBufferSize(int midiCIBufferSize);
    method public void setOnProfileSet(@NonNull kotlin.jvm.functions.Function2<? super dev.atsushieno.ktmidi.ci.MidiCIProfileId,? super java.lang.Boolean,kotlin.Unit> onProfileSet);
    method public void setProcessConfirmNewProtocol(@NonNull kotlin.jvm.functions.Function1<? super java.lang.Integer,kotlin.Unit> processConfirmNewProtocol);
    method public void setProcessDiscovery(@NonNull kotlin.jvm.functions.Function2<? super dev.atsushieno.ktmidi.ci.DeviceDetails,? super java.lang.Integer,? extends dev.atsushieno.ktmidi.ci.MidiCIDiscoveryResponseCode> processDiscovery);
    method public void setProcessNegotiationInquiry(@NonNull kotlin.jvm.functions.Function2<? super java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo>,? super java.lang.Integer,? extends java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo>> processNegotiationInquiry);
    method public void setProcessProfileInquiry(@NonNull kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.Integer,? extends java.util.List<kotlin.Pair<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean>>> processProfileInquiry);
    method public void setProcessProfileSpecificData(@NonNull kotlin.jvm.functions.Function5<? super java.lang.Byte,? super java.lang.Integer,? super java.lang.Integer,? super dev.atsushieno.ktmidi.ci.MidiCIProfileId,? super java.util.List<java.lang.Byte>,kotlin.Unit> processProfileSpecificData);
    method public void setProcessSetNewProtocol(@NonNull kotlin.jvm.functions.Function2<? super dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo,? super java.lang.Integer,java.lang.Boolean> processSetNewProtocol);
    method public void setProcessSetProfile(@NonNull kotlin.jvm.functions.Function5<? super java.lang.Byte,? super java.lang.Integer,? super java.lang.Integer,? super dev.atsushieno.ktmidi.ci.MidiCIProfileId,? super java.lang.Boolean,java.lang.Boolean> processSetProfile);
    method public void setProcessTestNewProtocol(@NonNull kotlin.jvm.functions.Function2<? super java.util.List<java.lang.Byte>,? super java.lang.Integer,java.lang.Boolean> processTestNewProtocol);
    method public void setProfileSet(@NonNull java.util.List<kotlin.Pair<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean>> profileSet);
    method public void setSupportedProtocols(@NonNull java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo> supportedProtocols);
    property @NonNull public final dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo currentMidiProtocol;
    property @NonNull public final dev.atsushieno.ktmidi.ci.DeviceDetails device;
    property @Nullable public final dev.atsushieno.ktmidi.ci.DeviceDetails initiatorDevice;
    property public final int midiCIBufferSize;
    property @NonNull public final kotlin.jvm.functions.Function2<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean,kotlin.Unit> onProfileSet;
    property @NonNull public final kotlin.jvm.functions.Function1<java.lang.Integer,kotlin.Unit> processConfirmNewProtocol;
    property @NonNull public final kotlin.jvm.functions.Function2<dev.atsushieno.ktmidi.ci.DeviceDetails,java.lang.Integer,dev.atsushieno.ktmidi.ci.MidiCIDiscoveryResponseCode> processDiscovery;
    property @NonNull public final kotlin.jvm.functions.Function2<java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo>,java.lang.Integer,java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo>> processNegotiationInquiry;
    property @NonNull public final kotlin.jvm.functions.Function2<java.lang.Integer,java.lang.Integer,java.util.List<kotlin.Pair<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean>>> processProfileInquiry;
    property @NonNull public final kotlin.jvm.functions.Function5<java.lang.Byte,java.lang.Integer,java.lang.Integer,dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.util.List<java.lang.Byte>,kotlin.Unit> processProfileSpecificData;
    property @NonNull public final kotlin.jvm.functions.Function2<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo,java.lang.Integer,java.lang.Boolean> processSetNewProtocol;
    property @NonNull public final kotlin.jvm.functions.Function5<java.lang.Byte,java.lang.Integer,java.lang.Integer,dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean,java.lang.Boolean> processSetProfile;
    property @NonNull public final kotlin.jvm.functions.Function2<java.util.List<java.lang.Byte>,java.lang.Integer,java.lang.Boolean> processTestNewProtocol;
    property @NonNull public final java.util.List<kotlin.Pair<dev.atsushieno.ktmidi.ci.MidiCIProfileId,java.lang.Boolean>> profileSet;
    property @NonNull public final java.util.List<dev.atsushieno.ktmidi.ci.MidiCIProtocolTypeInfo> supportedProtocols;
  }

  public final class MidiCIResponderTest {
    ctor public MidiCIResponderTest();
    method public void initialState();
  }

  public final class MidiCISystem {
    method @NonNull public kotlin.time.TimeSource getTimeSource();
    method public void setTimeSource(@NonNull kotlin.time.TimeSource timeSource);
    property @NonNull public final kotlin.time.TimeSource timeSource;
    field @NonNull public static final dev.atsushieno.ktmidi.ci.MidiCISystem INSTANCE;
  }

  public final class TestCIMediator {
    ctor public TestCIMediator();
    method @NonNull public dev.atsushieno.ktmidi.ci.MidiCIInitiator getInitiator();
    method @NonNull public kotlin.jvm.functions.Function1<java.util.List<java.lang.Byte>,kotlin.Unit> getInitiatorSender();
    method @NonNull public dev.atsushieno.ktmidi.ci.MidiCIResponder getResponder();
    method @NonNull public kotlin.jvm.functions.Function1<java.util.List<java.lang.Byte>,kotlin.Unit> getResponderSender();
    property @NonNull public final dev.atsushieno.ktmidi.ci.MidiCIInitiator initiator;
    property @NonNull public final kotlin.jvm.functions.Function1<java.util.List<java.lang.Byte>,kotlin.Unit> initiatorSender;
    property @NonNull public final dev.atsushieno.ktmidi.ci.MidiCIResponder responder;
    property @NonNull public final kotlin.jvm.functions.Function1<java.util.List<java.lang.Byte>,kotlin.Unit> responderSender;
  }

}

